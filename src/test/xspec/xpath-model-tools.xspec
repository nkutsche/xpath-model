<?xml version="1.0" encoding="UTF-8"?>
<x:description xmlns:x="http://www.jenitennison.com/xslt/xspec" xmlns:nk="http://www.nkutsche.com/xpath-model"
    xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" stylesheet="../../main/resources/xsl/xpath-model.xsl" measure-time="true">

    <x:scenario label="Testing function nk:get-return-from-expr" catch="true">
        <x:call function="nk:get-return-from-expr"/>

        <x:scenario label="location steps and step expressions">
            <x:scenario label="trivial">
                <x:call>
                    <x:param position="1" select="nk:xpath-model(.)">foo</x:param>
                </x:call>
                <x:expect label="return object">
                    <nodeTest name="foo" kind="element"/>
                </x:expect>
            </x:scenario>
            <x:scenario label="trivial step expr">
                <x:call>
                    <x:param position="1" select="nk:xpath-model(.)">foo/bar</x:param>
                </x:call>
                <x:expect label="return object">
                    <nodeTest name="bar" kind="element"/>
                </x:expect>
            </x:scenario>
            <x:scenario label="step with predicate">
                <x:call>
                    <x:param position="1" select="nk:xpath-model(.)">@foo[bar]</x:param>
                </x:call>
                <x:expect label="return object">
                     <nodeTest name="foo" kind="attribute"/>
                 </x:expect>
            </x:scenario>
        </x:scenario>

        <x:scenario label="literals and other primitives">
            <x:scenario label="string">
                <x:call>
                    <x:param position="1" select="nk:xpath-model(.)">'foo'</x:param>
                </x:call>
                <x:expect label="return object">
                    <string value="foo"/>
                </x:expect>
            </x:scenario>
            <x:scenario label="integer">
                <x:call>
                    <x:param position="1" select="nk:xpath-model(.)">23</x:param>
                </x:call>
                <x:expect label="return object">
                    <integer value="23"/>
                </x:expect>
            </x:scenario>
            <x:scenario label="empty sequence">
                <x:call>
                    <x:param position="1" select="nk:xpath-model(.)">()</x:param>
                </x:call>
                <x:expect label="return object">
                    <empty/>
                </x:expect>
            </x:scenario>
            <x:scenario label="context item">
                <x:call>
                    <x:param position="1" select="nk:xpath-model(.)">.</x:param>
                </x:call>
                <x:expect label="return object">
                    <self/>
                </x:expect>
            </x:scenario>
            <x:scenario label="root node">
                <x:call>
                    <x:param select="nk:xpath-model(.)">/</x:param>
                </x:call>
                <x:expect label="return object">
                    <root/>
                </x:expect>
            </x:scenario>
            <x:scenario label="variable reference">
                <x:call>
                    <x:param select="nk:xpath-model(.)">$some_var</x:param>
                </x:call>
                <x:expect label="return object">
                    <varRef name="some_var"/>
                </x:expect>
            </x:scenario>
        </x:scenario>
        
        <x:scenario label="operations returning atomic values">
            <x:scenario label="additive">
                <x:call>
                    <x:param select="nk:xpath-model(.)">1 + 2</x:param>
                </x:call>
                <x:expect label="return object">
                    <operation type="additive">...</operation>
                </x:expect>
            </x:scenario>
            <x:scenario label="multiplicativ">
                <x:call>
                    <x:param select="nk:xpath-model(.)">1 * 2</x:param>
                </x:call>
                <x:expect label="return object">
                    <operation type="multiplicativ">...</operation>
                </x:expect>
            </x:scenario>
            <x:scenario label="logical">
                <x:call>
                    <x:param select="nk:xpath-model(.)">1 or 2 and 3 or 4</x:param>
                </x:call>
                <x:expect label="return object">
                    <operation type="or">...</operation>
                </x:expect>
            </x:scenario>
            <x:scenario label="node-compare">
                <x:call>
                    <x:param select="nk:xpath-model(.)">* is foo</x:param>
                </x:call>
                <x:expect label="return object">
                    <operation type="node-compare">...</operation>
                </x:expect>
            </x:scenario>
        </x:scenario>
        
        <x:scenario label="transistiv operations">
            <x:scenario label="simple map">
                <x:call>
                    <x:param select="nk:xpath-model(.)">$var ! foo</x:param>
                </x:call>
                <x:expect label="return object">
                    <nodeTest name="foo" kind="element"/>
                </x:expect>
            </x:scenario>

            <x:scenario label="cast as">
                <x:call>
                    <x:param select="nk:xpath-model(.)">'1' cast as xs:integer?</x:param>
                </x:call>
                <x:expect label="return object">
                    <string value="1"/>
                </x:expect>
            </x:scenario>

            <x:scenario label="postfix with predicate">
                <x:call>
                    <x:param select="nk:xpath-model(.)">$var[1]</x:param>
                </x:call>
                <x:expect label="return object">
                    <varRef name="var"/>
                </x:expect>
            </x:scenario>

            <x:scenario label="postfix with lookup">
                <x:call>
                    <x:param select="nk:xpath-model(.)">$var?*</x:param>
                </x:call>
                <x:expect label="return object">
                    <lookup/>
                </x:expect>
            </x:scenario>
            <x:scenario label="postfix with function-call">
                <x:call>
                    <x:param select="nk:xpath-model(.)">$var(1)</x:param>
                </x:call>
                <x:expect label="return object">
                    <function-call>...</function-call>
                </x:expect>
            </x:scenario>
            <x:scenario label="postfix with lookup, function-call and predicate">
                <x:call>
                    <x:param select="nk:xpath-model(.)">$var[2]?lookup(1)</x:param>
                </x:call>
                <x:expect label="return object">
                    <function-call>...</function-call>
                </x:expect>
            </x:scenario>
            <x:scenario label="arrow operation">
                <x:call>
                    <x:param select="nk:xpath-model(.)">$var => string-join(',') => count()</x:param>
                </x:call>
                <x:expect label="return object">
                    <function-call>...</function-call>
                </x:expect>
            </x:scenario>
            
        </x:scenario>
        <x:scenario label="combining operations">
            <x:scenario label="sequence">
                <x:call>
                    <x:param select="nk:xpath-model(.)">'foo', 'bar', 'baz'</x:param>
                </x:call>
                <x:expect label="return object">
                    <string value="foo"/>
                    <string value="bar"/>
                    <string value="baz"/>
                </x:expect>
            </x:scenario>
            <x:scenario label="union">
                <x:call>
                    <x:param select="nk:xpath-model(.)">foo|bar|baz</x:param>
                </x:call>
                <x:expect label="return object">
                    <nodeTest name="foo" kind="element"/>
                    <nodeTest name="bar" kind="element"/>
                    <nodeTest name="baz" kind="element"/>
                </x:expect>
            </x:scenario>
            <x:scenario label="intersect and except">
                <x:call>
                    <x:param select="nk:xpath-model(.)">* except foo intersect *[@*] except bar</x:param>
                </x:call>
                <x:expect label="return object">
                    <nodeTest kind="element"/>
                    <nodeTest kind="element"/>
                </x:expect>
            </x:scenario>
            <x:scenario label="condition">
                <x:call>
                    <x:param select="nk:xpath-model(.)">if('true') then 'do' else 'otherwise'</x:param>
                </x:call>
                <x:expect label="return object">
                    <string value="do"/>
                    <string value="otherwise"/>
                </x:expect>
            </x:scenario>
            
        </x:scenario>

    </x:scenario>
    
    
    <x:scenario label="Testing function nk:xsl-context" catch="true">
        <x:call function="nk:xsl-context">
            <x:param name="node" position="1" select="id('template-match')" href="data/xsl-context.xsl"/>
            <x:param name="expr" position="2" select="()"></x:param>
        </x:call>
        <x:expect label="parent" test="$x:result?parent()" select="()"/>
    </x:scenario>

    <x:scenario label="Testing function nk:sch-context" catch="true">
        <x:call function="nk:sch-context">
            <x:param name="expr" position="2" select="()"></x:param>
        </x:call>
        <x:scenario label="parent of assert1">
            <x:call>
                <x:param name="node" position="1" select="//*[@id = 'assert1']" href="data/sch-context.sch"/>
            </x:call>
            <x:expect label="parent" test="$x:result?parent()?node" select="//*[@id = 'rule1']" href="data/sch-context.sch"/>
            <x:expect label="parent" test="$x:result?parent()?expr"><expr>...</expr></x:expect>
            <x:expect label="parent" test="$x:result?variable-context(QName('', 'var-local'))?node"
                href="data/sch-context.sch" select="id('var-local')"/>
            <x:expect label="parent" test="$x:result?variable-context(QName('', 'var-global'))?node"
                href="data/sch-context.sch" select="id('var-global')"/>
        </x:scenario>
        <x:scenario label="parent of rule1">
            <x:call>
                <x:param name="node" position="1" select="//*[@id = 'rule1']" href="data/sch-context.sch"/>
            </x:call>
            <x:expect label="parent" test="$x:result?parent()?node" select="()"/>
            <x:expect label="parent" test="$x:result?parent()?expr" select="()"/>
        </x:scenario>
    </x:scenario>
    
    
    <x:scenario label="Testing function nk:get-context-provider" catch="true">
        <x:call function="nk:get-context-provider"/>
        
        <x:scenario label="with a global dummy context">
            <x:call>
                <x:param name="variableScope" position="2" select="nk:xsl-context(//xsl:variable[@name = 'global-dummy']/@select, ())" href="data/xsl-context.xsl"/>
            </x:call>
            
            <x:scenario label="location steps only">
                <x:scenario label="trivial">
                    <x:call>
                        <x:param position="1" select="(nk:xpath-model(.)//nodeTest)[@name = 'bar']">foo/bar</x:param>
                    </x:call>
                    <x:expect label="return object" test="$x:result?nodeTest">
                        <nodeTest name="foo" kind="element"/>
                    </x:expect>
                    <x:expect label="requires not root" test="not($x:result?root-required)"/>
                </x:scenario>
                <x:scenario label="with predicate">
                    <x:call>
                        <x:param position="1" select="(nk:xpath-model(.)//nodeTest)[@name = 'bar']">foo[bar]</x:param>
                    </x:call>
                    <x:expect label="return object" test="$x:result?nodeTest">
                        <nodeTest name="foo" kind="element"/>
                    </x:expect>
                    <x:expect label="requires not root" test="not($x:result?root-required)"/>
                </x:scenario>
                <x:scenario label="with map operator">
                    <x:call>
                        <x:param position="1" select="(nk:xpath-model(.)//nodeTest)[@name = 'bar']">foo ! bar</x:param>
                    </x:call>
                    <x:expect label="return object" test="$x:result?nodeTest">
                        <nodeTest name="foo" kind="element"/>
                    </x:expect>
                    <x:expect label="requires not root" test="not($x:result?root-required)"/>
                </x:scenario>
    
                <x:scenario label="with union operator">
                    <x:call>
                        <x:param position="1" select="(nk:xpath-model(.)//nodeTest)[@name = 'baz']">(foo|bar)/baz</x:param>
                    </x:call>
                    <x:expect label="return object" test="$x:result?nodeTest">
                        <nodeTest name="foo" kind="element"/>
                        <nodeTest name="bar" kind="element"/>
                    </x:expect>
                    <x:expect label="count of results" test="count($x:result)" select="2"/>
                    <x:expect label="requires not root (1)" test="not($x:result[1]?root-required)"/>
                    <x:expect label="requires not root (2)" test="not($x:result[2]?root-required)"/>
                </x:scenario>
    
                <x:scenario label="with self">
                    <x:call>
                        <x:param position="1" select="(nk:xpath-model(.)//nodeTest)[@name = 'bar']">foo/./bar</x:param>
                    </x:call>
                    <x:expect label="return object" test="$x:result?nodeTest">
                        <nodeTest name="foo" kind="element"/>
                    </x:expect>
                    <x:expect label="requires not root" test="not($x:result?root-required)"/>
                </x:scenario>
                
                <x:scenario label="with union operator and self">
                    <x:call>
                        <x:param position="1" select="(nk:xpath-model(.)//nodeTest)[@name = 'baz']">foo/(.|bar)/baz</x:param>
                    </x:call>
                    <x:expect label="return object" test="$x:result?nodeTest">
                        <nodeTest name="foo" kind="element"/>
                        <nodeTest name="bar" kind="element"/>
                    </x:expect>
                    <x:expect label="count of results" test="count($x:result)" select="2"/>
                    <x:expect label="requires not root (1)" test="not($x:result[1]?root-required)"/>
                    <x:expect label="requires not root (2)" test="not($x:result[2]?root-required)"/>
                </x:scenario>
    
                <x:scenario label="with descendant-or-self">
                    <x:call>
                        <x:param position="1" select="(nk:xpath-model(.)//nodeTest[not(@name)])[last()]">*//*</x:param>
                    </x:call>
                    <x:expect label="return object" test="$x:result?nodeTest">
                        <nodeTest kind="node" />
                    </x:expect>
                    <x:expect label="count of results" test="count($x:result)" select="1"/>
                    <x:expect label="requires not root (1)" test="not($x:result?root-required)"/>
                </x:scenario>
                
                
                <x:scenario label="as absolute expr">
                    <x:call>
                        <x:param position="1" select="(nk:xpath-model(.)//nodeTest)[@name = 'bar']">/bar</x:param>
                    </x:call>
                    <x:expect label="return object" test="$x:result?nodeTest" select="()"/>
                    <x:expect label="requires root" test="boolean($x:result?root-required)"/>
                </x:scenario>
               
    
                <x:scenario label="as absolute expr inside of other expr">
                    <x:call>
                        <x:param position="1" select="(nk:xpath-model(.)//nodeTest)[@name = 'bar']">foo[/bar]</x:param>
                    </x:call>
                    <x:expect label="return object" test="$x:result?nodeTest" select="()"/>
                    <x:expect label="requires root" test="boolean($x:result?root-required)"/>
                </x:scenario>
    
                <x:scenario label="as absolute expr inside uncommon expr">
                    <x:call>
                        <x:param position="1" select="(nk:xpath-model(.)//nodeTest)[@name = 'bar']">foo / (/bar)</x:param>
                    </x:call>
                    <x:expect label="return object" test="$x:result?nodeTest" select="()"/>
                    <x:expect label="requires root" test="boolean($x:result?root-required)"/>
                </x:scenario>
                
            </x:scenario>
            <x:scenario label="as sequence type">
                <x:scenario label="foo instance of element(bar)">
                    <x:call>
                        <x:param position="1" select="(nk:xpath-model(.)//nodeTest)[@name = 'bar']">foo instance of element(bar)</x:param>
                    </x:call>
                    <x:expect label="return object" test="$x:result?nodeTest" select="()"/>
                    <x:expect label="requires not root" test="not($x:result?root-required)"/>
                </x:scenario>
            </x:scenario>
            
            <x:scenario label="as postfix operation">
                <x:scenario label="with predicate only">
                    <x:call>
                        <x:param position="1" select="(nk:xpath-model(.)//nodeTest)[@name = 'bar']">(/foo)[bar]</x:param>
                    </x:call>
                    <x:expect label="return object" test="$x:result?nodeTest">
                        <nodeTest name="foo" kind="element"/>
                    </x:expect>
                    <x:expect label="requires not root" test="not($x:result?root-required)"/>
                </x:scenario>
                <x:scenario label="with two predicates and a constructed sequence">
                    <x:call>
                        <x:param position="1" select="(nk:xpath-model(.)//nodeTest)[@name = 'check']">(/foo, /bar)[baz][check]</x:param>
                    </x:call>
                    <x:expect label="return object" test="$x:result?nodeTest">
                        <nodeTest name="foo" kind="element"/>
                        <nodeTest name="bar" kind="element"/>
                    </x:expect>
                    <x:expect label="requires not root (1)" test="not($x:result[1]?root-required)"/>
                    <x:expect label="requires not root (2)" test="not($x:result[2]?root-required)"/>
                </x:scenario>
                <x:scenario label="with a function-call">
                    <x:call>
                        <x:param position="1" select="(nk:xpath-model(.)//nodeTest)[@name = 'check']">$var(check)</x:param>
                    </x:call>
                    <x:expect label="return object" test="$x:result?nodeTest" select="()"/>
                    <x:expect label="requires root" test="boolean($x:result?root-required) eq false()"/>
                </x:scenario>
                <x:scenario label="with function-calls, some predicates and lookups">
                    <x:variable name="node-tests" select="nk:xpath-model(.)//nodeTest">(foo)[check1](check2)[check3]?key[check4]</x:variable>
                    <x:scenario label="check1">
                        <x:call>
                            <x:param position="1" select="$node-tests[@name = 'check1']"/>
                        </x:call>
                        <x:expect label="return object" test="$x:result?nodeTest">
                            <nodeTest name="foo" kind="element"/>
                        </x:expect>
                        <x:expect label="requires not root" test="not($x:result?root-required)"/>
                    </x:scenario>
                    <x:scenario label="check2">
                        <x:call>
                            <x:param position="1" select="$node-tests[@name = 'check2']"/>
                        </x:call>
                        <x:expect label="return object" test="$x:result?nodeTest" select="()"/>
                        <x:expect label="path object" test="$x:result?pathObj" select="()"/>
                        <x:expect label="requires not root" test="not($x:result?root-required)"/>
                    </x:scenario>
                    <x:scenario label="check3">
                        <x:call>
                            <x:param position="1" select="$node-tests[@name = 'check3']"/>
                        </x:call>
                        <x:expect label="return object" test="$x:result?nodeTest" select="()"/>
                        <x:expect label="path object" test="$x:result?pathObj">
                            <function-call>...</function-call>
                        </x:expect>
                        <x:expect label="requires not root" test="not($x:result?root-required)"/>
                    </x:scenario>
                    <x:scenario label="check4">
                        <x:call>
                            <x:param position="1" select="$node-tests[@name = 'check4']"/>
                        </x:call>
                        <x:expect label="return object" test="$x:result?nodeTest" select="()"/>
                        <x:expect label="path object" test="$x:result?pathObj">
                            <lookup>...</lookup>
                        </x:expect>
                        <x:expect label="requires not root" test="not($x:result?root-required)"/>
                    </x:scenario>
                </x:scenario>
            </x:scenario>
            
            <x:scenario label="with variable references">
                
                <x:scenario label="using global variables only">
    
                    <x:scenario label="trivial">
                        <x:call>
                            <x:param position="1" select="(nk:xpath-model(.)//nodeTest)[@name = 'check']">$var/check</x:param>
                        </x:call>
                        <x:expect label="return object" test="$x:result?nodeTest">
                            <nodeTest name="global-var-value" kind="element"/>
                        </x:expect>
    
                    </x:scenario>
        
                    <x:scenario label="recursive var ref">
                        <x:call>
                            <x:param position="1" select="(nk:xpath-model(.)//nodeTest)[@name = 'check']">$var_recursive/check</x:param>
                        </x:call>
                        <x:expect label="return object" test="$x:result?nodeTest">
                            <nodeTest name="global-var-value" kind="element"/>
                        </x:expect>
                    </x:scenario>
                    
                </x:scenario>
                
                <x:scenario label="using local variables">
                    <x:call>
                        <x:param name="variableScope" position="2" select="nk:xsl-context(//xsl:variable[@name = 'local-dummy-1']/@select, ())" href="data/xsl-context.xsl"/>
                    </x:call>
                    <x:scenario label="self">
                        <x:call>
                            <x:param position="1" select="(nk:xpath-model(.)//nodeTest)[@name = 'check']">$self/check</x:param>
                        </x:call>
                        <x:expect label="return object" test="$x:result?nodeTest">
                            <nodeTest name="for-each-context" kind="element"/>
                        </x:expect>
                    </x:scenario>
    
                    <x:scenario label="in inner context">
                        <x:call>
                            <x:param name="variableScope" position="2" select="nk:xsl-context(//xsl:variable[@name = 'local-dummy-2']/@select, ())" href="data/xsl-context.xsl"/>
                        </x:call>
                        
                        <x:scenario label="using $self">
                            <x:call>
                                <x:param position="1" select="(nk:xpath-model(.)//nodeTest)[@name = 'check']">$self/check</x:param>
                            </x:call>
                            <x:expect label="return object" test="$x:result?nodeTest">
                                <nodeTest name="for-each-context" kind="element"/>
                            </x:expect>
                        </x:scenario>
                        <x:scenario label="using inner context">
                            <x:call>
                                <x:param position="1" select="(nk:xpath-model(.)//nodeTest)[@name = 'check']">check</x:param>
                            </x:call>
                            <x:expect label="return object" test="$x:result?nodeTest">
                                <nodeTest name="inner-context" kind="element"/>
                            </x:expect>
                        </x:scenario>
                    </x:scenario>
    
                    <x:scenario label="overwrite variables by scope">
                        <x:call>
                            <x:param position="1" select="(nk:xpath-model(.)//nodeTest)[@name = 'check']">$var/check</x:param>
                        </x:call>
                        <x:expect label="return object" test="$x:result?nodeTest">
                            <nodeTest name="local-var-value" kind="element"/>
                        </x:expect>
                    </x:scenario>
    
                    <x:scenario label="escape variable scope">
                        <x:call>
                            <x:param position="1" select="(nk:xpath-model(.)//nodeTest)[@name = 'check']">$var_recursive/check</x:param>
                        </x:call>
                        <x:expect label="return object" test="$x:result?nodeTest">
                            <nodeTest name="global-var-value" kind="element"/>
                        </x:expect>
                    </x:scenario>
                    
                </x:scenario>
                <x:scenario label="using variable with content">
                    <x:scenario label="trivial">
                        <x:call>
                            <x:param position="1" select="(nk:xpath-model(.)//nodeTest)[@name = 'check']">$var-w-content/check</x:param>
                        </x:call>
                        <x:expect label="return object" test="$x:result?nodeTest" select="()"/>
                        <x:expect label="requires not root" test="not($x:result?root-required)"/>
                    </x:scenario>
                </x:scenario>
            </x:scenario>
        </x:scenario>
            
            
        <x:scenario label="with slash as context">
            <x:call function="nk:get-context-provider">
                <x:param name="variableScope" position="2" select="nk:xsl-context(//xsl:variable[@name = 'root-level-dummy']/@select, ())" href="data/xsl-context.xsl"/>
            </x:call>
            <x:scenario label="trivial">
                <x:call>
                    <x:param position="1" select="(nk:xpath-model(.)//nodeTest)[@name = 'foo']">foo</x:param>
                </x:call>

                <x:expect label="return object" test="$x:result?nodeTest" select="()"/>
                <x:expect label="root required" test="boolean($x:result?root-required) eq true()"/>
            </x:scenario>
        </x:scenario>
        <x:scenario label="template/@match">
            <x:call>
                <x:param name="variableScope" position="2" select="nk:xsl-context(id('template-match'), ())" href="data/xsl-context.xsl"/>
            </x:call>
            
            <x:scenario label="trivial">
                <x:call>
                    <x:param position="1" select="(nk:xpath-model(.)//nodeTest)[@name = 'foo']">foo</x:param>
                </x:call>
                <x:expect label="return object" test="$x:result?nodeTest" select="()"/>
                
                <x:expect label="root required" test="boolean($x:result?root-required) eq false()"/>
                <x:expect label="count results" test="count($x:result)" select="1"/>
                <x:expect label="reason" test="$x:result?reason" select="'no-parent-expression-provides-a-context'"/>
            </x:scenario>
            <x:scenario label="two steps">
                <x:call>
                    <x:param position="1" select="(nk:xpath-model(.)//nodeTest)[@name = 'bar']">foo/bar</x:param>
                </x:call>
                <x:expect label="return object" test="$x:result?nodeTest">
                    <nodeTest name="foo" kind="element"/>
                </x:expect>
                <x:expect label="root required" test="boolean($x:result?root-required) eq false()"/>
            </x:scenario>
        </x:scenario>
        <x:scenario label="inside of sch:rule/@context">
            <x:variable name="context" select="nk:sch-context(//*[@id = 'assert1'], ())" href="data/sch-context.sch"/>
            <x:call>
                <x:param name="exprContext" position="2" select="$context"/>
            </x:call>
            
            <x:scenario label="trivial">
                <x:call>
                    <x:param position="1" select="(nk:xpath-model(.)//nodeTest)[@name = 'foo']">foo</x:param>
                </x:call>
                <x:expect label="return object" test="$x:result?nodeTest">
                    <nodeTest name="operation" kind="element"/>
                </x:expect>
                
                <x:expect label="root required" test="boolean($x:result?root-required) eq false()"/>
                <x:expect label="count results" test="count($x:result)" select="1"/>
            </x:scenario>

            <x:scenario label="nk:expr inside of rule/@context='nk:expr/nk:operation'">
                <x:variable name="xpmconfig" select="map{'namespaces' : map{'nk' : 'http://www.nkutsche.com/xpath-model'}}"/>
                <x:variable name="nodeTest" select="(nk:xpath-model(., $xpmconfig)//nodeTest)[@name = 'nk:expr']">nk:expr</x:variable>
                <x:call>
                    <x:param position="1" select="$nodeTest"/>
                    <x:param name="exprContext" position="2" select="nk:sch-context(//*[@id = 'assert1'], $nodeTest/ancestor::expr)" href="data/sch-context_ns.sch"/>
                </x:call>
                <x:expect label="return object" test="$x:result?nodeTest">
                    <nodeTest name="nk:operation" kind="element"/>
                </x:expect>
                <x:expect label="context node" test="$x:result?context?node" select="//*[@id = 'rule1']" href="data/sch-context_ns.sch"/>
                <x:expect label="root required" test="boolean($x:result?root-required) eq false()"/>
                <x:expect label="count results" test="count($x:result)" select="1"/>
            </x:scenario>
            
        </x:scenario>
    </x:scenario>

    <x:scenario label="Testing function nk:get-path-in-expression" catch="true">
        <x:call function="nk:get-path-in-expression"/>
        
        <x:scenario label="simple value-of">
            <x:variable name="xsl-snippet" select="*">
                <xsl:value-of select="'dummy-xpath'"/>
            </x:variable>
            <x:call>
                <x:param position="2" select="nk:xsl-context($xsl-snippet/@select, ())"/>
            </x:call>
            
            
            <x:scenario label="trivial one step xpath">
                <x:call>
                    <x:param position="1" select="(nk:xpath-model(.)//nodeTest)[@name = 'foo']">foo</x:param>
                </x:call>
                <x:expect label="axis" test="$x:result?*?axis" select="'start', 'child'"/>
                <x:expect label="kind" test="$x:result?*?kind" select="'node', 'element'"/>
                <x:expect label="local" test="$x:result?*?local-name" select="'*', 'foo'"/>
                <x:expect label="namespace" test="$x:result?*?namespace" select="'*', ''"/>
            </x:scenario>
            
            <x:scenario label="trivial two step xpath">
                <x:call>
                    <x:param position="1" select="(nk:xpath-model(.)//nodeTest)[@name = 'bar']">foo/bar</x:param>
                </x:call>
                <x:expect label="axis" test="$x:result?*?axis" select="'start', 'child', 'child'"/>
                <x:expect label="kind" test="$x:result?*?kind" select="'node', 'element', 'element'"/>
                <x:expect label="local" test="$x:result?*?local-name" select="'*', 'foo', 'bar'"/>
                <x:expect label="namespace" test="$x:result?*?namespace" select="'*', '', ''"/>
            </x:scenario>

            <x:scenario label="two step xpath with leading slash">
                <x:call>
                    <x:param position="1" select="(nk:xpath-model(.)//nodeTest)[@name = 'bar']">/foo/bar</x:param>
                </x:call>
                <x:expect label="axis" test="$x:result?*?axis" select="'start', 'child', 'child'"/>
                <x:expect label="kind" test="$x:result?*?kind" select="'document-node', 'element', 'element'"/>
                <x:expect label="local" test="$x:result?*?local-name" select="'*', 'foo', 'bar'"/>
                <x:expect label="namespace" test="$x:result?*?namespace" select="'*', '', ''"/>
            </x:scenario>

            <x:scenario label="two step xpath with wildcard">
                <x:call>
                    <x:param position="1" select="(nk:xpath-model(.)//nodeTest)[last()]">foo/*</x:param>
                </x:call>
                <x:expect label="axis" test="$x:result?*?axis" select="'start', 'child', 'child'"/>
                <x:expect label="kind" test="$x:result?*?kind" select="'node', 'element', 'element'"/>
                <x:expect label="local" test="$x:result?*?local-name" select="'*', 'foo', '*'"/>
                <x:expect label="namespace" test="$x:result?*?namespace" select="'*', '', '*'"/>
            </x:scenario>
            <x:scenario label="two step xpath with attribute kind/axis">
                <x:call>
                    <x:param position="1" select="(nk:xpath-model(.)//nodeTest)[last()]">foo/@bar</x:param>
                </x:call>
                <x:expect label="axis" test="$x:result?*?axis" select="'start', 'child', 'attribute'"/>
                <x:expect label="kind" test="$x:result?*?kind" select="'node', 'element', 'attribute'"/>
                <x:expect label="local" test="$x:result?*?local-name" select="'*', 'foo', 'bar'"/>
                <x:expect label="namespace" test="$x:result?*?namespace" select="'*', '', ''"/>
            </x:scenario>

            <x:scenario label="three step xpath with different axis">
                <x:call>
                    <x:param position="1" select="(nk:xpath-model(.)//nodeTest)[last()]">ancestor-or-self::foo/following-sibling::bar/descendant::baz</x:param>
                </x:call>
                <x:expect label="axis" test="$x:result?*?axis" select="'start', 'ancestor-or-self', 'following-sibling', 'descendant'"/>
                <x:expect label="kind" test="$x:result?*?kind" select="'node', 'element', 'element', 'element'"/>
                <x:expect label="local" test="$x:result?*?local-name" select="'*', 'foo', 'bar', 'baz'"/>
                <x:expect label="namespace" test="$x:result?*?namespace" select="'*', '', '', ''"/>
            </x:scenario>
            
            <x:scenario label="with namespaces">
                <x:variable name="ns1" select="'www.example.com/ns1'"></x:variable>
                <x:variable name="ns2" select="'www.example.com/ns2'"></x:variable>
                <x:variable name="xpmconfig" select="map{'namespaces' : map{'ns1' : $ns1, 'ns2' : $ns2}}"/>
                
                <x:call>
                    <x:param position="1" select="(nk:xpath-model(., $xpmconfig)//nodeTest)[last()]">ns1:foo/ns2:bar</x:param>
                </x:call>
                <x:expect label="axis" test="$x:result?*?axis" select="'start', 'child', 'child'"/>
                <x:expect label="kind" test="$x:result?*?kind" select="'node', 'element', 'element'"/>
                <x:expect label="local" test="$x:result?*?local-name" select="'*', 'foo', 'bar'"/>
                <x:expect label="namespace" test="$x:result?*?namespace" select="'*', $ns1, $ns2"/>
                <x:expect label="not an error" test="not($x:result instance of map(*) and exists($x:result?err))"/>
            </x:scenario>
        </x:scenario>
    </x:scenario>
    
    <x:scenario label="Testing function nk:name-matcher" catch="true">
        <x:call function="nk:name-matcher"/>
        
        <x:scenario label="trival name">
            <x:call>
                <x:param position="1" select="*/@name">
                    <el name="foo"/>
                </x:param>
            </x:call>
            <x:expect label="namespace" test="$x:result?namespace" select="''"/>
            <x:expect label="local" test="$x:result?local" select="'foo'"/>
            <x:expect label="not an error" test="not($x:result instance of map(*) and exists($x:result?err))"/>
        </x:scenario>
        <x:scenario label="no name">
            <x:call>
                <x:param position="1" select="*/@name">
                    <el/>
                </x:param>
            </x:call>
            <x:expect label="namespace" test="$x:result?namespace" select="'*'"/>
            <x:expect label="local" test="$x:result?local" select="'*'"/>
        </x:scenario>
        <x:scenario label="simple prefixed name">
            <x:call>
                <x:param position="1" select="*/@name">
                    <el name="ns1:foo" xmlns:ns1="www.example.com/ns1"/>
                </x:param>
            </x:call>
            <x:expect label="namespace" test="$x:result?namespace" select="'www.example.com/ns1'"/>
            <x:expect label="local" test="$x:result?local" select="'foo'"/>
        </x:scenario>

        <x:scenario label="name with default namespace">
            <x:call>
                <x:param position="1" select="*/@name">
                    <el name="foo" xmlns="www.example.com/def"/>
                </x:param>
            </x:call>
            <x:expect label="namespace" test="$x:result?namespace" select="'www.example.com/def'"/>
            <x:expect label="local" test="$x:result?local" select="'foo'"/>
        </x:scenario>
        
        <x:scenario label="namespace wildcard">
            <x:call>
                <x:param position="1" select="*/@name">
                    <el name="*:foo"/>
                </x:param>
            </x:call>
            <x:expect label="namespace" test="$x:result?namespace" select="'*'"/>
            <x:expect label="local" test="$x:result?local" select="'foo'"/>
        </x:scenario>

        <x:scenario label="local wildcard">
            <x:call>
                <x:param position="1" select="*/@name">
                    <el name="ns1:*" xmlns:ns1="www.example.com/ns1"/>
                </x:param>
            </x:call>
            <x:expect label="namespace" test="$x:result?namespace" select="'www.example.com/ns1'"/>
            <x:expect label="local" test="$x:result?local" select="'*'"/>
        </x:scenario>

        <x:scenario label="uri syntax">
            <x:call>
                <x:param position="1" select="*/@name">
                    <el name="Q{{www.example.com/ns1}}foo"/>
                </x:param>
            </x:call>
            <x:expect label="namespace" test="$x:result?namespace" select="'www.example.com/ns1'"/>
            <x:expect label="local" test="$x:result?local" select="'foo'"/>
        </x:scenario>
        <x:scenario label="uri syntax with wildcard">
            <x:call>
                <x:param position="1" select="*/@name">
                    <el name="Q{{www.example.com/ns1}}*"/>
                </x:param>
            </x:call>
            <x:expect label="namespace" test="$x:result?namespace" select="'www.example.com/ns1'"/>
            <x:expect label="local" test="$x:result?local" select="'*'"/>
        </x:scenario>
        
    </x:scenario>
    
    
</x:description>
