<?xml version="1.0" encoding="UTF-8"?><x:description xmlns:nk="http://www.nkutsche.com/xpath-model" xmlns:x="http://www.jenitennison.com/xslt/xspec" stylesheet="../../../main/resources/xsl/xpath-model.xsl"><x:scenario label="/qt3tests-master/op/concatenate.xml"><x:call function="nk:xpath-model"/><x:scenario label="(1,2,3,4,5)">
      <x:call>
        <x:param select="string(.)">(1,2,3,4,5)</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(1,(2,3),4,5)">
      <x:call>
        <x:param select="string(.)">(1,(2,3),4,5)</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(1, 2, (), 3, 4)">
      <x:call>
        <x:param select="string(.)">(1, 2, (), 3, 4)</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(1, 2 to 5)">
      <x:call>
        <x:param select="string(.)">(1, 2 to 5)</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(1, 2, 2)">
      <x:call>
        <x:param select="string(.)">(1, 2, 2)</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="count((15 to 10))">
      <x:call>
        <x:param select="string(.)">count((15 to 10))</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="fn:reverse(10 to 15)">
      <x:call>
        <x:param select="string(.)">fn:reverse(10 to 15)</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="//empnum">
      <x:call>
        <x:param select="string(.)">//empnum</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="($works//empnum,$staff//empname)">
      <x:call>
        <x:param select="string(.)">($works//empnum,$staff//empname)</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(1, 1 + 1, 3, 4, 5)">
      <x:call>
        <x:param select="string(.)">(1, 1 + 1, 3, 4, 5)</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(1, 3 - 1, 3, 4, 5)">
      <x:call>
        <x:param select="string(.)">(1, 3 - 1, 3, 4, 5)</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(1, 2 * 1, 3, 4, 5)">
      <x:call>
        <x:param select="string(.)">(1, 2 * 1, 3, 4, 5)</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(1, 4 div 2, 3, 4, 5)">
      <x:call>
        <x:param select="string(.)">(1, 4 div 2, 3, 4, 5)</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(1, 4 idiv 2, 3, 4, 5)">
      <x:call>
        <x:param select="string(.)">(1, 4 idiv 2, 3, 4, 5)</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(1, fn:count((1, 2)), 3, 4, 5)">
      <x:call>
        <x:param select="string(.)">(1, fn:count((1, 2)), 3, 4, 5)</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(1, fn:string-length(&#34;AB&#34;), 3, 4, 5)">
      <x:call>
        <x:param select="string(.)">(1, fn:string-length("AB"), 3, 4, 5)</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(fn:true(),fn:true())">
      <x:call>
        <x:param select="string(.)">(fn:true(),fn:true())</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(fn:false(),fn:false())">
      <x:call>
        <x:param select="string(.)">(fn:false(),fn:false())</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(fn:not(&#34;true&#34;),fn:not(&#34;false&#34;))">
      <x:call>
        <x:param select="string(.)">(fn:not("true"),fn:not("false"))</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(fn:true() and fn:true(), fn:true())">
      <x:call>
        <x:param select="string(.)">(fn:true() and fn:true(), fn:true())</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(fn:true() or fn:true(), fn:true())">
      <x:call>
        <x:param select="string(.)">(fn:true() or fn:true(), fn:true())</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(xs:string(&#34;ABC&#34;), &#34;D&#34;, &#34;E&#34;)">
      <x:call>
        <x:param select="string(.)">(xs:string("ABC"), "D", "E")</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(xs:integer(1), 2, 3)">
      <x:call>
        <x:param select="string(.)">(xs:integer(1), 2, 3)</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(xs:decimal(1), 2, 3)">
      <x:call>
        <x:param select="string(.)">(xs:decimal(1), 2, 3)</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(xs:anyURI(&#34;http://www.example.com&#34;),xs:anyURI(&#34;http://www.example1.com&#34;))">
      <x:call>
        <x:param select="string(.)">(xs:anyURI("http://www.example.com"),xs:anyURI("http://www.example1.com"))</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(xs:float(1.1), 2.2, 3.3)">
      <x:call>
        <x:param select="string(.)">(xs:float(1.1), 2.2, 3.3)</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(xs:double(1.2E2), 2.2E2, 3.3E2)">
      <x:call>
        <x:param select="string(.)">(xs:double(1.2E2), 2.2E2, 3.3E2)</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(xs:boolean(fn:true()), fn:false(), fn:true())">
      <x:call>
        <x:param select="string(.)">(xs:boolean(fn:true()), fn:false(), fn:true())</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(xs:date(&#34;2004-12-25Z&#34;),xs:date(&#34;2004-12-26Z&#34;))">
      <x:call>
        <x:param select="string(.)">(xs:date("2004-12-25Z"),xs:date("2004-12-26Z"))</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(xs:dateTime(&#34;1999-11-28T09:00:00Z&#34;),xs:dateTime(&#34;1998-11-28T09:00:00Z&#34;))">
      <x:call>
        <x:param select="string(.)">(xs:dateTime("1999-11-28T09:00:00Z"),xs:dateTime("1998-11-28T09:00:00Z"))</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(xs:time(&#34;08:00:00+09:00&#34;),xs:time(&#34;08:00:00+10:00&#34;))">
      <x:call>
        <x:param select="string(.)">(xs:time("08:00:00+09:00"),xs:time("08:00:00+10:00"))</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(1) , (2)">
      <x:call>
        <x:param select="string(.)">(1) , (2)</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="xs:string(&#34;a&#34;) , xs:string(&#34;b&#34;)">
      <x:call>
        <x:param select="string(.)">xs:string("a") , xs:string("b")</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="xs:string(&#34;a&#34;) , (), &#34;xyz&#34;">
      <x:call>
        <x:param select="string(.)">xs:string("a") , (), "xyz"</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="&#34;xyz&#34; , xs:string(&#34; &#34;), &#34;b&#34;">
      <x:call>
        <x:param select="string(.)">"xyz" , xs:string(" "), "b"</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="xs:string(&#34;a&#34;) , xs:anyURI(&#34;www.example.com&#34;)">
      <x:call>
        <x:param select="string(.)">xs:string("a") , xs:anyURI("www.example.com")</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="xs:string(&#34;hello&#34;) , xs:integer(&#34;100&#34;), xs:anyURI(&#34;www.example.com&#34;)">
      <x:call>
        <x:param select="string(.)">xs:string("hello") , xs:integer("100"), xs:anyURI("www.example.com")</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="xs:anyURI(&#34;www.example.com&#34;) , xs:decimal(&#34;1.01&#34;)">
      <x:call>
        <x:param select="string(.)">xs:anyURI("www.example.com") , xs:decimal("1.01")</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="xs:float(&#34;1.01&#34;), xs:float(&#34;NaN&#34;)">
      <x:call>
        <x:param select="string(.)">xs:float("1.01"), xs:float("NaN")</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="xs:float(&#34;INF&#34;) , xs:double(&#34;NaN&#34;)">
      <x:call>
        <x:param select="string(.)">xs:float("INF") , xs:double("NaN")</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="xs:double(&#34;INF&#34;), xs:double(&#34;-INF&#34;), xs:float(&#34;-INF&#34;)">
      <x:call>
        <x:param select="string(.)">xs:double("INF"), xs:double("-INF"), xs:float("-INF")</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="xs:boolean(&#34;true&#34;) , xs:boolean(&#34;0&#34;), xs:integer(&#34;0&#34;)">
      <x:call>
        <x:param select="string(.)">xs:boolean("true") , xs:boolean("0"), xs:integer("0")</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="xs:boolean(&#34;false&#34;), xs:boolean(&#34;1&#34;)">
      <x:call>
        <x:param select="string(.)">xs:boolean("false"), xs:boolean("1")</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="xs:date(&#34;1993-03-31&#34;) , xs:boolean(&#34;true&#34;), xs:string(&#34;abc&#34;)">
      <x:call>
        <x:param select="string(.)">xs:date("1993-03-31") , xs:boolean("true"), xs:string("abc")</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="xs:dateTime(&#34;1972-12-31T00:00:00Z&#34;) , (())">
      <x:call>
        <x:param select="string(.)">xs:dateTime("1972-12-31T00:00:00Z") , (())</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="xs:time(&#34;12:30:00Z&#34;) , xs:string(&#34; &#34;) , xs:decimal(&#34;2.000000000000002&#34;)">
      <x:call>
        <x:param select="string(.)">xs:time("12:30:00Z") , xs:string(" ") , xs:decimal("2.000000000000002")</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="() , xs:string(&#34; &#34;) , xs:decimal(&#34;2.000000000000002&#34;)">
      <x:call>
        <x:param select="string(.)">() , xs:string(" ") , xs:decimal("2.000000000000002")</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(1+1), (2-2)">
      <x:call>
        <x:param select="string(.)">(1+1), (2-2)</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(1,2,2),(1,2,3),(123,&#34;&#34;),(),(&#34;&#34;)">
      <x:call>
        <x:param select="string(.)">(1,2,2),(1,2,3),(123,""),(),("")</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="//book/price, (), (1)">
      <x:call>
        <x:param select="string(.)">//book/price, (), (1)</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="//book/price, //book/title">
      <x:call>
        <x:param select="string(.)">//book/price, //book/title</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="deep-equal(((1, (2, (3, 4, (5, 6)), 7), 8, (9, 10), 11)), (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))">
      <x:call>
        <x:param select="string(.)">deep-equal(((1, (2, (3, 4, (5, 6)), 7), 8, (9, 10), 11)), (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="empty(((), (), ((), (), ((), (), (())), ()), (), (())))">
      <x:call>
        <x:param select="string(.)">empty(((), (), ((), (), ((), (), (())), ()), (), (())))</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="((), (), ((), (), ((), (), (&#34;str&#34;)), ()), (), (())) eq &#34;str&#34;">
      <x:call>
        <x:param select="string(.)">((), (), ((), (), ((), (), ("str")), ()), (), (())) eq "str"</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario></x:scenario></x:description>