<?xml version="1.0" encoding="UTF-8"?><x:description xmlns:nk="http://www.nkutsche.com/xpath-model" xmlns:x="http://www.jenitennison.com/xslt/xspec" stylesheet="../../../main/resources/xsl/xpath-model.xsl"><x:scenario label="/qt3tests-master/op/numeric-divide.xml"><x:call function="nk:xpath-model"/><x:scenario label="xs:int(&#34;-2147483648&#34;) div xs:int(&#34;-2147483648&#34;)">
      <x:call>
        <x:param select="string(.)">xs:int("-2147483648") div xs:int("-2147483648")</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="fn:round-half-to-even((xs:int(&#34;-1873914410&#34;) div xs:int(&#34;-2147483648&#34;)),10)">
      <x:call>
        <x:param select="string(.)">fn:round-half-to-even((xs:int("-1873914410") div xs:int("-2147483648")),10)</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="fn:round-half-to-even((xs:int(&#34;2147483647&#34;) div xs:int(&#34;-2147483648&#34;)),10)">
      <x:call>
        <x:param select="string(.)">fn:round-half-to-even((xs:int("2147483647") div xs:int("-2147483648")),10)</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="fn:round-half-to-even((xs:int(&#34;-2147483648&#34;) div xs:int(&#34;-1873914410&#34;)),10)">
      <x:call>
        <x:param select="string(.)">fn:round-half-to-even((xs:int("-2147483648") div xs:int("-1873914410")),10)</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="fn:round-half-to-even((xs:int(&#34;-2147483648&#34;) div xs:int(&#34;2147483647&#34;)),10)">
      <x:call>
        <x:param select="string(.)">fn:round-half-to-even((xs:int("-2147483648") div xs:int("2147483647")),10)</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="xs:integer(&#34;-999999999999999999&#34;) div xs:integer(&#34;-999999999999999999&#34;)">
      <x:call>
        <x:param select="string(.)">xs:integer("-999999999999999999") div xs:integer("-999999999999999999")</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="fn:round-half-to-even((xs:integer(&#34;830993497117024304&#34;) div xs:integer(&#34;-999999999999999999&#34;)),18)">
      <x:call>
        <x:param select="string(.)">fn:round-half-to-even((xs:integer("830993497117024304") div xs:integer("-999999999999999999")),18)</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="xs:integer(&#34;999999999999999999&#34;) div xs:integer(&#34;-999999999999999999&#34;)">
      <x:call>
        <x:param select="string(.)">xs:integer("999999999999999999") div xs:integer("-999999999999999999")</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="fn:round-half-to-even((xs:integer(&#34;-999999999999999999&#34;) div xs:integer(&#34;830993497117024304&#34;)),18)">
      <x:call>
        <x:param select="string(.)">fn:round-half-to-even((xs:integer("-999999999999999999") div xs:integer("830993497117024304")),18)</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="xs:integer(&#34;-999999999999999999&#34;) div xs:integer(&#34;999999999999999999&#34;)">
      <x:call>
        <x:param select="string(.)">xs:integer("-999999999999999999") div xs:integer("999999999999999999")</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(xs:integer(&#34;-999999999999999999&#34;) div xs:integer(&#34;999999999999999999&#34;)) instance of xs:decimal">
      <x:call>
        <x:param select="string(.)">(xs:integer("-999999999999999999") div xs:integer("999999999999999999")) instance of xs:decimal</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="xs:decimal(&#34;-999999999999999999&#34;) div xs:decimal(&#34;-999999999999999999&#34;)">
      <x:call>
        <x:param select="string(.)">xs:decimal("-999999999999999999") div xs:decimal("-999999999999999999")</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="fn:round-half-to-even((xs:decimal(&#34;617375191608514839&#34;) div xs:decimal(&#34;-999999999999999999&#34;)),18)">
      <x:call>
        <x:param select="string(.)">fn:round-half-to-even((xs:decimal("617375191608514839") div xs:decimal("-999999999999999999")),18)</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="xs:decimal(&#34;999999999999999999&#34;) div xs:decimal(&#34;-999999999999999999&#34;)">
      <x:call>
        <x:param select="string(.)">xs:decimal("999999999999999999") div xs:decimal("-999999999999999999")</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="fn:round-half-to-even((xs:decimal(&#34;-999999999999999999&#34;) div xs:decimal(&#34;617375191608514839&#34;)),18)">
      <x:call>
        <x:param select="string(.)">fn:round-half-to-even((xs:decimal("-999999999999999999") div xs:decimal("617375191608514839")),18)</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="xs:decimal(&#34;-999999999999999999&#34;) div xs:decimal(&#34;999999999999999999&#34;)">
      <x:call>
        <x:param select="string(.)">xs:decimal("-999999999999999999") div xs:decimal("999999999999999999")</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="xs:double(&#34;-1.7976931348623157E308&#34;) div xs:double(&#34;-1.7976931348623157E308&#34;)">
      <x:call>
        <x:param select="string(.)">xs:double("-1.7976931348623157E308") div xs:double("-1.7976931348623157E308")</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="xs:double(&#34;0&#34;) div xs:double(&#34;-1.7976931348623157E308&#34;)">
      <x:call>
        <x:param select="string(.)">xs:double("0") div xs:double("-1.7976931348623157E308")</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="xs:double(&#34;1.7976931348623157E308&#34;) div xs:double(&#34;-1.7976931348623157E308&#34;)">
      <x:call>
        <x:param select="string(.)">xs:double("1.7976931348623157E308") div xs:double("-1.7976931348623157E308")</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="xs:double(&#34;-1.7976931348623157E308&#34;) div xs:double(&#34;1.7976931348623157E308&#34;)">
      <x:call>
        <x:param select="string(.)">xs:double("-1.7976931348623157E308") div xs:double("1.7976931348623157E308")</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="xs:float(&#34;-3.4028235E38&#34;) div xs:float(&#34;-3.4028235E38&#34;)">
      <x:call>
        <x:param select="string(.)">xs:float("-3.4028235E38") div xs:float("-3.4028235E38")</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="xs:float(&#34;0&#34;) div xs:float(&#34;-3.4028235E38&#34;)">
      <x:call>
        <x:param select="string(.)">xs:float("0") div xs:float("-3.4028235E38")</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="xs:float(&#34;3.4028235E38&#34;) div xs:float(&#34;-3.4028235E38&#34;)">
      <x:call>
        <x:param select="string(.)">xs:float("3.4028235E38") div xs:float("-3.4028235E38")</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="xs:float(&#34;-3.4028235E38&#34;) div xs:float(&#34;3.4028235E38&#34;)">
      <x:call>
        <x:param select="string(.)">xs:float("-3.4028235E38") div xs:float("3.4028235E38")</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="xs:long(&#34;-92233720368547758&#34;) div xs:long(&#34;-92233720368547758&#34;)">
      <x:call>
        <x:param select="string(.)">xs:long("-92233720368547758") div xs:long("-92233720368547758")</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="fn:round-half-to-even((xs:long(&#34;-47175562203048468&#34;) div xs:long(&#34;-92233720368547758&#34;)),17)">
      <x:call>
        <x:param select="string(.)">fn:round-half-to-even((xs:long("-47175562203048468") div xs:long("-92233720368547758")),17)</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="xs:long(&#34;92233720368547758&#34;) div xs:long(&#34;-92233720368547758&#34;)">
      <x:call>
        <x:param select="string(.)">xs:long("92233720368547758") div xs:long("-92233720368547758")</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="fn:round-half-to-even((xs:long(&#34;-92233720368547758&#34;) div xs:long(&#34;-47175562203048468&#34;)),17)">
      <x:call>
        <x:param select="string(.)">fn:round-half-to-even((xs:long("-92233720368547758") div xs:long("-47175562203048468")),17)</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="xs:long(&#34;-92233720368547758&#34;) div xs:long(&#34;92233720368547758&#34;)">
      <x:call>
        <x:param select="string(.)">xs:long("-92233720368547758") div xs:long("92233720368547758")</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="xs:unsignedShort(&#34;0&#34;) div xs:unsignedShort(&#34;44633&#34;)">
      <x:call>
        <x:param select="string(.)">xs:unsignedShort("0") div xs:unsignedShort("44633")</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="xs:unsignedShort(&#34;0&#34;) div xs:unsignedShort(&#34;65535&#34;)">
      <x:call>
        <x:param select="string(.)">xs:unsignedShort("0") div xs:unsignedShort("65535")</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="xs:negativeInteger(&#34;-999999999999999999&#34;) div xs:negativeInteger(&#34;-999999999999999999&#34;)">
      <x:call>
        <x:param select="string(.)">xs:negativeInteger("-999999999999999999") div xs:negativeInteger("-999999999999999999")</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="fn:round-half-to-even((xs:negativeInteger(&#34;-297014075999096793&#34;) div xs:negativeInteger(&#34;-999999999999999999&#34;)),18)">
      <x:call>
        <x:param select="string(.)">fn:round-half-to-even((xs:negativeInteger("-297014075999096793") div xs:negativeInteger("-999999999999999999")),18)</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="xs:negativeInteger(&#34;-1&#34;) div xs:negativeInteger(&#34;-999999999999999999&#34;)">
      <x:call>
        <x:param select="string(.)">xs:negativeInteger("-1") div xs:negativeInteger("-999999999999999999")</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="fn:round-half-to-even((xs:negativeInteger(&#34;-999999999999999999&#34;) div xs:negativeInteger(&#34;-297014075999096793&#34;)),18)">
      <x:call>
        <x:param select="string(.)">fn:round-half-to-even((xs:negativeInteger("-999999999999999999") div xs:negativeInteger("-297014075999096793")),18)</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="xs:negativeInteger(&#34;-999999999999999999&#34;) div xs:negativeInteger(&#34;-1&#34;)">
      <x:call>
        <x:param select="string(.)">xs:negativeInteger("-999999999999999999") div xs:negativeInteger("-1")</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="xs:positiveInteger(&#34;1&#34;) div xs:positiveInteger(&#34;1&#34;)">
      <x:call>
        <x:param select="string(.)">xs:positiveInteger("1") div xs:positiveInteger("1")</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="xs:positiveInteger(&#34;52704602390610033&#34;) div xs:positiveInteger(&#34;1&#34;)">
      <x:call>
        <x:param select="string(.)">xs:positiveInteger("52704602390610033") div xs:positiveInteger("1")</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="xs:positiveInteger(&#34;999999999999999999&#34;) div xs:positiveInteger(&#34;1&#34;)">
      <x:call>
        <x:param select="string(.)">xs:positiveInteger("999999999999999999") div xs:positiveInteger("1")</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="fn:round-half-to-even((xs:positiveInteger(&#34;1&#34;) div xs:positiveInteger(&#34;52704602390610033&#34;)),17)">
      <x:call>
        <x:param select="string(.)">fn:round-half-to-even((xs:positiveInteger("1") div xs:positiveInteger("52704602390610033")),17)</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="xs:positiveInteger(&#34;1&#34;) div xs:positiveInteger(&#34;999999999999999999&#34;)">
      <x:call>
        <x:param select="string(.)">xs:positiveInteger("1") div xs:positiveInteger("999999999999999999")</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="xs:unsignedLong(&#34;0&#34;) div xs:unsignedLong(&#34;130747108607674654&#34;)">
      <x:call>
        <x:param select="string(.)">xs:unsignedLong("0") div xs:unsignedLong("130747108607674654")</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="xs:unsignedLong(&#34;0&#34;) div xs:unsignedLong(&#34;184467440737095516&#34;)">
      <x:call>
        <x:param select="string(.)">xs:unsignedLong("0") div xs:unsignedLong("184467440737095516")</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="xs:nonPositiveInteger(&#34;-999999999999999999&#34;) div xs:nonPositiveInteger(&#34;-999999999999999999&#34;)">
      <x:call>
        <x:param select="string(.)">xs:nonPositiveInteger("-999999999999999999") div xs:nonPositiveInteger("-999999999999999999")</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="fn:round-half-to-even((xs:nonPositiveInteger(&#34;-475688437271870490&#34;) div xs:nonPositiveInteger(&#34;-999999999999999999&#34;)),18)">
      <x:call>
        <x:param select="string(.)">fn:round-half-to-even((xs:nonPositiveInteger("-475688437271870490") div xs:nonPositiveInteger("-999999999999999999")),18)</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="xs:nonPositiveInteger(&#34;0&#34;) div xs:nonPositiveInteger(&#34;-999999999999999999&#34;)">
      <x:call>
        <x:param select="string(.)">xs:nonPositiveInteger("0") div xs:nonPositiveInteger("-999999999999999999")</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="fn:round-half-to-even((xs:nonPositiveInteger(&#34;-999999999999999999&#34;) div xs:nonPositiveInteger(&#34;-475688437271870490&#34;)),18)">
      <x:call>
        <x:param select="string(.)">fn:round-half-to-even((xs:nonPositiveInteger("-999999999999999999") div xs:nonPositiveInteger("-475688437271870490")),18)</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="xs:nonNegativeInteger(&#34;0&#34;) div xs:nonNegativeInteger(&#34;303884545991464527&#34;)">
      <x:call>
        <x:param select="string(.)">xs:nonNegativeInteger("0") div xs:nonNegativeInteger("303884545991464527")</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="xs:nonNegativeInteger(&#34;0&#34;) div xs:nonNegativeInteger(&#34;999999999999999999&#34;)">
      <x:call>
        <x:param select="string(.)">xs:nonNegativeInteger("0") div xs:nonNegativeInteger("999999999999999999")</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="xs:short(&#34;-32768&#34;) div xs:short(&#34;-32768&#34;)">
      <x:call>
        <x:param select="string(.)">xs:short("-32768") div xs:short("-32768")</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="fn:round-half-to-even((xs:short(&#34;-5324&#34;) div xs:short(&#34;-32768&#34;)),5)">
      <x:call>
        <x:param select="string(.)">fn:round-half-to-even((xs:short("-5324") div xs:short("-32768")),5)</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="xs:short(&#34;32767&#34;) div xs:short(&#34;-32768&#34;)">
      <x:call>
        <x:param select="string(.)">xs:short("32767") div xs:short("-32768")</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="fn:round-half-to-even((xs:short(&#34;-32768&#34;) div xs:short(&#34;-5324&#34;)),5)">
      <x:call>
        <x:param select="string(.)">fn:round-half-to-even((xs:short("-32768") div xs:short("-5324")),5)</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="xs:short(&#34;-32768&#34;) div xs:short(&#34;32767&#34;)">
      <x:call>
        <x:param select="string(.)">xs:short("-32768") div xs:short("32767")</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="() div 1">
      <x:call>
        <x:param select="string(.)">() div 1</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="1 div '1'">
      <x:call>
        <x:param select="string(.)">1 div '1'</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="1 div xs:integer('1')">
      <x:call>
        <x:param select="string(.)">1 div xs:integer('1')</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="xs:double(6) div xs:double(2) eq 3">
      <x:call>
        <x:param select="string(.)">xs:double(6) div xs:double(2) eq 3</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="xs:decimal(6) div xs:decimal(2) eq 3">
      <x:call>
        <x:param select="string(.)">xs:decimal(6) div xs:decimal(2) eq 3</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="xs:integer(6) div xs:integer(2) eq 3">
      <x:call>
        <x:param select="string(.)">xs:integer(6) div xs:integer(2) eq 3</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="xs:float(6) div xs:float(2) eq 3">
      <x:call>
        <x:param select="string(.)">xs:float(6) div xs:float(2) eq 3</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="xs:double(5) div xs:double(2) eq 2.5">
      <x:call>
        <x:param select="string(.)">xs:double(5) div xs:double(2) eq 2.5</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="xs:double(5) div xs:double(2) ne 2.6">
      <x:call>
        <x:param select="string(.)">xs:double(5) div xs:double(2) ne 2.6</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="xs:float(5) div xs:float(2) eq 2.5">
      <x:call>
        <x:param select="string(.)">xs:float(5) div xs:float(2) eq 2.5</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="xs:float(5) div xs:float(2) ne 2.6">
      <x:call>
        <x:param select="string(.)">xs:float(5) div xs:float(2) ne 2.6</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="xs:integer(5) div xs:integer(2) eq 2.5">
      <x:call>
        <x:param select="string(.)">xs:integer(5) div xs:integer(2) eq 2.5</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="xs:integer(5) div xs:integer(2) ne 2.6">
      <x:call>
        <x:param select="string(.)">xs:integer(5) div xs:integer(2) ne 2.6</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="xs:decimal(5) div xs:decimal(2) eq 2.5">
      <x:call>
        <x:param select="string(.)">xs:decimal(5) div xs:decimal(2) eq 2.5</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="xs:decimal(5) div xs:decimal(2) ne 2.6">
      <x:call>
        <x:param select="string(.)">xs:decimal(5) div xs:decimal(2) ne 2.6</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="5 div 2 ne 2.6">
      <x:call>
        <x:param select="string(.)">5 div 2 ne 2.6</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="5.0 div 2.0 eq 2.5">
      <x:call>
        <x:param select="string(.)">5.0 div 2.0 eq 2.5</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="5.0 div 2.0 ne 2.6">
      <x:call>
        <x:param select="string(.)">5.0 div 2.0 ne 2.6</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(xs:decimal(6) div xs:integer(2)) instance of xs:decimal">
      <x:call>
        <x:param select="string(.)">(xs:decimal(6) div xs:integer(2)) instance of xs:decimal</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(xs:integer(6) div xs:decimal(2)) instance of xs:decimal">
      <x:call>
        <x:param select="string(.)">(xs:integer(6) div xs:decimal(2)) instance of xs:decimal</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(xs:integer(6) div xs:integer(2)) instance of xs:decimal">
      <x:call>
        <x:param select="string(.)">(xs:integer(6) div xs:integer(2)) instance of xs:decimal</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(xs:decimal(6) div xs:decimal(2)) instance of xs:decimal">
      <x:call>
        <x:param select="string(.)">(xs:decimal(6) div xs:decimal(2)) instance of xs:decimal</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(xs:float(6) div xs:decimal(2)) instance of xs:float">
      <x:call>
        <x:param select="string(.)">(xs:float(6) div xs:decimal(2)) instance of xs:float</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(xs:decimal(6) div xs:float(2)) instance of xs:float">
      <x:call>
        <x:param select="string(.)">(xs:decimal(6) div xs:float(2)) instance of xs:float</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(xs:float(6) div xs:integer(2)) instance of xs:float">
      <x:call>
        <x:param select="string(.)">(xs:float(6) div xs:integer(2)) instance of xs:float</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(xs:integer(6) div xs:float(2)) instance of xs:float">
      <x:call>
        <x:param select="string(.)">(xs:integer(6) div xs:float(2)) instance of xs:float</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(xs:float(6) div xs:float(2)) instance of xs:float">
      <x:call>
        <x:param select="string(.)">(xs:float(6) div xs:float(2)) instance of xs:float</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(xs:decimal(6) div xs:double(2)) instance of xs:double">
      <x:call>
        <x:param select="string(.)">(xs:decimal(6) div xs:double(2)) instance of xs:double</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(xs:double(6) div xs:decimal(2)) instance of xs:double">
      <x:call>
        <x:param select="string(.)">(xs:double(6) div xs:decimal(2)) instance of xs:double</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(xs:double(6) div xs:float(2)) instance of xs:double">
      <x:call>
        <x:param select="string(.)">(xs:double(6) div xs:float(2)) instance of xs:double</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(xs:float(6) div xs:double(2)) instance of xs:double">
      <x:call>
        <x:param select="string(.)">(xs:float(6) div xs:double(2)) instance of xs:double</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(xs:double(6) div xs:integer(2)) instance of xs:double">
      <x:call>
        <x:param select="string(.)">(xs:double(6) div xs:integer(2)) instance of xs:double</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(xs:integer(6) div xs:double(2)) instance of xs:double">
      <x:call>
        <x:param select="string(.)">(xs:integer(6) div xs:double(2)) instance of xs:double</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(xs:double(6) div xs:double(2)) instance of xs:double">
      <x:call>
        <x:param select="string(.)">(xs:double(6) div xs:double(2)) instance of xs:double</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="&#34;3&#34; div &#34;3&#34;">
      <x:call>
        <x:param select="string(.)">"3" div "3"</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="xs:double(3) div &#34;3&#34;">
      <x:call>
        <x:param select="string(.)">xs:double(3) div "3"</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(xs:double(3) div xs:untypedAtomic(&#34;3&#34;)) eq 1">
      <x:call>
        <x:param select="string(.)">(xs:double(3) div xs:untypedAtomic("3")) eq 1</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(xs:untypedAtomic(&#34;3&#34;) div xs:double(3)) eq 1">
      <x:call>
        <x:param select="string(.)">(xs:untypedAtomic("3") div xs:double(3)) eq 1</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="empty(() div ())">
      <x:call>
        <x:param select="string(.)">empty(() div ())</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="empty(1 div ())">
      <x:call>
        <x:param select="string(.)">empty(1 div ())</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="empty(() div 1)">
      <x:call>
        <x:param select="string(.)">empty(() div 1)</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="empty(xs:double(3) div ())">
      <x:call>
        <x:param select="string(.)">empty(xs:double(3) div ())</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="empty(() div xs:decimal(1))">
      <x:call>
        <x:param select="string(.)">empty(() div xs:decimal(1))</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="1 div 0">
      <x:call>
        <x:param select="string(.)">1 div 0</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="1 div 0.0">
      <x:call>
        <x:param select="string(.)">1 div 0.0</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="1 div +0.0">
      <x:call>
        <x:param select="string(.)">1 div +0.0</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="1 div -0.0">
      <x:call>
        <x:param select="string(.)">1 div -0.0</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="1 div 0e0">
      <x:call>
        <x:param select="string(.)">1 div 0e0</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="-1 div 0e0">
      <x:call>
        <x:param select="string(.)">-1 div 0e0</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="1 div xs:float(0)">
      <x:call>
        <x:param select="string(.)">1 div xs:float(0)</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="-1 div xs:float(0)">
      <x:call>
        <x:param select="string(.)">-1 div xs:float(0)</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="+0e0 div -0e0">
      <x:call>
        <x:param select="string(.)">+0e0 div -0e0</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="+0e0 div +0e0">
      <x:call>
        <x:param select="string(.)">+0e0 div +0e0</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="-0e0 div -0e0">
      <x:call>
        <x:param select="string(.)">-0e0 div -0e0</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="-0e0 div +0e0">
      <x:call>
        <x:param select="string(.)">-0e0 div +0e0</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="+3 div +0e0">
      <x:call>
        <x:param select="string(.)">+3 div +0e0</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="-3 div +0e0">
      <x:call>
        <x:param select="string(.)">-3 div +0e0</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="+3 div -0e0">
      <x:call>
        <x:param select="string(.)">+3 div -0e0</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="-3 div -0e0">
      <x:call>
        <x:param select="string(.)">-3 div -0e0</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="for $x in (1, xs:decimal(2), xs:float(3), xs:double(4), xs:untypedAtomic(5)), &#xA;                $y in (6, xs:decimal(6), xs:float(6), xs:double(6), xs:untypedAtomic(6)),&#xA;                $result in ($x div $y)&#xA;            return &#xA;                if ($result instance of xs:integer) then &#34;integer&#34;&#xA;                else if ($result instance of xs:decimal) then &#34;decimal&#34; &#xA;                else if ($result instance of xs:double) then &#34;double&#34;&#xA;                else if ($result instance of xs:float) then &#34;float&#34;&#xA;                else error()">
      <x:call>
        <x:param select="string(.)">for $x in (1, xs:decimal(2), xs:float(3), xs:double(4), xs:untypedAtomic(5)), 
                $y in (6, xs:decimal(6), xs:float(6), xs:double(6), xs:untypedAtomic(6)),
                $result in ($x div $y)
            return 
                if ($result instance of xs:integer) then "integer"
                else if ($result instance of xs:decimal) then "decimal" 
                else if ($result instance of xs:double) then "double"
                else if ($result instance of xs:float) then "float"
                else error()</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="10000000000000000000000000000.0 div 0.1 gt 0">
      <x:call>
        <x:param select="string(.)">10000000000000000000000000000.0 div 0.1 gt 0</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(10000000000000000000000000000.0 div 0.1) cast as xs:string">
      <x:call>
        <x:param select="string(.)">(10000000000000000000000000000.0 div 0.1) cast as xs:string</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario></x:scenario></x:description>