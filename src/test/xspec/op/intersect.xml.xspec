<?xml version="1.0" encoding="UTF-8"?><x:description xmlns:nk="http://www.nkutsche.com/xpath-model" xmlns:x="http://www.jenitennison.com/xslt/xspec" stylesheet="../../../main/resources/xsl/xpath-model.xsl"><x:scenario label="generic-test" shared="yes">
    <x:call function="nk:xpath-model">
      <x:param select="$expr"/>
    </x:call>
    <x:expect label="result should be valid">
      <expr>...</expr>
    </x:expect>
  </x:scenario><x:scenario>
      <x:label>(/bib/book[1]/title intersect /bib/book[1]/title)/string()</x:label>
      <x:variable name="expr" as="xs:string">(/bib/book[1]/title intersect /bib/book[1]/title)/string()</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>/bib/book/title intersect /bib/book[1]/title</x:label>
      <x:variable name="expr" as="xs:string">/bib/book/title intersect /bib/book[1]/title</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>/bib/book[3]/title intersect root(exactly-one(/bib/book[3]/title))</x:label>
      <x:variable name="expr" as="xs:string">/bib/book[3]/title intersect root(exactly-one(/bib/book[3]/title))</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>/bib/book[3]/title/text() intersect /bib/book/title/text()</x:label>
      <x:variable name="expr" as="xs:string">/bib/book[3]/title/text() intersect /bib/book/title/text()</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>(/processing-instruction() intersect /processing-instruction())/name()</x:label>
      <x:variable name="expr" as="xs:string">(/processing-instruction() intersect /processing-instruction())/name()</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>(/processing-instruction(PI1) intersect /processing-instruction())/name()</x:label>
      <x:variable name="expr" as="xs:string">(/processing-instruction(PI1) intersect /processing-instruction())/name()</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>string-join((/comment() intersect /comment()), "|")</x:label>
      <x:variable name="expr" as="xs:string">string-join((/comment() intersect /comment()), "|")</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>/bib/book[3]/title/text() intersect /bib/book/title/text()</x:label>
      <x:variable name="expr" as="xs:string">/bib/book[3]/title/text() intersect /bib/book/title/text()</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>/processing-instruction() intersect /bib/book[2]/title</x:label>
      <x:variable name="expr" as="xs:string">/processing-instruction() intersect /bib/book[2]/title</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>/processing-instruction(PI1) intersect /bib/book</x:label>
      <x:variable name="expr" as="xs:string">/processing-instruction(PI1) intersect /bib/book</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>(/bib/book intersect /bib/book)/string(@year)</x:label>
      <x:variable name="expr" as="xs:string">(/bib/book intersect /bib/book)/string(@year)</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>//author intersect //nonexisting</x:label>
      <x:variable name="expr" as="xs:string">//author intersect //nonexisting</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>//author intersect ()</x:label>
      <x:variable name="expr" as="xs:string">//author intersect ()</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>() intersect ()</x:label>
      <x:variable name="expr" as="xs:string">() intersect ()</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>(/atomic:root/atomic:integer) intersect (/atomic:root/atomic:integer)</x:label>
      <x:variable name="expr" as="xs:string">(/atomic:root/atomic:integer) intersect (/atomic:root/atomic:integer)</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>(/atomic:root/atomic:integer) intersect (/atomic:root/atomic:integer)</x:label>
      <x:variable name="expr" as="xs:string">(/atomic:root/atomic:integer) intersect (/atomic:root/atomic:integer)</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>(/atomic:root/atomic:integer) intersect (/atomic:root/atomic:string)</x:label>
      <x:variable name="expr" as="xs:string">(/atomic:root/atomic:integer) intersect (/atomic:root/atomic:string)</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>(/atomic:root/atomic:duration/text()) intersect (/atomic:root/atomic:duration/text())</x:label>
      <x:variable name="expr" as="xs:string">(/atomic:root/atomic:duration/text()) intersect (/atomic:root/atomic:duration/text())</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>(/atomic:root/atomic:date/text()) intersect (/atomic:root/atomic:date/text())</x:label>
      <x:variable name="expr" as="xs:string">(/atomic:root/atomic:date/text()) intersect (/atomic:root/atomic:date/text())</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>(/atomic:root/atomic:base64Binary/text()) intersect (/atomic:root/atomic:base64Binary/text())</x:label>
      <x:variable name="expr" as="xs:string">(/atomic:root/atomic:base64Binary/text()) intersect (/atomic:root/atomic:base64Binary/text())</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>(/atomic:root/atomic:QName/text()) intersect (/atomic:root/atomic:QName/text())</x:label>
      <x:variable name="expr" as="xs:string">(/atomic:root/atomic:QName/text()) intersect (/atomic:root/atomic:QName/text())</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>(/atomic:root/atomic:idrefs/text()) intersect (/atomic:root/atomic:idrefs/text())</x:label>
      <x:variable name="expr" as="xs:string">(/atomic:root/atomic:idrefs/text()) intersect (/atomic:root/atomic:idrefs/text())</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>(1, 2, 3) intersect (1, 2, 3)</x:label>
      <x:variable name="expr" as="xs:string">(1, 2, 3) intersect (1, 2, 3)</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>boolean(//employee[location = "Denver"] intersect //employee[last()])</x:label>
      <x:variable name="expr" as="xs:string">boolean(//employee[location = "Denver"] intersect //employee[last()])</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>//(employee[location = "Denver"] intersect //employee[last()])/./location</x:label>
      <x:variable name="expr" as="xs:string">//(employee[location = "Denver"] intersect //employee[last()])/./location</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>1 intersect 2 intersect 3</x:label>
      <x:variable name="expr" as="xs:string">1 intersect 2 intersect 3</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>1 except 2 except 3</x:label>
      <x:variable name="expr" as="xs:string">1 except 2 except 3</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>if (subsequence(//*, 1, 10) intersect subsequence(//*, 7, 2)) then "foo" else "bar"</x:label>
      <x:variable name="expr" as="xs:string">if (subsequence(//*, 1, 10) intersect subsequence(//*, 7, 2)) then "foo" else "bar"</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>count(() intersect ())</x:label>
      <x:variable name="expr" as="xs:string">count(() intersect ())</x:variable>
      <x:like label="generic-test"/>
    </x:scenario></x:description>