<?xml version="1.0" encoding="UTF-8"?><x:description xmlns:nk="http://www.nkutsche.com/xpath-model" xmlns:x="http://www.jenitennison.com/xslt/xspec" stylesheet="../../../main/resources/xsl/xpath-model.xsl"><x:scenario label="/qt3tests-master/op/intersect.xml"><x:call function="nk:xpath-model"/><x:scenario label="(/bib/book[1]/title intersect /bib/book[1]/title)/string()">
      <x:call>
        <x:param select="string(.)">(/bib/book[1]/title intersect /bib/book[1]/title)/string()</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="/bib/book/title intersect /bib/book[1]/title">
      <x:call>
        <x:param select="string(.)">/bib/book/title intersect /bib/book[1]/title</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="/bib/book[3]/title intersect root(exactly-one(/bib/book[3]/title))">
      <x:call>
        <x:param select="string(.)">/bib/book[3]/title intersect root(exactly-one(/bib/book[3]/title))</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="/bib/book[3]/title/text() intersect /bib/book/title/text()">
      <x:call>
        <x:param select="string(.)">/bib/book[3]/title/text() intersect /bib/book/title/text()</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(/processing-instruction() intersect /processing-instruction())/name()">
      <x:call>
        <x:param select="string(.)">(/processing-instruction() intersect /processing-instruction())/name()</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(/processing-instruction(PI1) intersect /processing-instruction())/name()">
      <x:call>
        <x:param select="string(.)">(/processing-instruction(PI1) intersect /processing-instruction())/name()</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="string-join((/comment() intersect /comment()), &#34;|&#34;)">
      <x:call>
        <x:param select="string(.)">string-join((/comment() intersect /comment()), "|")</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="/bib/book[3]/title/text() intersect /bib/book/title/text()">
      <x:call>
        <x:param select="string(.)">/bib/book[3]/title/text() intersect /bib/book/title/text()</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="/processing-instruction() intersect /bib/book[2]/title">
      <x:call>
        <x:param select="string(.)">/processing-instruction() intersect /bib/book[2]/title</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="/processing-instruction(PI1) intersect /bib/book">
      <x:call>
        <x:param select="string(.)">/processing-instruction(PI1) intersect /bib/book</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(/bib/book intersect /bib/book)/string(@year)">
      <x:call>
        <x:param select="string(.)">(/bib/book intersect /bib/book)/string(@year)</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="//author intersect //nonexisting">
      <x:call>
        <x:param select="string(.)">//author intersect //nonexisting</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="//author intersect ()">
      <x:call>
        <x:param select="string(.)">//author intersect ()</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="() intersect ()">
      <x:call>
        <x:param select="string(.)">() intersect ()</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(/atomic:root/atomic:integer) intersect (/atomic:root/atomic:integer)">
      <x:call>
        <x:param select="string(.)">(/atomic:root/atomic:integer) intersect (/atomic:root/atomic:integer)</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(/atomic:root/atomic:integer) intersect (/atomic:root/atomic:integer)">
      <x:call>
        <x:param select="string(.)">(/atomic:root/atomic:integer) intersect (/atomic:root/atomic:integer)</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(/atomic:root/atomic:integer) intersect (/atomic:root/atomic:string)">
      <x:call>
        <x:param select="string(.)">(/atomic:root/atomic:integer) intersect (/atomic:root/atomic:string)</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(/atomic:root/atomic:duration/text()) intersect (/atomic:root/atomic:duration/text())">
      <x:call>
        <x:param select="string(.)">(/atomic:root/atomic:duration/text()) intersect (/atomic:root/atomic:duration/text())</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(/atomic:root/atomic:date/text()) intersect (/atomic:root/atomic:date/text())">
      <x:call>
        <x:param select="string(.)">(/atomic:root/atomic:date/text()) intersect (/atomic:root/atomic:date/text())</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(/atomic:root/atomic:base64Binary/text()) intersect (/atomic:root/atomic:base64Binary/text())">
      <x:call>
        <x:param select="string(.)">(/atomic:root/atomic:base64Binary/text()) intersect (/atomic:root/atomic:base64Binary/text())</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(/atomic:root/atomic:QName/text()) intersect (/atomic:root/atomic:QName/text())">
      <x:call>
        <x:param select="string(.)">(/atomic:root/atomic:QName/text()) intersect (/atomic:root/atomic:QName/text())</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(/atomic:root/atomic:idrefs/text()) intersect (/atomic:root/atomic:idrefs/text())">
      <x:call>
        <x:param select="string(.)">(/atomic:root/atomic:idrefs/text()) intersect (/atomic:root/atomic:idrefs/text())</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(1, 2, 3) intersect (1, 2, 3)">
      <x:call>
        <x:param select="string(.)">(1, 2, 3) intersect (1, 2, 3)</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="boolean(//employee[location = &#34;Denver&#34;] intersect //employee[last()])">
      <x:call>
        <x:param select="string(.)">boolean(//employee[location = "Denver"] intersect //employee[last()])</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="//(employee[location = &#34;Denver&#34;] intersect //employee[last()])/./location">
      <x:call>
        <x:param select="string(.)">//(employee[location = "Denver"] intersect //employee[last()])/./location</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="1 intersect 2 intersect 3">
      <x:call>
        <x:param select="string(.)">1 intersect 2 intersect 3</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="1 except 2 except 3">
      <x:call>
        <x:param select="string(.)">1 except 2 except 3</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="if (subsequence(//*, 1, 10) intersect subsequence(//*, 7, 2)) then &#34;foo&#34; else &#34;bar&#34;">
      <x:call>
        <x:param select="string(.)">if (subsequence(//*, 1, 10) intersect subsequence(//*, 7, 2)) then "foo" else "bar"</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="count(() intersect ())">
      <x:call>
        <x:param select="string(.)">count(() intersect ())</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario></x:scenario></x:description>