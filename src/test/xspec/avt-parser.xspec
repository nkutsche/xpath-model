<?xml version="1.0" encoding="UTF-8"?>

<x:description xmlns:x="http://www.jenitennison.com/xslt/xspec"
    xmlns:nk="http://www.nkutsche.com/xpath-model"
    xmlns:p="http://www.nkutsche.com/avt-parser"
    stylesheet="../../main/resources/xsl/xslt-3-avt.xsl">
    
    
    <x:scenario label="Scenario testing function call p:parse-AVT">
        <x:call function="p:parse-AVT"/>
        <x:scenario label="simple expression">
            <x:call>
                <x:param select="string(.)">foo{'bar'}baz</x:param>
            </x:call>
            <x:expect label="result">
                <AVT>
                    <AVTExpr>
                       <AVTFix>foo</AVTFix>
                        <AVTVar>
                            <TOKEN>{</TOKEN>
                            <Expr>...</Expr>
                            <TOKEN>}</TOKEN>
                        </AVTVar>
                        <AVTFix>baz</AVTFix>
                    </AVTExpr>
                    <EOF />
                 </AVT>
            </x:expect>
            <x:expect label="expr-content" test=".//Expr/string()" select="('''bar''')"/>
        </x:scenario>
        <x:scenario label="only an expression">
            <x:call>
                <x:param select="string(.)">{'bar'}</x:param>
            </x:call>
            <x:expect label="result">
                <AVT>
                    <AVTExpr>
                        <AVTVar>
                            <TOKEN>{</TOKEN>
                            <Expr>...</Expr>
                            <TOKEN>}</TOKEN>
                        </AVTVar>
                    </AVTExpr>
                    <EOF />
                 </AVT>
            </x:expect>
            <x:expect label="expr-content" test=".//Expr/string()" select="('''bar''')"/>
        </x:scenario>
        <x:scenario label="only two expressions">
            <x:call>
                <x:param select="string(.)">{'foo'}{'bar'}</x:param>
            </x:call>
            <x:expect label="result">
                <AVT>
                    <AVTExpr>
                        <AVTVar>
                            <TOKEN>{</TOKEN>
                            <Expr>...</Expr>
                            <TOKEN>}</TOKEN>
                        </AVTVar>
                        <AVTVar>
                            <TOKEN>{</TOKEN>
                            <Expr>...</Expr>
                            <TOKEN>}</TOKEN>
                        </AVTVar>
                    </AVTExpr>
                    <EOF />
                 </AVT>
            </x:expect>
            <x:expect label="expr-content" test=".//Expr/string()" select="('''foo''', '''bar''')"/>
        </x:scenario>
        <x:scenario label="two expressions with between">
            <x:call>
                <x:param select="string(.)">fix1{'foo'}fix2{'bar'}fix3</x:param>
            </x:call>
            <x:expect label="result">
                <AVT>
                    <AVTExpr>
                        <AVTFix >fix1</AVTFix>
                        <AVTVar>
                            <TOKEN>{</TOKEN>
                            <Expr>...</Expr>
                            <TOKEN>}</TOKEN>
                        </AVTVar>
                        <AVTFix >fix2</AVTFix>
                        <AVTVar>
                            <TOKEN>{</TOKEN>
                            <Expr>...</Expr>
                            <TOKEN>}</TOKEN>
                        </AVTVar>
                        <AVTFix >fix3</AVTFix>
                    </AVTExpr>
                    <EOF />
                 </AVT>
            </x:expect>
            <x:expect label="expr-content" test=".//Expr/string()" select="('''foo''', '''bar''')"/>
        </x:scenario>
        <x:scenario label="escaping brackets">
            <x:call>
                <x:param select="string(.)">fix{{with}}brackets</x:param>
            </x:call>
            <x:expect label="result">
                <AVT>
                    <AVTExpr>
                        <AVTFix>fix{{with}}brackets</AVTFix>
                    </AVTExpr>
                    <EOF />
                 </AVT>
            </x:expect>
            <x:expect label="expr-content" test=".//Expr/string()" select="()"/>
        </x:scenario>
        <x:scenario label="brackets in expressions">
            <x:call>
                <x:param select="string(.)">fix-before{'}expr{'}fix-after</x:param>
            </x:call>
            <x:expect label="result">
                <AVT>
                    <AVTExpr>
                        <AVTFix >fix-before</AVTFix>
                        <AVTVar>
                            <TOKEN>{</TOKEN>
                            <Expr>...</Expr>
                            <TOKEN>}</TOKEN>
                        </AVTVar>
                        <AVTFix >fix-after</AVTFix>
                    </AVTExpr>
                    <EOF />
                 </AVT>
            </x:expect>
            <x:expect label="expr-content" test=".//Expr/string()" select="string(.)">'}expr{'</x:expect>
        </x:scenario>
        <x:scenario label="expression ends with clossing bracket">
            <x:call>
                <x:param select="string(.)">fix-before{map{}}fix-after</x:param>
            </x:call>
            <x:expect label="result">
                <AVT>
                    <AVTExpr>
                        <AVTFix >fix-before</AVTFix>
                        <AVTVar>
                            <TOKEN>{</TOKEN>
                            <Expr>...</Expr>
                            <TOKEN>}</TOKEN>
                        </AVTVar>
                        <AVTFix >fix-after</AVTFix>
                    </AVTExpr>
                    <EOF />
                 </AVT>
            </x:expect>
            <x:expect label="expr-content" test=".//Expr/string()" select="string(.)">map{}</x:expect>
        </x:scenario>
        <x:scenario label="lots of brackets">
            <x:call>
                <x:param select="string(.)">{{{map{key : map{}}}}}</x:param>
            </x:call>
            <x:expect label="result">
                <AVT>
                    <AVTExpr>
                        <AVTFix >{{</AVTFix>
                        <AVTVar>
                            <TOKEN>{</TOKEN>
                            <Expr>...</Expr>
                            <TOKEN>}</TOKEN>
                        </AVTVar>
                        <AVTFix >}}</AVTFix>
                    </AVTExpr>
                    <EOF />
                 </AVT>
            </x:expect>
            <x:expect label="expr-content" test=".//Expr/string()" select="string(.)">map{key : map{}}</x:expect>
        </x:scenario>
        <x:scenario label="'comments' outside of expressions">
            <x:call>
                <x:param select="string(.)">(:foo:){bar}(:baz:)</x:param>
            </x:call>
            <x:expect label="result">
                <AVT>
                    <AVTExpr>
                        <AVTFix >(:foo:)</AVTFix>
                        <AVTVar>
                            <TOKEN>{</TOKEN>
                            <Expr>...</Expr>
                            <TOKEN>}</TOKEN>
                        </AVTVar>
                        <AVTFix >(:baz:)</AVTFix>
                    </AVTExpr>
                    <EOF />
                 </AVT>
            </x:expect>
            <x:expect label="expr-content" test=".//Expr/string()" select="string(.)">bar</x:expect>
        </x:scenario>
        <x:scenario label="surrounding 'comments' outside of expressions">
            <x:call>
                <x:param select="string(.)">(:foo{bar}baz:)</x:param>
            </x:call>
            <x:expect label="result">
                <AVT>
                    <AVTExpr>
                        <AVTFix ><AVTFixChar>(:foo</AVTFixChar></AVTFix>
                        <AVTVar>
                            <TOKEN>{</TOKEN>
                            <Expr>...</Expr>
                            <TOKEN>}</TOKEN>
                        </AVTVar>
                        <AVTFix ><AVTFixChar>baz:)</AVTFixChar></AVTFix>
                    </AVTExpr>
                    <EOF />
                 </AVT>
            </x:expect>
            <x:expect label="expr-content" test=".//Expr/string()" select="string(.)">bar</x:expect>
        </x:scenario>

    </x:scenario>
    
</x:description>
