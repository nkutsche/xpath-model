<?xml version="1.0" encoding="UTF-8"?><x:description xmlns:nk="http://www.nkutsche.com/xpath-model" xmlns:x="http://www.jenitennison.com/xslt/xspec" stylesheet="../../../main/resources/xsl/xpath-model.xsl"><x:scenario label="/qt3tests-master/prod/ValueComp.xml"><x:call function="nk:xpath-model"/><x:scenario label="(1, 2, 3) eq 3">
      <x:call>
        <x:param select="string(.)">(1, 2, 3) eq 3</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="3 eq (1, 2, 3)">
      <x:call>
        <x:param select="string(.)">3 eq (1, 2, 3)</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(1, 2, 3) ne 3">
      <x:call>
        <x:param select="string(.)">(1, 2, 3) ne 3</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="3 ne (1, 2, 3)">
      <x:call>
        <x:param select="string(.)">3 ne (1, 2, 3)</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(1, 2, 3) lt 3">
      <x:call>
        <x:param select="string(.)">(1, 2, 3) lt 3</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="3 lt (1, 2, 3)">
      <x:call>
        <x:param select="string(.)">3 lt (1, 2, 3)</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(1, 2, 3) le 3">
      <x:call>
        <x:param select="string(.)">(1, 2, 3) le 3</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="3 le (1, 2, 3)">
      <x:call>
        <x:param select="string(.)">3 le (1, 2, 3)</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(1, 2, 3) gt 3">
      <x:call>
        <x:param select="string(.)">(1, 2, 3) gt 3</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="3 gt (1, 2, 3)">
      <x:call>
        <x:param select="string(.)">3 gt (1, 2, 3)</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(1, 2, 3) ge 3">
      <x:call>
        <x:param select="string(.)">(1, 2, 3) ge 3</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="3 ge (1, 2, 3)">
      <x:call>
        <x:param select="string(.)">3 ge (1, 2, 3)</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="empty(() eq 1)">
      <x:call>
        <x:param select="string(.)">empty(() eq 1)</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="empty(1 eq ())">
      <x:call>
        <x:param select="string(.)">empty(1 eq ())</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="empty(() eq ())">
      <x:call>
        <x:param select="string(.)">empty(() eq ())</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="xs:untypedAtomic(&#34;1&#34;) eq xs:integer(1)">
      <x:call>
        <x:param select="string(.)">xs:untypedAtomic("1") eq xs:integer(1)</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="xs:integer(1) eq xs:untypedAtomic(&#34;1&#34;)">
      <x:call>
        <x:param select="string(.)">xs:integer(1) eq xs:untypedAtomic("1")</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="xs:untypedAtomic(&#34;0&#34;) ne xs:double(1)">
      <x:call>
        <x:param select="string(.)">xs:untypedAtomic("0") ne xs:double(1)</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="xs:double(1) ne xs:untypedAtomic(&#34;0&#34;)">
      <x:call>
        <x:param select="string(.)">xs:double(1) ne xs:untypedAtomic("0")</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="xs:untypedAtomic(&#34;0&#34;) lt xs:float(1)">
      <x:call>
        <x:param select="string(.)">xs:untypedAtomic("0") lt xs:float(1)</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="xs:float(0) lt xs:untypedAtomic(&#34;1&#34;)">
      <x:call>
        <x:param select="string(.)">xs:float(0) lt xs:untypedAtomic("1")</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="xs:untypedAtomic(&#34;0&#34;) gt xs:decimal(1)">
      <x:call>
        <x:param select="string(.)">xs:untypedAtomic("0") gt xs:decimal(1)</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="xs:decimal(0) gt xs:untypedAtomic(&#34;1&#34;)">
      <x:call>
        <x:param select="string(.)">xs:decimal(0) gt xs:untypedAtomic("1")</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="xs:untypedAtomic(&#34;4&#34;) eq 4">
      <x:call>
        <x:param select="string(.)">xs:untypedAtomic("4") eq 4</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="4 eq xs:untypedAtomic(&#34;4&#34;)">
      <x:call>
        <x:param select="string(.)">4 eq xs:untypedAtomic("4")</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="xs:untypedAtomic(&#34;3&#34;) eq 3">
      <x:call>
        <x:param select="string(.)">xs:untypedAtomic("3") eq 3</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="xs:double(2) lt xs:untypedAtomic(&#34;3&#34;)">
      <x:call>
        <x:param select="string(.)">xs:double(2) lt xs:untypedAtomic("3")</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="xs:float(4) gt xs:untypedAtomic(&#34;3&#34;)">
      <x:call>
        <x:param select="string(.)">xs:float(4) gt xs:untypedAtomic("3")</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="xs:untypedAtomic(&#34;3&#34;) ne xs:decimal(3.1)">
      <x:call>
        <x:param select="string(.)">xs:untypedAtomic("3") ne xs:decimal(3.1)</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="xs:untypedAtomic(&#34;a string&#34;) eq &#34;a string&#34;">
      <x:call>
        <x:param select="string(.)">xs:untypedAtomic("a string") eq "a string"</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="&#34;a string&#34; eq xs:untypedAtomic(&#34;a string&#34;)">
      <x:call>
        <x:param select="string(.)">"a string" eq xs:untypedAtomic("a string")</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="count((0, current-time())) ge 1">
      <x:call>
        <x:param select="string(.)">count((0, current-time())) ge 1</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="count((0, current-time())) ne 0">
      <x:call>
        <x:param select="string(.)">count((0, current-time())) ne 0</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="not(count((1, 2, current-time())) eq 0)">
      <x:call>
        <x:param select="string(.)">not(count((1, 2, current-time())) eq 0)</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="error() eq 3">
      <x:call>
        <x:param select="string(.)">error() eq 3</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="error() eq error()">
      <x:call>
        <x:param select="string(.)">error() eq error()</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="3 eq error()">
      <x:call>
        <x:param select="string(.)">3 eq error()</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="3 eq (error(), 3)">
      <x:call>
        <x:param select="string(.)">3 eq (error(), 3)</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="3 eq (3, error())">
      <x:call>
        <x:param select="string(.)">3 eq (3, error())</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(error(), 3) eq 3">
      <x:call>
        <x:param select="string(.)">(error(), 3) eq 3</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(3, error()) eq 3">
      <x:call>
        <x:param select="string(.)">(3, error()) eq 3</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="count((1, 2)) eq 2">
      <x:call>
        <x:param select="string(.)">count((1, 2)) eq 2</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="&#34;abc&#34; eq concat(&#34;a&#34;, &#34;bc&#34;)">
      <x:call>
        <x:param select="string(.)">"abc" eq concat("a", "bc")</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="&#34;abc&#34; eq /works/@id">
      <x:call>
        <x:param select="string(.)">"abc" eq /works/@id</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="&#34;abc&#34; eq string(/works/@id)">
      <x:call>
        <x:param select="string(.)">"abc" eq string(/works/@id)</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="&#34;abc&#34; eq xs:string(/works/@id)">
      <x:call>
        <x:param select="string(.)">"abc" eq xs:string(/works/@id)</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="works/@id eq &#34;abc&#34;">
      <x:call>
        <x:param select="string(.)">works/@id eq "abc"</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="string(/works/@id) eq &#34;abc&#34;">
      <x:call>
        <x:param select="string(.)">string(/works/@id) eq "abc"</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="xs:string(/works/@id) eq &#34;abc&#34;">
      <x:call>
        <x:param select="string(.)">xs:string(/works/@id) eq "abc"</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="not(&#34;abc&#34; eq concat(&#34;a&#34;, &#34;bc&#34;))">
      <x:call>
        <x:param select="string(.)">not("abc" eq concat("a", "bc"))</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="not(&#34;abc&#34; eq /works/@id)">
      <x:call>
        <x:param select="string(.)">not("abc" eq /works/@id)</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="not(&#34;abc&#34; eq string(/works/@id))">
      <x:call>
        <x:param select="string(.)">not("abc" eq string(/works/@id))</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="not(&#34;abc&#34; eq xs:string(/works/@id))">
      <x:call>
        <x:param select="string(.)">not("abc" eq xs:string(/works/@id))</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="not(works/@id eq &#34;abc&#34;)">
      <x:call>
        <x:param select="string(.)">not(works/@id eq "abc")</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="not(string(/works/@id) eq &#34;abc&#34;)">
      <x:call>
        <x:param select="string(.)">not(string(/works/@id) eq "abc")</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="not(xs:string(/works/@id) eq &#34;abc&#34;)">
      <x:call>
        <x:param select="string(.)">not(xs:string(/works/@id) eq "abc")</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="not(/works/@iddddd eq &#34;&#34;)">
      <x:call>
        <x:param select="string(.)">not(/works/@iddddd eq "")</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="&#34;abc&#34; ne concat(&#34;a&#34;, &#34;bc&#34;)">
      <x:call>
        <x:param select="string(.)">"abc" ne concat("a", "bc")</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="&#34;abc&#34; ne /works/@id">
      <x:call>
        <x:param select="string(.)">"abc" ne /works/@id</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="&#34;abc&#34; ne string(/works/@id)">
      <x:call>
        <x:param select="string(.)">"abc" ne string(/works/@id)</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="&#34;abc&#34; ne xs:string(/works/@id)">
      <x:call>
        <x:param select="string(.)">"abc" ne xs:string(/works/@id)</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="works/@id ne &#34;abc&#34;">
      <x:call>
        <x:param select="string(.)">works/@id ne "abc"</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="string(/works/@id) ne &#34;abc&#34;">
      <x:call>
        <x:param select="string(.)">string(/works/@id) ne "abc"</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="xs:string(/works/@id) ne &#34;abc&#34;">
      <x:call>
        <x:param select="string(.)">xs:string(/works/@id) ne "abc"</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="not(&#34;abc&#34; ne concat(&#34;a&#34;, &#34;bc&#34;))">
      <x:call>
        <x:param select="string(.)">not("abc" ne concat("a", "bc"))</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="not(&#34;abc&#34; ne /works/@id)">
      <x:call>
        <x:param select="string(.)">not("abc" ne /works/@id)</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="not(&#34;abc&#34; ne string(/works/@id))">
      <x:call>
        <x:param select="string(.)">not("abc" ne string(/works/@id))</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="not(&#34;abc&#34; ne xs:string(/works/@id))">
      <x:call>
        <x:param select="string(.)">not("abc" ne xs:string(/works/@id))</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="not(works/@id ne &#34;abc&#34;)">
      <x:call>
        <x:param select="string(.)">not(works/@id ne "abc")</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="not(string(/works/@id) ne &#34;abc&#34;)">
      <x:call>
        <x:param select="string(.)">not(string(/works/@id) ne "abc")</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="not(xs:string(/works/@id) ne &#34;abc&#34;)">
      <x:call>
        <x:param select="string(.)">not(xs:string(/works/@id) ne "abc")</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="not(/works/@iddddd ne &#34;&#34;)">
      <x:call>
        <x:param select="string(.)">not(/works/@iddddd ne "")</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="13 eq 12+1">
      <x:call>
        <x:param select="string(.)">13 eq 12+1</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="13 eq /works/@id">
      <x:call>
        <x:param select="string(.)">13 eq /works/@id</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="40 eq xs:integer(/works/employee[1]/hours)">
      <x:call>
        <x:param select="string(.)">40 eq xs:integer(/works/employee[1]/hours)</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="40 eq xs:integer(/works/employee[830]/hours)">
      <x:call>
        <x:param select="string(.)">40 eq xs:integer(/works/employee[830]/hours)</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="xs:integer(/works/employee[830]/hours) eq 40">
      <x:call>
        <x:param select="string(.)">xs:integer(/works/employee[830]/hours) eq 40</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="40 eq number(/works/employee[1]/hours)">
      <x:call>
        <x:param select="string(.)">40 eq number(/works/employee[1]/hours)</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="40 eq xs:double(/works/employee[1]/hours)">
      <x:call>
        <x:param select="string(.)">40 eq xs:double(/works/employee[1]/hours)</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="40 eq xs:double(/works/employee[830]/hours)">
      <x:call>
        <x:param select="string(.)">40 eq xs:double(/works/employee[830]/hours)</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="13e0 eq 12e0+1">
      <x:call>
        <x:param select="string(.)">13e0 eq 12e0+1</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="13e0 eq /works/@id">
      <x:call>
        <x:param select="string(.)">13e0 eq /works/@id</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="40e0 eq xs:double(/works/employee[1]/hours)">
      <x:call>
        <x:param select="string(.)">40e0 eq xs:double(/works/employee[1]/hours)</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="40e0 eq xs:integer(/works/employee[830]/hours)">
      <x:call>
        <x:param select="string(.)">40e0 eq xs:integer(/works/employee[830]/hours)</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="xs:integer(/works/employee[830]/hours) eq 40e0">
      <x:call>
        <x:param select="string(.)">xs:integer(/works/employee[830]/hours) eq 40e0</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="40e0 eq number(/works/employee[1]/hours)">
      <x:call>
        <x:param select="string(.)">40e0 eq number(/works/employee[1]/hours)</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="40e0 eq xs:double(/works/employee[1]/hours)">
      <x:call>
        <x:param select="string(.)">40e0 eq xs:double(/works/employee[1]/hours)</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="40e0 eq xs:double(/works/employee[830]/hours)">
      <x:call>
        <x:param select="string(.)">40e0 eq xs:double(/works/employee[830]/hours)</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario></x:scenario></x:description>