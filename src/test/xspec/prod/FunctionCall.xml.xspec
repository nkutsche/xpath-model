<?xml version="1.0" encoding="UTF-8"?><x:description xmlns:nk="http://www.nkutsche.com/xpath-model" xmlns:x="http://www.jenitennison.com/xslt/xspec" stylesheet="../../../main/resources/xsl/xpath-model.xsl"><x:scenario label="generic-test" shared="yes">
    <x:call function="nk:xpath-model">
      <x:param select="$expr"/>
    </x:call>
    <x:expect label="result should be valid">
      <expr>...</expr>
    </x:expect>
  </x:scenario><x:scenario>
      <x:label>function($in as xs:decimal*) as xs:decimal {sum($in, 0.0)}(xs:NMTOKENS('1 1.2 1.3 1.4')!xs:untypedAtomic(.))</x:label>
      <x:variable name="expr" as="xs:string">function($in as xs:decimal*) as xs:decimal {sum($in, 0.0)}(xs:NMTOKENS('1 1.2 1.3 1.4')!xs:untypedAtomic(.))</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>codepoints-to-string(xs:NMTOKENS('48 49 50 51')!xs:untypedAtomic(.))</x:label>
      <x:variable name="expr" as="xs:string">codepoints-to-string(xs:NMTOKENS('48 49 50 51')!xs:untypedAtomic(.))</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>codepoints-to-string(xs:NMTOKENS('30 31 32 33'))</x:label>
      <x:variable name="expr" as="xs:string">codepoints-to-string(xs:NMTOKENS('30 31 32 33'))</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>function($in as xs:double*) as xs:double {sum($in, 0.0e0)}((1, xs:float(0.25), xs:decimal(0.5)))</x:label>
      <x:variable name="expr" as="xs:string">function($in as xs:double*) as xs:double {sum($in, 0.0e0)}((1, xs:float(0.25), xs:decimal(0.5)))</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>function($in as xs:string*) as xs:string {string-join($in, ';')}((xs:anyURI('http://one.com/'), xs:anyURI('http://two.com/')))</x:label>
      <x:variable name="expr" as="xs:string">function($in as xs:string*) as xs:string {string-join($in, ';')}((xs:anyURI('http://one.com/'), xs:anyURI('http://two.com/')))</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>function($in as xs:NMTOKENS) as item()* {$in}(xs:untypedAtomic('abc def'))</x:label>
      <x:variable name="expr" as="xs:string">function($in as xs:NMTOKENS) as item()* {$in}(xs:untypedAtomic('abc def'))</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>func-does-not-exist(1, 2, 3)</x:label>
      <x:variable name="expr" as="xs:string">func-does-not-exist(1, 2, 3)</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>fn:func-does-not-exist(1, 2, 3)</x:label>
      <x:variable name="expr" as="xs:string">fn:func-does-not-exist(1, 2, 3)</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>xs:func-does-not-exist(1, 2, 3)</x:label>
      <x:variable name="expr" as="xs:string">xs:func-does-not-exist(1, 2, 3)</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>prefix-does-not-exist:func-does-not-exist(1, 2, 3)</x:label>
      <x:variable name="expr" as="xs:string">prefix-does-not-exist:func-does-not-exist(1, 2, 3)</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>f:f:()</x:label>
      <x:variable name="expr" as="xs:string">f:f:()</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>p:f:lname()</x:label>
      <x:variable name="expr" as="xs:string">p:f:lname()</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>document("example.com/file.ext")</x:label>
      <x:variable name="expr" as="xs:string">document("example.com/file.ext")</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>key('func', "a value")</x:label>
      <x:variable name="expr" as="xs:string">key('func', "a value")</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>matches(format-dateTime(current-dateTime(), "[Y0001]-[M01]-[D01]"), "[0-9]{4}-[0-9]{2}-[0-9]{2}")</x:label>
      <x:variable name="expr" as="xs:string">matches(format-dateTime(current-dateTime(), "[Y0001]-[M01]-[D01]"), "[0-9]{4}-[0-9]{2}-[0-9]{2}")</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>matches(format-dateTime(current-dateTime(), "[Y0001]-[M01]-[D01]", (), (), ()), "....-..-..")</x:label>
      <x:variable name="expr" as="xs:string">matches(format-dateTime(current-dateTime(), "[Y0001]-[M01]-[D01]", (), (), ()), "....-..-..")</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>matches(format-dateTime(current-dateTime(), "[M01]/[D01]/[Y0001] at [H01]:[m01]:[s01]"), "[0-1][0-9]/[0-3][0-9]/[0-9]{4} at [0-9]{2}:[0-9]{2}:[0-9]{2}")</x:label>
      <x:variable name="expr" as="xs:string">matches(format-dateTime(current-dateTime(), "[M01]/[D01]/[Y0001] at [H01]:[m01]:[s01]"), "[0-1][0-9]/[0-3][0-9]/[0-9]{4} at [0-9]{2}:[0-9]{2}:[0-9]{2}")</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>matches(format-dateTime(current-dateTime(), "[M01]/[D01]/[Y0001] at [H01]:[m01]:[s01]", (), (), ()), "../../.... at ..:..:..")</x:label>
      <x:variable name="expr" as="xs:string">matches(format-dateTime(current-dateTime(), "[M01]/[D01]/[Y0001] at [H01]:[m01]:[s01]", (), (), ()), "../../.... at ..:..:..")</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>current()</x:label>
      <x:variable name="expr" as="xs:string">current()</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>unparsed-entity-uri("example.com/file.ext")</x:label>
      <x:variable name="expr" as="xs:string">unparsed-entity-uri("example.com/file.ext")</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>unparsed-entity-public-id("entity")</x:label>
      <x:variable name="expr" as="xs:string">unparsed-entity-public-id("entity")</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>system-property("xsl:vendor")</x:label>
      <x:variable name="expr" as="xs:string">system-property("xsl:vendor")</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>fn:escape-uri("http:/example.com/")</x:label>
      <x:variable name="expr" as="xs:string">fn:escape-uri("http:/example.com/")</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>fn:sub-sequence("http:/example.com/", 1, 1)</x:label>
      <x:variable name="expr" as="xs:string">fn:sub-sequence("http:/example.com/", 1, 1)</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>current-grouping-key()</x:label>
      <x:variable name="expr" as="xs:string">current-grouping-key()</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>current()</x:label>
      <x:variable name="expr" as="xs:string">current()</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>unparsed-entity-uri("str")</x:label>
      <x:variable name="expr" as="xs:string">unparsed-entity-uri("str")</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>unparsed-entity-public-id("str")</x:label>
      <x:variable name="expr" as="xs:string">unparsed-entity-public-id("str")</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>system-property("property")</x:label>
      <x:variable name="expr" as="xs:string">system-property("property")</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>key("id")</x:label>
      <x:variable name="expr" as="xs:string">key("id")</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>string-join( (xs:anyURI('http://www.microsoft.com'), xs:anyURI('http://www.google.com/')), ' ')</x:label>
      <x:variable name="expr" as="xs:string">string-join( (xs:anyURI('http://www.microsoft.com'), xs:anyURI('http://www.google.com/')), ' ')</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>namespace-node(1)</x:label>
      <x:variable name="expr" as="xs:string">namespace-node(1)</x:variable>
      <x:like label="generic-test"/>
    </x:scenario></x:description>