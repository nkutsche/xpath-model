<?xml version="1.0" encoding="UTF-8"?><x:description xmlns:nk="http://www.nkutsche.com/xpath-model" xmlns:x="http://www.jenitennison.com/xslt/xspec" stylesheet="../../../main/resources/xsl/xpath-model.xsl"><x:scenario label="/qt3tests-master/prod/FunctionCall.xml"><x:call function="nk:xpath-model"/><x:scenario label="function($in as xs:decimal*) as xs:decimal {sum($in, 0.0)}(xs:NMTOKENS('1 1.2 1.3 1.4')!xs:untypedAtomic(.))">
      <x:call>
        <x:param select="string(.)">function($in as xs:decimal*) as xs:decimal {sum($in, 0.0)}(xs:NMTOKENS('1 1.2 1.3 1.4')!xs:untypedAtomic(.))</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="codepoints-to-string(xs:NMTOKENS('48 49 50 51')!xs:untypedAtomic(.))">
      <x:call>
        <x:param select="string(.)">codepoints-to-string(xs:NMTOKENS('48 49 50 51')!xs:untypedAtomic(.))</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="codepoints-to-string(xs:NMTOKENS('30 31 32 33'))">
      <x:call>
        <x:param select="string(.)">codepoints-to-string(xs:NMTOKENS('30 31 32 33'))</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="function($in as xs:double*) as xs:double {sum($in, 0.0e0)}((1, xs:float(0.25), xs:decimal(0.5)))">
      <x:call>
        <x:param select="string(.)">function($in as xs:double*) as xs:double {sum($in, 0.0e0)}((1, xs:float(0.25), xs:decimal(0.5)))</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="function($in as xs:string*) as xs:string {string-join($in, ';')}((xs:anyURI('http://one.com/'), xs:anyURI('http://two.com/')))">
      <x:call>
        <x:param select="string(.)">function($in as xs:string*) as xs:string {string-join($in, ';')}((xs:anyURI('http://one.com/'), xs:anyURI('http://two.com/')))</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="function($in as xs:NMTOKENS) as item()* {$in}(xs:untypedAtomic('abc def'))">
      <x:call>
        <x:param select="string(.)">function($in as xs:NMTOKENS) as item()* {$in}(xs:untypedAtomic('abc def'))</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="func-does-not-exist(1, 2, 3)">
      <x:call>
        <x:param select="string(.)">func-does-not-exist(1, 2, 3)</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="fn:func-does-not-exist(1, 2, 3)">
      <x:call>
        <x:param select="string(.)">fn:func-does-not-exist(1, 2, 3)</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="xs:func-does-not-exist(1, 2, 3)">
      <x:call>
        <x:param select="string(.)">xs:func-does-not-exist(1, 2, 3)</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="prefix-does-not-exist:func-does-not-exist(1, 2, 3)">
      <x:call>
        <x:param select="string(.)">prefix-does-not-exist:func-does-not-exist(1, 2, 3)</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="document(&#34;example.com/file.ext&#34;)">
      <x:call>
        <x:param select="string(.)">document("example.com/file.ext")</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="key('func', &#34;a value&#34;)">
      <x:call>
        <x:param select="string(.)">key('func', "a value")</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="matches(format-dateTime(current-dateTime(), &#34;[Y0001]-[M01]-[D01]&#34;), &#34;[0-9]{4}-[0-9]{2}-[0-9]{2}&#34;)">
      <x:call>
        <x:param select="string(.)">matches(format-dateTime(current-dateTime(), "[Y0001]-[M01]-[D01]"), "[0-9]{4}-[0-9]{2}-[0-9]{2}")</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="matches(format-dateTime(current-dateTime(), &#34;[Y0001]-[M01]-[D01]&#34;, (), (), ()), &#34;....-..-..&#34;)">
      <x:call>
        <x:param select="string(.)">matches(format-dateTime(current-dateTime(), "[Y0001]-[M01]-[D01]", (), (), ()), "....-..-..")</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="matches(format-dateTime(current-dateTime(), &#34;[M01]/[D01]/[Y0001] at [H01]:[m01]:[s01]&#34;), &#34;[0-1][0-9]/[0-3][0-9]/[0-9]{4} at [0-9]{2}:[0-9]{2}:[0-9]{2}&#34;)">
      <x:call>
        <x:param select="string(.)">matches(format-dateTime(current-dateTime(), "[M01]/[D01]/[Y0001] at [H01]:[m01]:[s01]"), "[0-1][0-9]/[0-3][0-9]/[0-9]{4} at [0-9]{2}:[0-9]{2}:[0-9]{2}")</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="matches(format-dateTime(current-dateTime(), &#34;[M01]/[D01]/[Y0001] at [H01]:[m01]:[s01]&#34;, (), (), ()), &#34;../../.... at ..:..:..&#34;)">
      <x:call>
        <x:param select="string(.)">matches(format-dateTime(current-dateTime(), "[M01]/[D01]/[Y0001] at [H01]:[m01]:[s01]", (), (), ()), "../../.... at ..:..:..")</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="current()">
      <x:call>
        <x:param select="string(.)">current()</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="unparsed-entity-uri(&#34;example.com/file.ext&#34;)">
      <x:call>
        <x:param select="string(.)">unparsed-entity-uri("example.com/file.ext")</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="unparsed-entity-public-id(&#34;entity&#34;)">
      <x:call>
        <x:param select="string(.)">unparsed-entity-public-id("entity")</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="system-property(&#34;xsl:vendor&#34;)">
      <x:call>
        <x:param select="string(.)">system-property("xsl:vendor")</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="fn:escape-uri(&#34;http:/example.com/&#34;)">
      <x:call>
        <x:param select="string(.)">fn:escape-uri("http:/example.com/")</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="fn:sub-sequence(&#34;http:/example.com/&#34;, 1, 1)">
      <x:call>
        <x:param select="string(.)">fn:sub-sequence("http:/example.com/", 1, 1)</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="current-grouping-key()">
      <x:call>
        <x:param select="string(.)">current-grouping-key()</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="current()">
      <x:call>
        <x:param select="string(.)">current()</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="unparsed-entity-uri(&#34;str&#34;)">
      <x:call>
        <x:param select="string(.)">unparsed-entity-uri("str")</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="unparsed-entity-public-id(&#34;str&#34;)">
      <x:call>
        <x:param select="string(.)">unparsed-entity-public-id("str")</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="system-property(&#34;property&#34;)">
      <x:call>
        <x:param select="string(.)">system-property("property")</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="key(&#34;id&#34;)">
      <x:call>
        <x:param select="string(.)">key("id")</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="string-join( (xs:anyURI('http://www.microsoft.com'), xs:anyURI('http://www.google.com/')), ' ')">
      <x:call>
        <x:param select="string(.)">string-join( (xs:anyURI('http://www.microsoft.com'), xs:anyURI('http://www.google.com/')), ' ')</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="namespace-node(1)">
      <x:call>
        <x:param select="string(.)">namespace-node(1)</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario></x:scenario></x:description>