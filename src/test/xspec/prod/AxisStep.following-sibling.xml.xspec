<?xml version="1.0" encoding="UTF-8"?><x:description xmlns:nk="http://www.nkutsche.com/xpath-model" xmlns:x="http://www.jenitennison.com/xslt/xspec" stylesheet="../../../main/resources/xsl/xpath-model.xsl"><x:scenario label="generic-test" shared="yes">
    <x:call function="nk:xpath-model">
      <x:param select="$expr"/>
    </x:call>
    <x:expect label="result should be valid">
      <expr>...</expr>
    </x:expect>
  </x:scenario><x:scenario>
      <x:label>(200)/following-sibling::*</x:label>
      <x:variable name="expr" as="xs:string">(200)/following-sibling::*</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>fn:count(/works/employee[1]/following-sibling::noSuchNode)</x:label>
      <x:variable name="expr" as="xs:string">fn:count(/works/employee[1]/following-sibling::noSuchNode)</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>exactly-one(/works/employee[12]/following-sibling::employee) is exactly-one(/works/employee[13])</x:label>
      <x:variable name="expr" as="xs:string">exactly-one(/works/employee[12]/following-sibling::employee) is exactly-one(/works/employee[13])</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>exactly-one(/works[1]/employee[12]/following-sibling::employee) is exactly-one(/works[1]/employee[12])</x:label>
      <x:variable name="expr" as="xs:string">exactly-one(/works[1]/employee[12]/following-sibling::employee) is exactly-one(/works[1]/employee[12])</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>exactly-one(/works[1]/employee[12]/overtime/day[1]/following-sibling::day) &lt;&lt; exactly-one(/works[1]/employee[13])</x:label>
      <x:variable name="expr" as="xs:string">exactly-one(/works[1]/employee[12]/overtime/day[1]/following-sibling::day) &lt;&lt; exactly-one(/works[1]/employee[13])</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>exactly-one(/works[1]/employee[12]/following-sibling::employee) &lt;&lt; exactly-one(/works[1]/employee[12]/following-sibling::employee)</x:label>
      <x:variable name="expr" as="xs:string">exactly-one(/works[1]/employee[12]/following-sibling::employee) &lt;&lt; exactly-one(/works[1]/employee[12]/following-sibling::employee)</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>exactly-one(/works[1]/employee[12]/following-sibling::employee) &lt;&lt; exactly-one(/works[1]/employee[12]/overtime[1])</x:label>
      <x:variable name="expr" as="xs:string">exactly-one(/works[1]/employee[12]/following-sibling::employee) &lt;&lt; exactly-one(/works[1]/employee[12]/overtime[1])</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>exactly-one(/works[1]/employee[13]) &gt;&gt; exactly-one(/works[1]/employee[12]/overtime[1]/day[1]/following-sibling::day)</x:label>
      <x:variable name="expr" as="xs:string">exactly-one(/works[1]/employee[13]) &gt;&gt; exactly-one(/works[1]/employee[12]/overtime[1]/day[1]/following-sibling::day)</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>exactly-one(/works[1]/employee[12]/following-sibling::employee) &gt;&gt; exactly-one(/works[1]/employee[12]/following-sibling::employee)</x:label>
      <x:variable name="expr" as="xs:string">exactly-one(/works[1]/employee[12]/following-sibling::employee) &gt;&gt; exactly-one(/works[1]/employee[12]/following-sibling::employee)</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>exactly-one(/works[1]/employee[12]) &gt;&gt; exactly-one(/works[1]/employee[12]/following-sibling::employee)</x:label>
      <x:variable name="expr" as="xs:string">exactly-one(/works[1]/employee[12]) &gt;&gt; exactly-one(/works[1]/employee[12]/following-sibling::employee)</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>(/works/employee[12]/*/day[1]/following-sibling::day) | (/works/employee[12]/*/day[1]/following-sibling::day)</x:label>
      <x:variable name="expr" as="xs:string">(/works/employee[12]/*/day[1]/following-sibling::day) | (/works/employee[12]/*/day[1]/following-sibling::day)</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>(/works/employee[12]/*/day[1]/following-sibling::day) | (/works/employee[12]/*/day[1])</x:label>
      <x:variable name="expr" as="xs:string">(/works/employee[12]/*/day[1]/following-sibling::day) | (/works/employee[12]/*/day[1])</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>(/works[1]/employee[12]/overtime[1]/day[1]/following-sibling::day) intersect (/works[1]/employee[12]/overtime[1]/day[1]/following-sibling::day)</x:label>
      <x:variable name="expr" as="xs:string">(/works[1]/employee[12]/overtime[1]/day[1]/following-sibling::day) intersect (/works[1]/employee[12]/overtime[1]/day[1]/following-sibling::day)</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>fn:count((/works[1]/employee[12]/following-sibling::employee) except (/works[1]/employee[12]/following-sibling::employee))</x:label>
      <x:variable name="expr" as="xs:string">fn:count((/works[1]/employee[12]/following-sibling::employee) except (/works[1]/employee[12]/following-sibling::employee))</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>(/works[1]/employee[12]/overtime/day) except (/works[1]/employee[12]/overtime/day[1]/following-sibling::day)</x:label>
      <x:variable name="expr" as="xs:string">(/works[1]/employee[12]/overtime/day) except (/works[1]/employee[12]/overtime/day[1]/following-sibling::day)</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>(/works[1]/employee[12]/following-sibling::employee) and fn:true()</x:label>
      <x:variable name="expr" as="xs:string">(/works[1]/employee[12]/following-sibling::employee) and fn:true()</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>(/works[1]/employee[12]/following-sibling::employee) and fn:false()</x:label>
      <x:variable name="expr" as="xs:string">(/works[1]/employee[12]/following-sibling::employee) and fn:false()</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>(/works[1]/employee[12]/following-sibling::employee) or fn:true()</x:label>
      <x:variable name="expr" as="xs:string">(/works[1]/employee[12]/following-sibling::employee) or fn:true()</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>(/works[1]/employee[12]/following-sibling::employee) or fn:false()</x:label>
      <x:variable name="expr" as="xs:string">(/works[1]/employee[12]/following-sibling::employee) or fn:false()</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>fn:deep-equal(/works[1]/employee[12]/following-sibling::employee,/works[1]/employee[12]/following-sibling::employee)</x:label>
      <x:variable name="expr" as="xs:string">fn:deep-equal(/works[1]/employee[12]/following-sibling::employee,/works[1]/employee[12]/following-sibling::employee)</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>for $h in (/works/employee[2]) return $h/following-sibling::employee[fn:position() = 1]</x:label>
      <x:variable name="expr" as="xs:string">for $h in (/works/employee[2]) return $h/following-sibling::employee[fn:position() = 1]</x:variable>
      <x:like label="generic-test"/>
    </x:scenario></x:description>