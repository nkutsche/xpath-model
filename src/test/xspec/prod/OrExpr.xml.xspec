<?xml version="1.0" encoding="UTF-8"?><x:description xmlns:nk="http://www.nkutsche.com/xpath-model" xmlns:x="http://www.jenitennison.com/xslt/xspec" stylesheet="../../../main/resources/xsl/xpath-model.xsl"><x:scenario label="/qt3tests-master/prod/OrExpr.xml"><x:call function="nk:xpath-model"/><x:scenario label="not(&#34;&#34; or 0)">
      <x:call>
        <x:param select="string(.)">not("" or 0)</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="not(0 or 0)">
      <x:call>
        <x:param select="string(.)">not(0 or 0)</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="not(0 or 0)">
      <x:call>
        <x:param select="string(.)">not(0 or 0)</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="not(&#34;&#34; or 0)">
      <x:call>
        <x:param select="string(.)">not("" or 0)</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="1 or 1">
      <x:call>
        <x:param select="string(.)">1 or 1</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="1 or 0">
      <x:call>
        <x:param select="string(.)">1 or 0</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="1 or 5">
      <x:call>
        <x:param select="string(.)">1 or 5</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="xs:anyURI(&#34;example.com/&#34;) or 0">
      <x:call>
        <x:param select="string(.)">xs:anyURI("example.com/") or 0</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="0 or xs:anyURI(&#34;example.com/&#34;)">
      <x:call>
        <x:param select="string(.)">0 or xs:anyURI("example.com/")</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="not(xs:anyURI(&#34;&#34;) or 0)">
      <x:call>
        <x:param select="string(.)">not(xs:anyURI("") or 0)</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="not(0 or xs:anyURI(&#34;&#34;))">
      <x:call>
        <x:param select="string(.)">not(0 or xs:anyURI(""))</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="xs:untypedAtomic(&#34;a string&#34;) or 0">
      <x:call>
        <x:param select="string(.)">xs:untypedAtomic("a string") or 0</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="0 or xs:untypedAtomic(&#34;a string&#34;)">
      <x:call>
        <x:param select="string(.)">0 or xs:untypedAtomic("a string")</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="true() or (0, current-time())[1] treat as xs:integer">
      <x:call>
        <x:param select="string(.)">true() or (0, current-time())[1] treat as xs:integer</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(0, current-time())[1] treat as xs:integer or true()">
      <x:call>
        <x:param select="string(.)">(0, current-time())[1] treat as xs:integer or true()</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="current-date() or 0">
      <x:call>
        <x:param select="string(.)">current-date() or 0</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="0 or current-date()">
      <x:call>
        <x:param select="string(.)">0 or current-date()</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="current-date() or current-date()">
      <x:call>
        <x:param select="string(.)">current-date() or current-date()</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="current-date() and current-date()">
      <x:call>
        <x:param select="string(.)">current-date() and current-date()</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="1 and current-date()">
      <x:call>
        <x:param select="string(.)">1 and current-date()</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="current-date() and 1">
      <x:call>
        <x:param select="string(.)">current-date() and 1</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="count((1, 2, 3, timezone-from-time(current-time()), 4)) or false()">
      <x:call>
        <x:param select="string(.)">count((1, 2, 3, timezone-from-time(current-time()), 4)) or false()</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="false() or count((1, 2, 3, timezone-from-time(current-time()), 4))">
      <x:call>
        <x:param select="string(.)">false() or count((1, 2, 3, timezone-from-time(current-time()), 4))</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="count((1, 2, 3, timezone-from-time(current-time()), 4)) or count((1, 2, 3, timezone-from-time(current-time()), 4))">
      <x:call>
        <x:param select="string(.)">count((1, 2, 3, timezone-from-time(current-time()), 4)) or count((1, 2, 3, timezone-from-time(current-time()), 4))</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="boolean((1, 2, 3, current-time())[1] treat as xs:integer) or boolean((1, 2, 3, current-time())[1] treat as xs:integer)">
      <x:call>
        <x:param select="string(.)">boolean((1, 2, 3, current-time())[1] treat as xs:integer) or boolean((1, 2, 3, current-time())[1] treat as xs:integer)</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="boolean((1, 2, 3, current-time())[1] treat as xs:integer) and true()">
      <x:call>
        <x:param select="string(.)">boolean((1, 2, 3, current-time())[1] treat as xs:integer) and true()</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="true() or boolean((1, 2, 3, current-time())[1] treat as xs:integer)">
      <x:call>
        <x:param select="string(.)">true() or boolean((1, 2, 3, current-time())[1] treat as xs:integer)</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="not(&#34;&#34; and 0)">
      <x:call>
        <x:param select="string(.)">not("" and 0)</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="1 and 1">
      <x:call>
        <x:param select="string(.)">1 and 1</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="10.3 and &#34;non-zero length string&#34;">
      <x:call>
        <x:param select="string(.)">10.3 and "non-zero length string"</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="1 and 5">
      <x:call>
        <x:param select="string(.)">1 and 5</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="not((1, current-time())[1] treat as xs:integer and false())">
      <x:call>
        <x:param select="string(.)">not((1, current-time())[1] treat as xs:integer and false())</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="not(false() and (1, current-time())[1] treat as xs:integer)">
      <x:call>
        <x:param select="string(.)">not(false() and (1, current-time())[1] treat as xs:integer)</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="xs:anyURI(&#34;example.com/&#34;) and xs:anyURI(&#34;example.com/&#34;)">
      <x:call>
        <x:param select="string(.)">xs:anyURI("example.com/") and xs:anyURI("example.com/")</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="not(xs:anyURI(&#34;example.com/&#34;) and xs:anyURI(&#34;&#34;))">
      <x:call>
        <x:param select="string(.)">not(xs:anyURI("example.com/") and xs:anyURI(""))</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="not(xs:anyURI(&#34;&#34;) and xs:anyURI(&#34;example.com/&#34;))">
      <x:call>
        <x:param select="string(.)">not(xs:anyURI("") and xs:anyURI("example.com/"))</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="xs:untypedAtomic(&#34;a string&#34;) and xs:untypedAtomic(&#34;a string&#34;)">
      <x:call>
        <x:param select="string(.)">xs:untypedAtomic("a string") and xs:untypedAtomic("a string")</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="not(xs:untypedAtomic(&#34;a string&#34;) and xs:untypedAtomic(&#34;&#34;))">
      <x:call>
        <x:param select="string(.)">not(xs:untypedAtomic("a string") and xs:untypedAtomic(""))</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="count((1, 2, 3, timezone-from-time(current-time()), 4)) and true()">
      <x:call>
        <x:param select="string(.)">count((1, 2, 3, timezone-from-time(current-time()), 4)) and true()</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="true() and count((1, 2, 3, timezone-from-time(current-time()), 4))">
      <x:call>
        <x:param select="string(.)">true() and count((1, 2, 3, timezone-from-time(current-time()), 4))</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="count((1, 2, 3, timezone-from-time(current-time()), 4)) and count((1, 2, 3, timezone-from-time(current-time()), 4))">
      <x:call>
        <x:param select="string(.)">count((1, 2, 3, timezone-from-time(current-time()), 4)) and count((1, 2, 3, timezone-from-time(current-time()), 4))</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="boolean((1, 2, 3, current-time())[1] treat as xs:integer) and boolean((1, 2, 3, current-time())[1] treat as xs:integer)">
      <x:call>
        <x:param select="string(.)">boolean((1, 2, 3, current-time())[1] treat as xs:integer) and boolean((1, 2, 3, current-time())[1] treat as xs:integer)</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="boolean((1, 2, 3, current-time())[1] treat as xs:integer) and true()">
      <x:call>
        <x:param select="string(.)">boolean((1, 2, 3, current-time())[1] treat as xs:integer) and true()</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="true() and boolean((1, 2, 3, current-time())[1] treat as xs:integer)">
      <x:call>
        <x:param select="string(.)">true() and boolean((1, 2, 3, current-time())[1] treat as xs:integer)</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="&#34;a string is ok&#34; and QName(&#34;&#34;, &#34;local&#34;)">
      <x:call>
        <x:param select="string(.)">"a string is ok" and QName("", "local")</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="&#34;a string is ok&#34; or QName(&#34;&#34;, &#34;local&#34;)">
      <x:call>
        <x:param select="string(.)">"a string is ok" or QName("", "local")</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario></x:scenario></x:description>