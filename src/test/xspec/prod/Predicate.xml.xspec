<?xml version="1.0" encoding="UTF-8"?><x:description xmlns:nk="http://www.nkutsche.com/xpath-model" xmlns:x="http://www.jenitennison.com/xslt/xspec" stylesheet="../../../main/resources/xsl/xpath-model.xsl"><x:scenario label="/qt3tests-master/prod/Predicate.xml"><x:call function="nk:xpath-model"/><x:scenario label="(/works/employee[xs:integer(hours[1]) gt 20])">
      <x:call>
        <x:param select="string(.)">(/works/employee[xs:integer(hours[1]) gt 20])</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="((1 to 25)[. mod 2 eq 0])">
      <x:call>
        <x:param select="string(.)">((1 to 25)[. mod 2 eq 0])</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="((1 to 25)[25])">
      <x:call>
        <x:param select="string(.)">((1 to 25)[25])</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(//empnum | (/))//employee[xs:integer(hours[1]) gt 20]">
      <x:call>
        <x:param select="string(.)">(//empnum | (/))//employee[xs:integer(hours[1]) gt 20]</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(//employee[fn:last()])">
      <x:call>
        <x:param select="string(.)">(//employee[fn:last()])</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="((1 to 25)[. ge 10])">
      <x:call>
        <x:param select="string(.)">((1 to 25)[. ge 10])</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="((1 to 25)[. lt 10])">
      <x:call>
        <x:param select="string(.)">((1 to 25)[. lt 10])</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="((1 to 25)[. le 10])">
      <x:call>
        <x:param select="string(.)">((1 to 25)[. le 10])</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="((1 to 25)[. eq 10])">
      <x:call>
        <x:param select="string(.)">((1 to 25)[. eq 10])</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="((1 to 11)[. ne 10])">
      <x:call>
        <x:param select="string(.)">((1 to 11)[. ne 10])</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="((1 to 11)[(. eq 10) and (. mod 5 eq 0)])">
      <x:call>
        <x:param select="string(.)">((1 to 11)[(. eq 10) and (. mod 5 eq 0)])</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="((1 to 11)[(. eq 10) or (. eq 5)])">
      <x:call>
        <x:param select="string(.)">((1 to 11)[(. eq 10) or (. eq 5)])</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="((1,2,4,5,6,7,8,9,10,11)[(. div 2 eq 5)])">
      <x:call>
        <x:param select="string(.)">((1,2,4,5,6,7,8,9,10,11)[(. div 2 eq 5)])</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="((1,2,4,5,6,7,8,9,10,11)[(. * 2 eq 10)])">
      <x:call>
        <x:param select="string(.)">((1,2,4,5,6,7,8,9,10,11)[(. * 2 eq 10)])</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="((1,2,4,5,6,7,8,9,10,11)[(. + 2 eq 10)])">
      <x:call>
        <x:param select="string(.)">((1,2,4,5,6,7,8,9,10,11)[(. + 2 eq 10)])</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="((1,2,4,5,6,7,8,9,10,11)[(. - 2 eq 6)])">
      <x:call>
        <x:param select="string(.)">((1,2,4,5,6,7,8,9,10,11)[(. - 2 eq 6)])</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="((1,2,4,5,6,7,8,9,10,11)[(. idiv 2 eq 3)])">
      <x:call>
        <x:param select="string(.)">((1,2,4,5,6,7,8,9,10,11)[(. idiv 2 eq 3)])</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="((1,2,3,4,5,6,7,8,9,10,11)[(xs:string(.) eq &#34;3&#34;)])">
      <x:call>
        <x:param select="string(.)">((1,2,3,4,5,6,7,8,9,10,11)[(xs:string(.) eq "3")])</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="((1,2,3,4,5,6,7,8,9,10,11)[. gt 1][. gt 5])">
      <x:call>
        <x:param select="string(.)">((1,2,3,4,5,6,7,8,9,10,11)[. gt 1][. gt 5])</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="((1,2,3,4,5,6,7,8,9,10,11)[(. gt 1) and (. gt 2)][(. gt 5) and (. gt 6)])">
      <x:call>
        <x:param select="string(.)">((1,2,3,4,5,6,7,8,9,10,11)[(. gt 1) and (. gt 2)][(. gt 5) and (. gt 6)])</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="((1,2,3,4,5,6,7,8,9,10,11)[fn:true()])">
      <x:call>
        <x:param select="string(.)">((1,2,3,4,5,6,7,8,9,10,11)[fn:true()])</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="fn:count(((1,2,3,4,5,6,7,8,9,10,11)[fn:false()]))">
      <x:call>
        <x:param select="string(.)">fn:count(((1,2,3,4,5,6,7,8,9,10,11)[fn:false()]))</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="empty((1, 2, 3)[0])">
      <x:call>
        <x:param select="string(.)">empty((1, 2, 3)[0])</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="empty((1, 2, 3)[4])">
      <x:call>
        <x:param select="string(.)">empty((1, 2, 3)[4])</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="empty((1, 2, 3)[0])">
      <x:call>
        <x:param select="string(.)">empty((1, 2, 3)[0])</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="empty((1, 2, 3)[4])">
      <x:call>
        <x:param select="string(.)">empty((1, 2, 3)[4])</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="empty((1, 2, 3)[0.1])">
      <x:call>
        <x:param select="string(.)">empty((1, 2, 3)[0.1])</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="empty((1, 2, 3)[1.1])">
      <x:call>
        <x:param select="string(.)">empty((1, 2, 3)[1.1])</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="empty((1, 2, 3)[1.01])">
      <x:call>
        <x:param select="string(.)">empty((1, 2, 3)[1.01])</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="empty((1, 2, 3)[4])">
      <x:call>
        <x:param select="string(.)">empty((1, 2, 3)[4])</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="empty((1, 2, 3)[4.1])">
      <x:call>
        <x:param select="string(.)">empty((1, 2, 3)[4.1])</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="empty((1, 2, 3)[4.01])">
      <x:call>
        <x:param select="string(.)">empty((1, 2, 3)[4.01])</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="not(empty((1, 2, 3)[1]))">
      <x:call>
        <x:param select="string(.)">not(empty((1, 2, 3)[1]))</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="not(empty((1, 2, 3)[3]))">
      <x:call>
        <x:param select="string(.)">not(empty((1, 2, 3)[3]))</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(1, 2, 3)[1] eq 1">
      <x:call>
        <x:param select="string(.)">(1, 2, 3)[1] eq 1</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(1, 2, 3)[1.0] eq 1">
      <x:call>
        <x:param select="string(.)">(1, 2, 3)[1.0] eq 1</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(1, 2, 3)[1.0e0] eq 1">
      <x:call>
        <x:param select="string(.)">(1, 2, 3)[1.0e0] eq 1</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(1, 2, 3)[3] eq 3">
      <x:call>
        <x:param select="string(.)">(1, 2, 3)[3] eq 3</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(1, 2, 3)[3.0] eq 3">
      <x:call>
        <x:param select="string(.)">(1, 2, 3)[3.0] eq 3</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(1, 2, 3)[3.0e0] eq 3">
      <x:call>
        <x:param select="string(.)">(1, 2, 3)[3.0e0] eq 3</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(0, 1, 2)[1] eq 0">
      <x:call>
        <x:param select="string(.)">(0, 1, 2)[1] eq 0</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(0, 1, 2)[2] eq 1">
      <x:call>
        <x:param select="string(.)">(0, 1, 2)[2] eq 1</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(0, 1, 2)[3] eq 2">
      <x:call>
        <x:param select="string(.)">(0, 1, 2)[3] eq 2</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(0)[1] eq 0">
      <x:call>
        <x:param select="string(.)">(0)[1] eq 0</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="0[1] eq 0">
      <x:call>
        <x:param select="string(.)">0[1] eq 0</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(0, 1)[1] eq 0">
      <x:call>
        <x:param select="string(.)">(0, 1)[1] eq 0</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="empty((1, 2, 3)[false()])">
      <x:call>
        <x:param select="string(.)">empty((1, 2, 3)[false()])</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="deep-equal((1, 2, 3), (1, 2, 3)[true()])">
      <x:call>
        <x:param select="string(.)">deep-equal((1, 2, 3), (1, 2, 3)[true()])</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="deep-equal((1, 2, 3), (1, 2, 3)[. instance of xs:integer])">
      <x:call>
        <x:param select="string(.)">deep-equal((1, 2, 3), (1, 2, 3)[. instance of xs:integer])</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="deep-equal((true(), true(), true()), (false(), true(), true(), false(), true(), false())[.])">
      <x:call>
        <x:param select="string(.)">deep-equal((true(), true(), true()), (false(), true(), true(), false(), true(), false())[.])</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="deep-equal((2, 3, 4, 5, 7, 8, 9), (0, 2, 3, 4, 5, 5, 7, 8, 10 - 1)[.])">
      <x:call>
        <x:param select="string(.)">deep-equal((2, 3, 4, 5, 7, 8, 9), (0, 2, 3, 4, 5, 5, 7, 8, 10 - 1)[.])</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="1[true()] eq 1">
      <x:call>
        <x:param select="string(.)">1[true()] eq 1</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(1, current-time())[1]">
      <x:call>
        <x:param select="string(.)">(1, current-time())[1]</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="deep-equal((1, 2, 3), (1, 2, 3)[xs:anyURI(&#34;example.com/&#34;)])">
      <x:call>
        <x:param select="string(.)">deep-equal((1, 2, 3), (1, 2, 3)[xs:anyURI("example.com/")])</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(1, 2, 3)[(xs:anyURI(&#34;example.com/&#34;), xs:anyURI(&#34;example.com/&#34;))]">
      <x:call>
        <x:param select="string(.)">(1, 2, 3)[(xs:anyURI("example.com/"), xs:anyURI("example.com/"))]</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="deep-equal((1, 2, 3), (1, 2, 3)[xs:untypedAtomic(&#34;content&#34;)])">
      <x:call>
        <x:param select="string(.)">deep-equal((1, 2, 3), (1, 2, 3)[xs:untypedAtomic("content")])</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(1, 2, 3)[(xs:untypedAtomic(&#34;content&#34;), xs:untypedAtomic(&#34;content&#34;))]">
      <x:call>
        <x:param select="string(.)">(1, 2, 3)[(xs:untypedAtomic("content"), xs:untypedAtomic("content"))]</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(0, 1, 2)[true()][1] eq 0">
      <x:call>
        <x:param select="string(.)">(0, 1, 2)[true()][1] eq 0</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(1, 2, 3)[position() eq 2 or position() eq 3][2] eq 3">
      <x:call>
        <x:param select="string(.)">(1, 2, 3)[position() eq 2 or position() eq 3][2] eq 3</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="empty((1, 2, 3)[position() eq 2 or position() eq 3][3])">
      <x:call>
        <x:param select="string(.)">empty((1, 2, 3)[position() eq 2 or position() eq 3][3])</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="deep-equal((1, 2, 3), (1, 2, 3)[2 or 3])">
      <x:call>
        <x:param select="string(.)">deep-equal((1, 2, 3), (1, 2, 3)[2 or 3])</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="empty((1, 2, 3)[3][2])">
      <x:call>
        <x:param select="string(.)">empty((1, 2, 3)[3][2])</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="empty((1, 2, 3)[3][0])">
      <x:call>
        <x:param select="string(.)">empty((1, 2, 3)[3][0])</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(0, 2, 4, 5)[1][1][1][true()][1][true()][1] eq 0">
      <x:call>
        <x:param select="string(.)">(0, 2, 4, 5)[1][1][1][true()][1][true()][1] eq 0</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="empty((1, 2, 3)[3e8])">
      <x:call>
        <x:param select="string(.)">empty((1, 2, 3)[3e8])</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="empty((0, 1, 2)[false()][1])">
      <x:call>
        <x:param select="string(.)">empty((0, 1, 2)[false()][1])</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="deep-equal((&#34;a&#34;, &#34;b&#34;, &#34;c&#34;), (0, 1, 2, &#34;a&#34;, &#34;b&#34;, &#34;c&#34;)[. instance of xs:string])">
      <x:call>
        <x:param select="string(.)">deep-equal(("a", "b", "c"), (0, 1, 2, "a", "b", "c")[. instance of xs:string])</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="((0, 1, 2, &#34;a&#34;, &#34;b&#34;, &#34;c&#34;)[. instance of xs:string][. treat as xs:string eq &#34;c&#34;] treat as xs:string) eq &#34;c&#34;">
      <x:call>
        <x:param select="string(.)">((0, 1, 2, "a", "b", "c")[. instance of xs:string][. treat as xs:string eq "c"] treat as xs:string) eq "c"</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="((0, 1, 2, &#34;a&#34;, &#34;b&#34;, &#34;c&#34;)[. instance of xs:integer][. treat as xs:integer eq 0] treat as xs:integer) eq 0">
      <x:call>
        <x:param select="string(.)">((0, 1, 2, "a", "b", "c")[. instance of xs:integer][. treat as xs:integer eq 0] treat as xs:integer) eq 0</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(0, 1, 2, &#34;a&#34;, &#34;b&#34;, &#34;c&#34;)[. instance of xs:integer][. eq &#34;c&#34;] eq 0">
      <x:call>
        <x:param select="string(.)">(0, 1, 2, "a", "b", "c")[. instance of xs:integer][. eq "c"] eq 0</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="empty(()[()])">
      <x:call>
        <x:param select="string(.)">empty(()[()])</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="empty((1, 2, 3)[()])">
      <x:call>
        <x:param select="string(.)">empty((1, 2, 3)[()])</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="empty(()[last()])">
      <x:call>
        <x:param select="string(.)">empty(()[last()])</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="empty(()[1])">
      <x:call>
        <x:param select="string(.)">empty(()[1])</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="empty(()[position()])">
      <x:call>
        <x:param select="string(.)">empty(()[position()])</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="empty(()[count(remove((current-time(), 1), 1)) eq 1])">
      <x:call>
        <x:param select="string(.)">empty(()[count(remove((current-time(), 1), 1)) eq 1])</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="deep-equal((1, 2, 3), (1, 2, 3)[position() &gt;= 1])">
      <x:call>
        <x:param select="string(.)">deep-equal((1, 2, 3), (1, 2, 3)[position() &gt;= 1])</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="deep-equal((1, 2, 3), (1, 2, 3)[3 &gt;= position()])">
      <x:call>
        <x:param select="string(.)">deep-equal((1, 2, 3), (1, 2, 3)[3 &gt;= position()])</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="deep-equal((1, 2, 3), (1, 2, 3)[position() ge 1])">
      <x:call>
        <x:param select="string(.)">deep-equal((1, 2, 3), (1, 2, 3)[position() ge 1])</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="deep-equal((1, 2, 3), (1, 2, 3)[3 ge position()])">
      <x:call>
        <x:param select="string(.)">deep-equal((1, 2, 3), (1, 2, 3)[3 ge position()])</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="deep-equal((0, 1, 2), (0, 1, 2)[position() eq position()])">
      <x:call>
        <x:param select="string(.)">deep-equal((0, 1, 2), (0, 1, 2)[position() eq position()])</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="deep-equal((0, 1, 2), (0, 1, 2)[position() = position()])">
      <x:call>
        <x:param select="string(.)">deep-equal((0, 1, 2), (0, 1, 2)[position() = position()])</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(0, 1, 2)[1 eq position()]">
      <x:call>
        <x:param select="string(.)">(0, 1, 2)[1 eq position()]</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(0, 1, 2)[3 eq position()]">
      <x:call>
        <x:param select="string(.)">(0, 1, 2)[3 eq position()]</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(0, 1, 2)[position() eq 3]">
      <x:call>
        <x:param select="string(.)">(0, 1, 2)[position() eq 3]</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="deep-equal((1, 2, 3), (1, 2, 3)[number(.)])">
      <x:call>
        <x:param select="string(.)">deep-equal((1, 2, 3), (1, 2, 3)[number(.)])</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="deep-equal((1, 2), (0, 1, 2)[if(. eq 1) then 2 else 3])">
      <x:call>
        <x:param select="string(.)">deep-equal((1, 2), (0, 1, 2)[if(. eq 1) then 2 else 3])</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="deep-equal((0, 1, 2), (0, 1, 2)[if(. eq 8) then &#34;str&#34; else position()])">
      <x:call>
        <x:param select="string(.)">deep-equal((0, 1, 2), (0, 1, 2)[if(. eq 8) then "str" else position()])</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="deep-equal((0, 1, 2), (0, 1, 2)[if(. eq 8) then 0 else position()])">
      <x:call>
        <x:param select="string(.)">deep-equal((0, 1, 2), (0, 1, 2)[if(. eq 8) then 0 else position()])</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(0, 1, 2)[last()]">
      <x:call>
        <x:param select="string(.)">(0, 1, 2)[last()]</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(0, 1, &#34;2&#34;)[last()]">
      <x:call>
        <x:param select="string(.)">(0, 1, "2")[last()]</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="2 eq (0, 1, &#34;2&#34;)[last()]">
      <x:call>
        <x:param select="string(.)">2 eq (0, 1, "2")[last()]</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="empty((())[last()])">
      <x:call>
        <x:param select="string(.)">empty((())[last()])</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="empty(()[last()])">
      <x:call>
        <x:param select="string(.)">empty(()[last()])</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(0, 1, 2)[. eq 0]">
      <x:call>
        <x:param select="string(.)">(0, 1, 2)[. eq 0]</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(0, 1, 2)[. eq 1]">
      <x:call>
        <x:param select="string(.)">(0, 1, 2)[. eq 1]</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(0, 1, 2)[. eq 2]">
      <x:call>
        <x:param select="string(.)">(0, 1, 2)[. eq 2]</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="deep-equal((0, 1, 2), (0, 1, 2)[. eq 0 or . eq 1 or . eq 2])">
      <x:call>
        <x:param select="string(.)">deep-equal((0, 1, 2), (0, 1, 2)[. eq 0 or . eq 1 or . eq 2])</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(0, 1, 2)[remove((1, &#34;a string&#34;), 2)]">
      <x:call>
        <x:param select="string(.)">(0, 1, 2)[remove((1, "a string"), 2)]</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="deep-equal((1, 2), (1, 2)[remove((true(), &#34;a string&#34;), 2)])">
      <x:call>
        <x:param select="string(.)">deep-equal((1, 2), (1, 2)[remove((true(), "a string"), 2)])</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="empty((1, 2, 3)[remove((false(), &#34;a string&#34;), 2)])">
      <x:call>
        <x:param select="string(.)">empty((1, 2, 3)[remove((false(), "a string"), 2)])</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="empty((1, 2, 3)[remove((false(), &#34;a string&#34;), 2)])">
      <x:call>
        <x:param select="string(.)">empty((1, 2, 3)[remove((false(), "a string"), 2)])</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="empty(current-time()[2])">
      <x:call>
        <x:param select="string(.)">empty(current-time()[2])</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="empty((1, 2, 3, current-time())[0])">
      <x:call>
        <x:param select="string(.)">empty((1, 2, 3, current-time())[0])</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="empty(remove((1, 2, 3, current-time()), 4)[false()])">
      <x:call>
        <x:param select="string(.)">empty(remove((1, 2, 3, current-time()), 4)[false()])</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="deep-equal(remove((1, 2, 3, current-time()), 4)[true()], (1, 2, 3))">
      <x:call>
        <x:param select="string(.)">deep-equal(remove((1, 2, 3, current-time()), 4)[true()], (1, 2, 3))</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(1, 2, 3)[(last(), last())[2]]">
      <x:call>
        <x:param select="string(.)">(1, 2, 3)[(last(), last())[2]]</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(1, 2, 3)[xs:hexBinary(&#34;FF&#34;)]">
      <x:call>
        <x:param select="string(.)">(1, 2, 3)[xs:hexBinary("FF")]</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(1, 2, 3)[1, 2]">
      <x:call>
        <x:param select="string(.)">(1, 2, 3)[1, 2]</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(1, 2, 3)[1, &#34;a string&#34;]">
      <x:call>
        <x:param select="string(.)">(1, 2, 3)[1, "a string"]</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(1, 2, 3)[&#34;a string&#34;, 1]">
      <x:call>
        <x:param select="string(.)">(1, 2, 3)["a string", 1]</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="/works/employee[@name=/works/employee[1]/@name]/@name/string()">
      <x:call>
        <x:param select="string(.)">/works/employee[@name=/works/employee[1]/@name]/@name/string()</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="empty((1,2,3,4,5)[3.4])">
      <x:call>
        <x:param select="string(.)">empty((1,2,3,4,5)[3.4])</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(//integer[fn:true()])">
      <x:call>
        <x:param select="string(.)">(//integer[fn:true()])</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="fn:count((//integer[fn:false()]))">
      <x:call>
        <x:param select="string(.)">fn:count((//integer[fn:false()]))</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(//integer[fn:not(fn:false())])">
      <x:call>
        <x:param select="string(.)">(//integer[fn:not(fn:false())])</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(//integer[fn:true() and fn:true()])">
      <x:call>
        <x:param select="string(.)">(//integer[fn:true() and fn:true()])</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(//integer[fn:true() or fn:true()])">
      <x:call>
        <x:param select="string(.)">(//integer[fn:true() or fn:true()])</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="fn:count((//integer[fn:false() and fn:false()]))">
      <x:call>
        <x:param select="string(.)">fn:count((//integer[fn:false() and fn:false()]))</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="fn:count((//integer[fn:false() or fn:false()]))">
      <x:call>
        <x:param select="string(.)">fn:count((//integer[fn:false() or fn:false()]))</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(/root/string[xs:string(.) = &#34;A String Function&#34;])">
      <x:call>
        <x:param select="string(.)">(/root/string[xs:string(.) = "A String Function"])</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(/root/integer[xs:integer(.) = 12678967543233])">
      <x:call>
        <x:param select="string(.)">(/root/integer[xs:integer(.) = 12678967543233])</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(/root/decimal[xs:decimal(.) = 12678967.543233])">
      <x:call>
        <x:param select="string(.)">(/root/decimal[xs:decimal(.) = 12678967.543233])</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(/root/float[xs:float(.) = xs:float(1267.43233E12)])">
      <x:call>
        <x:param select="string(.)">(/root/float[xs:float(.) = xs:float(1267.43233E12)])</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(/root/double[xs:double(.) = 1267.43233E12])">
      <x:call>
        <x:param select="string(.)">(/root/double[xs:double(.) = 1267.43233E12])</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(/root/boolean[xs:boolean(.) = fn:true()])">
      <x:call>
        <x:param select="string(.)">(/root/boolean[xs:boolean(.) = fn:true()])</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(/root/date[xs:date(.) = xs:date(&#34;2000-01-01+05:00&#34;)])">
      <x:call>
        <x:param select="string(.)">(/root/date[xs:date(.) = xs:date("2000-01-01+05:00")])</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(/works/employee[@name=&#34;Jane Doe 11&#34;])">
      <x:call>
        <x:param select="string(.)">(/works/employee[@name="Jane Doe 11"])</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(/works//day[xs:string(.) ne &#34;Monday&#34;])">
      <x:call>
        <x:param select="string(.)">(/works//day[xs:string(.) ne "Monday"])</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(/works//hours[xs:integer(.) lt 13])">
      <x:call>
        <x:param select="string(.)">(/works//hours[xs:integer(.) lt 13])</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(/works//hours[xs:integer(.) le 12])">
      <x:call>
        <x:param select="string(.)">(/works//hours[xs:integer(.) le 12])</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(/works//hours[xs:integer(.) gt 79])">
      <x:call>
        <x:param select="string(.)">(/works//hours[xs:integer(.) gt 79])</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(/works//hours[xs:integer(.) ge 80])">
      <x:call>
        <x:param select="string(.)">(/works//hours[xs:integer(.) ge 80])</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(/works//hours[xs:integer(.) = 12])">
      <x:call>
        <x:param select="string(.)">(/works//hours[xs:integer(.) = 12])</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(/works[1]//employee[empnum != &#34;E1&#34; and empnum != &#34;E4&#34;])">
      <x:call>
        <x:param select="string(.)">(/works[1]//employee[empnum != "E1" and empnum != "E4"])</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(/works//hours[xs:integer(.) &gt; 79])">
      <x:call>
        <x:param select="string(.)">(/works//hours[xs:integer(.) &gt; 79])</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(/works//hours[xs:integer(.) &gt;= 80])">
      <x:call>
        <x:param select="string(.)">(/works//hours[xs:integer(.) &gt;= 80])</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="for $x in /works/employee[fn:position() lt 5][fn:position() mod 2 eq 1] return (fn:data($x/empnum), fn:data($x/pnum))">
      <x:call>
        <x:param select="string(.)">for $x in /works/employee[fn:position() lt 5][fn:position() mod 2 eq 1] return (fn:data($x/empnum), fn:data($x/pnum))</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="for $x in /works/employee[fn:position() mod 2 eq 1][fn:position() lt 5] return (fn:data($x/empnum), fn:data($x/pnum))">
      <x:call>
        <x:param select="string(.)">for $x in /works/employee[fn:position() mod 2 eq 1][fn:position() lt 5] return (fn:data($x/empnum), fn:data($x/pnum))</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="fn:count((//integer[fn:true()]))">
      <x:call>
        <x:param select="string(.)">fn:count((//integer[fn:true()]))</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="fn:count((//integer[fn:false()]))">
      <x:call>
        <x:param select="string(.)">fn:count((//integer[fn:false()]))</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(//integer[fn:not(fn:false())])">
      <x:call>
        <x:param select="string(.)">(//integer[fn:not(fn:false())])</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(//integer[fn:true() and fn:true()])">
      <x:call>
        <x:param select="string(.)">(//integer[fn:true() and fn:true()])</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(//integer[fn:true() or fn:true()])">
      <x:call>
        <x:param select="string(.)">(//integer[fn:true() or fn:true()])</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="fn:count((//integer[fn:false() and fn:false()]))">
      <x:call>
        <x:param select="string(.)">fn:count((//integer[fn:false() and fn:false()]))</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="fn:count((//integer[fn:false() or fn:false()]))">
      <x:call>
        <x:param select="string(.)">fn:count((//integer[fn:false() or fn:false()]))</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(/root/string[xs:string(.) = &#34;A String Function&#34;])">
      <x:call>
        <x:param select="string(.)">(/root/string[xs:string(.) = "A String Function"])</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(/root/integer[xs:integer(.) = 12678967543233])">
      <x:call>
        <x:param select="string(.)">(/root/integer[xs:integer(.) = 12678967543233])</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(/root/decimal[(xs:decimal(.) = 12678967.543233)])">
      <x:call>
        <x:param select="string(.)">(/root/decimal[(xs:decimal(.) = 12678967.543233)])</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(/root/float[xs:float(.) = xs:float(1267.43233E12)])">
      <x:call>
        <x:param select="string(.)">(/root/float[xs:float(.) = xs:float(1267.43233E12)])</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(/root/double[xs:double(.) = 1267.43233E12])">
      <x:call>
        <x:param select="string(.)">(/root/double[xs:double(.) = 1267.43233E12])</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(/root/boolean[xs:boolean(.) = fn:true()])">
      <x:call>
        <x:param select="string(.)">(/root/boolean[xs:boolean(.) = fn:true()])</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(/root/date[xs:date(.) = xs:date(&#34;2000-01-01+05:00&#34;)])">
      <x:call>
        <x:param select="string(.)">(/root/date[xs:date(.) = xs:date("2000-01-01+05:00")])</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="&#34;c&#34;[. treat as xs:string]">
      <x:call>
        <x:param select="string(.)">"c"[. treat as xs:string]</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario></x:scenario></x:description>