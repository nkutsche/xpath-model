<?xml version="1.0" encoding="UTF-8"?><x:description xmlns:nk="http://www.nkutsche.com/xpath-model" xmlns:x="http://www.jenitennison.com/xslt/xspec" stylesheet="../../../main/resources/xsl/xpath-model.xsl"><x:scenario label="generic-test" shared="yes">
    <x:call function="nk:xpath-model">
      <x:param select="$expr"/>
    </x:call>
    <x:expect label="result should be valid">
      <expr>...</expr>
    </x:expect>
  </x:scenario><x:scenario>
      <x:label>(/works/employee[xs:integer(hours[1]) gt 20])</x:label>
      <x:variable name="expr" as="xs:string">(/works/employee[xs:integer(hours[1]) gt 20])</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>((1 to 25)[. mod 2 eq 0])</x:label>
      <x:variable name="expr" as="xs:string">((1 to 25)[. mod 2 eq 0])</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>((1 to 25)[25])</x:label>
      <x:variable name="expr" as="xs:string">((1 to 25)[25])</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>(//empnum | (/))//employee[xs:integer(hours[1]) gt 20]</x:label>
      <x:variable name="expr" as="xs:string">(//empnum | (/))//employee[xs:integer(hours[1]) gt 20]</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>(//employee[fn:last()])</x:label>
      <x:variable name="expr" as="xs:string">(//employee[fn:last()])</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>((1 to 25)[. ge 10])</x:label>
      <x:variable name="expr" as="xs:string">((1 to 25)[. ge 10])</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>((1 to 25)[. lt 10])</x:label>
      <x:variable name="expr" as="xs:string">((1 to 25)[. lt 10])</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>((1 to 25)[. le 10])</x:label>
      <x:variable name="expr" as="xs:string">((1 to 25)[. le 10])</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>((1 to 25)[. eq 10])</x:label>
      <x:variable name="expr" as="xs:string">((1 to 25)[. eq 10])</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>((1 to 11)[. ne 10])</x:label>
      <x:variable name="expr" as="xs:string">((1 to 11)[. ne 10])</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>((1 to 11)[(. eq 10) and (. mod 5 eq 0)])</x:label>
      <x:variable name="expr" as="xs:string">((1 to 11)[(. eq 10) and (. mod 5 eq 0)])</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>((1 to 11)[(. eq 10) or (. eq 5)])</x:label>
      <x:variable name="expr" as="xs:string">((1 to 11)[(. eq 10) or (. eq 5)])</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>((1,2,4,5,6,7,8,9,10,11)[(. div 2 eq 5)])</x:label>
      <x:variable name="expr" as="xs:string">((1,2,4,5,6,7,8,9,10,11)[(. div 2 eq 5)])</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>((1,2,4,5,6,7,8,9,10,11)[(. * 2 eq 10)])</x:label>
      <x:variable name="expr" as="xs:string">((1,2,4,5,6,7,8,9,10,11)[(. * 2 eq 10)])</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>((1,2,4,5,6,7,8,9,10,11)[(. + 2 eq 10)])</x:label>
      <x:variable name="expr" as="xs:string">((1,2,4,5,6,7,8,9,10,11)[(. + 2 eq 10)])</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>((1,2,4,5,6,7,8,9,10,11)[(. - 2 eq 6)])</x:label>
      <x:variable name="expr" as="xs:string">((1,2,4,5,6,7,8,9,10,11)[(. - 2 eq 6)])</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>((1,2,4,5,6,7,8,9,10,11)[(. idiv 2 eq 3)])</x:label>
      <x:variable name="expr" as="xs:string">((1,2,4,5,6,7,8,9,10,11)[(. idiv 2 eq 3)])</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>((1,2,3,4,5,6,7,8,9,10,11)[(xs:string(.) eq "3")])</x:label>
      <x:variable name="expr" as="xs:string">((1,2,3,4,5,6,7,8,9,10,11)[(xs:string(.) eq "3")])</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>((1,2,3,4,5,6,7,8,9,10,11)[. gt 1][. gt 5])</x:label>
      <x:variable name="expr" as="xs:string">((1,2,3,4,5,6,7,8,9,10,11)[. gt 1][. gt 5])</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>((1,2,3,4,5,6,7,8,9,10,11)[(. gt 1) and (. gt 2)][(. gt 5) and (. gt 6)])</x:label>
      <x:variable name="expr" as="xs:string">((1,2,3,4,5,6,7,8,9,10,11)[(. gt 1) and (. gt 2)][(. gt 5) and (. gt 6)])</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>((1,2,3,4,5,6,7,8,9,10,11)[fn:true()])</x:label>
      <x:variable name="expr" as="xs:string">((1,2,3,4,5,6,7,8,9,10,11)[fn:true()])</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>fn:count(((1,2,3,4,5,6,7,8,9,10,11)[fn:false()]))</x:label>
      <x:variable name="expr" as="xs:string">fn:count(((1,2,3,4,5,6,7,8,9,10,11)[fn:false()]))</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>(1, 2, 3)[</x:label>
      <x:variable name="expr" as="xs:string">(1, 2, 3)[</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>(1, 2, 3)]</x:label>
      <x:variable name="expr" as="xs:string">(1, 2, 3)]</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>(1, 2, 3)[]</x:label>
      <x:variable name="expr" as="xs:string">(1, 2, 3)[]</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>empty((1, 2, 3)[0])</x:label>
      <x:variable name="expr" as="xs:string">empty((1, 2, 3)[0])</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>empty((1, 2, 3)[4])</x:label>
      <x:variable name="expr" as="xs:string">empty((1, 2, 3)[4])</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>empty((1, 2, 3)[0])</x:label>
      <x:variable name="expr" as="xs:string">empty((1, 2, 3)[0])</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>empty((1, 2, 3)[4])</x:label>
      <x:variable name="expr" as="xs:string">empty((1, 2, 3)[4])</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>empty((1, 2, 3)[0.1])</x:label>
      <x:variable name="expr" as="xs:string">empty((1, 2, 3)[0.1])</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>empty((1, 2, 3)[1.1])</x:label>
      <x:variable name="expr" as="xs:string">empty((1, 2, 3)[1.1])</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>empty((1, 2, 3)[1.01])</x:label>
      <x:variable name="expr" as="xs:string">empty((1, 2, 3)[1.01])</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>empty((1, 2, 3)[4])</x:label>
      <x:variable name="expr" as="xs:string">empty((1, 2, 3)[4])</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>empty((1, 2, 3)[4.1])</x:label>
      <x:variable name="expr" as="xs:string">empty((1, 2, 3)[4.1])</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>empty((1, 2, 3)[4.01])</x:label>
      <x:variable name="expr" as="xs:string">empty((1, 2, 3)[4.01])</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>not(empty((1, 2, 3)[1]))</x:label>
      <x:variable name="expr" as="xs:string">not(empty((1, 2, 3)[1]))</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>not(empty((1, 2, 3)[3]))</x:label>
      <x:variable name="expr" as="xs:string">not(empty((1, 2, 3)[3]))</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>(1, 2, 3)[1] eq 1</x:label>
      <x:variable name="expr" as="xs:string">(1, 2, 3)[1] eq 1</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>(1, 2, 3)[1.0] eq 1</x:label>
      <x:variable name="expr" as="xs:string">(1, 2, 3)[1.0] eq 1</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>(1, 2, 3)[1.0e0] eq 1</x:label>
      <x:variable name="expr" as="xs:string">(1, 2, 3)[1.0e0] eq 1</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>(1, 2, 3)[3] eq 3</x:label>
      <x:variable name="expr" as="xs:string">(1, 2, 3)[3] eq 3</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>(1, 2, 3)[3.0] eq 3</x:label>
      <x:variable name="expr" as="xs:string">(1, 2, 3)[3.0] eq 3</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>(1, 2, 3)[3.0e0] eq 3</x:label>
      <x:variable name="expr" as="xs:string">(1, 2, 3)[3.0e0] eq 3</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>(0, 1, 2)[1] eq 0</x:label>
      <x:variable name="expr" as="xs:string">(0, 1, 2)[1] eq 0</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>(0, 1, 2)[2] eq 1</x:label>
      <x:variable name="expr" as="xs:string">(0, 1, 2)[2] eq 1</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>(0, 1, 2)[3] eq 2</x:label>
      <x:variable name="expr" as="xs:string">(0, 1, 2)[3] eq 2</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>(0)[1] eq 0</x:label>
      <x:variable name="expr" as="xs:string">(0)[1] eq 0</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>0[1] eq 0</x:label>
      <x:variable name="expr" as="xs:string">0[1] eq 0</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>(0, 1)[1] eq 0</x:label>
      <x:variable name="expr" as="xs:string">(0, 1)[1] eq 0</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>empty((1, 2, 3)[false()])</x:label>
      <x:variable name="expr" as="xs:string">empty((1, 2, 3)[false()])</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>deep-equal((1, 2, 3), (1, 2, 3)[true()])</x:label>
      <x:variable name="expr" as="xs:string">deep-equal((1, 2, 3), (1, 2, 3)[true()])</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>deep-equal((1, 2, 3), (1, 2, 3)[. instance of xs:integer])</x:label>
      <x:variable name="expr" as="xs:string">deep-equal((1, 2, 3), (1, 2, 3)[. instance of xs:integer])</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>deep-equal((true(), true(), true()), (false(), true(), true(), false(), true(), false())[.])</x:label>
      <x:variable name="expr" as="xs:string">deep-equal((true(), true(), true()), (false(), true(), true(), false(), true(), false())[.])</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>deep-equal((2, 3, 4, 5, 7, 8, 9), (0, 2, 3, 4, 5, 5, 7, 8, 10 - 1)[.])</x:label>
      <x:variable name="expr" as="xs:string">deep-equal((2, 3, 4, 5, 7, 8, 9), (0, 2, 3, 4, 5, 5, 7, 8, 10 - 1)[.])</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>1[true()] eq 1</x:label>
      <x:variable name="expr" as="xs:string">1[true()] eq 1</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>(1, current-time())[1]</x:label>
      <x:variable name="expr" as="xs:string">(1, current-time())[1]</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>deep-equal((1, 2, 3), (1, 2, 3)[xs:anyURI("example.com/")])</x:label>
      <x:variable name="expr" as="xs:string">deep-equal((1, 2, 3), (1, 2, 3)[xs:anyURI("example.com/")])</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>(1, 2, 3)[(xs:anyURI("example.com/"), xs:anyURI("example.com/"))]</x:label>
      <x:variable name="expr" as="xs:string">(1, 2, 3)[(xs:anyURI("example.com/"), xs:anyURI("example.com/"))]</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>deep-equal((1, 2, 3), (1, 2, 3)[xs:untypedAtomic("content")])</x:label>
      <x:variable name="expr" as="xs:string">deep-equal((1, 2, 3), (1, 2, 3)[xs:untypedAtomic("content")])</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>(1, 2, 3)[(xs:untypedAtomic("content"), xs:untypedAtomic("content"))]</x:label>
      <x:variable name="expr" as="xs:string">(1, 2, 3)[(xs:untypedAtomic("content"), xs:untypedAtomic("content"))]</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>(0, 1, 2)[true()][1] eq 0</x:label>
      <x:variable name="expr" as="xs:string">(0, 1, 2)[true()][1] eq 0</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>(1, 2, 3)[position() eq 2 or position() eq 3][2] eq 3</x:label>
      <x:variable name="expr" as="xs:string">(1, 2, 3)[position() eq 2 or position() eq 3][2] eq 3</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>empty((1, 2, 3)[position() eq 2 or position() eq 3][3])</x:label>
      <x:variable name="expr" as="xs:string">empty((1, 2, 3)[position() eq 2 or position() eq 3][3])</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>deep-equal((1, 2, 3), (1, 2, 3)[2 or 3])</x:label>
      <x:variable name="expr" as="xs:string">deep-equal((1, 2, 3), (1, 2, 3)[2 or 3])</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>empty((1, 2, 3)[3][2])</x:label>
      <x:variable name="expr" as="xs:string">empty((1, 2, 3)[3][2])</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>empty((1, 2, 3)[3][0])</x:label>
      <x:variable name="expr" as="xs:string">empty((1, 2, 3)[3][0])</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>(0, 2, 4, 5)[1][1][1][true()][1][true()][1] eq 0</x:label>
      <x:variable name="expr" as="xs:string">(0, 2, 4, 5)[1][1][1][true()][1][true()][1] eq 0</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>empty((1, 2, 3)[3e8])</x:label>
      <x:variable name="expr" as="xs:string">empty((1, 2, 3)[3e8])</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>empty((0, 1, 2)[false()][1])</x:label>
      <x:variable name="expr" as="xs:string">empty((0, 1, 2)[false()][1])</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>deep-equal(("a", "b", "c"), (0, 1, 2, "a", "b", "c")[. instance of xs:string])</x:label>
      <x:variable name="expr" as="xs:string">deep-equal(("a", "b", "c"), (0, 1, 2, "a", "b", "c")[. instance of xs:string])</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>((0, 1, 2, "a", "b", "c")[. instance of xs:string][. treat as xs:string eq "c"] treat as xs:string) eq "c"</x:label>
      <x:variable name="expr" as="xs:string">((0, 1, 2, "a", "b", "c")[. instance of xs:string][. treat as xs:string eq "c"] treat as xs:string) eq "c"</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>((0, 1, 2, "a", "b", "c")[. instance of xs:integer][. treat as xs:integer eq 0] treat as xs:integer) eq 0</x:label>
      <x:variable name="expr" as="xs:string">((0, 1, 2, "a", "b", "c")[. instance of xs:integer][. treat as xs:integer eq 0] treat as xs:integer) eq 0</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>(0, 1, 2, "a", "b", "c")[. instance of xs:integer][. eq "c"] eq 0</x:label>
      <x:variable name="expr" as="xs:string">(0, 1, 2, "a", "b", "c")[. instance of xs:integer][. eq "c"] eq 0</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>empty(()[()])</x:label>
      <x:variable name="expr" as="xs:string">empty(()[()])</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>empty((1, 2, 3)[()])</x:label>
      <x:variable name="expr" as="xs:string">empty((1, 2, 3)[()])</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>empty(()[last()])</x:label>
      <x:variable name="expr" as="xs:string">empty(()[last()])</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>empty(()[1])</x:label>
      <x:variable name="expr" as="xs:string">empty(()[1])</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>empty(()[position()])</x:label>
      <x:variable name="expr" as="xs:string">empty(()[position()])</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>empty(()[count(remove((current-time(), 1), 1)) eq 1])</x:label>
      <x:variable name="expr" as="xs:string">empty(()[count(remove((current-time(), 1), 1)) eq 1])</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>deep-equal((1, 2, 3), (1, 2, 3)[position() &gt;= 1])</x:label>
      <x:variable name="expr" as="xs:string">deep-equal((1, 2, 3), (1, 2, 3)[position() &gt;= 1])</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>deep-equal((1, 2, 3), (1, 2, 3)[3 &gt;= position()])</x:label>
      <x:variable name="expr" as="xs:string">deep-equal((1, 2, 3), (1, 2, 3)[3 &gt;= position()])</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>deep-equal((1, 2, 3), (1, 2, 3)[position() ge 1])</x:label>
      <x:variable name="expr" as="xs:string">deep-equal((1, 2, 3), (1, 2, 3)[position() ge 1])</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>deep-equal((1, 2, 3), (1, 2, 3)[3 ge position()])</x:label>
      <x:variable name="expr" as="xs:string">deep-equal((1, 2, 3), (1, 2, 3)[3 ge position()])</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>deep-equal((0, 1, 2), (0, 1, 2)[position() eq position()])</x:label>
      <x:variable name="expr" as="xs:string">deep-equal((0, 1, 2), (0, 1, 2)[position() eq position()])</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>deep-equal((0, 1, 2), (0, 1, 2)[position() = position()])</x:label>
      <x:variable name="expr" as="xs:string">deep-equal((0, 1, 2), (0, 1, 2)[position() = position()])</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>(0, 1, 2)[1 eq position()]</x:label>
      <x:variable name="expr" as="xs:string">(0, 1, 2)[1 eq position()]</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>(0, 1, 2)[3 eq position()]</x:label>
      <x:variable name="expr" as="xs:string">(0, 1, 2)[3 eq position()]</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>(0, 1, 2)[position() eq 3]</x:label>
      <x:variable name="expr" as="xs:string">(0, 1, 2)[position() eq 3]</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>deep-equal((1, 2, 3), (1, 2, 3)[number(.)])</x:label>
      <x:variable name="expr" as="xs:string">deep-equal((1, 2, 3), (1, 2, 3)[number(.)])</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>deep-equal((1, 2), (0, 1, 2)[if(. eq 1) then 2 else 3])</x:label>
      <x:variable name="expr" as="xs:string">deep-equal((1, 2), (0, 1, 2)[if(. eq 1) then 2 else 3])</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>deep-equal((0, 1, 2), (0, 1, 2)[if(. eq 8) then "str" else position()])</x:label>
      <x:variable name="expr" as="xs:string">deep-equal((0, 1, 2), (0, 1, 2)[if(. eq 8) then "str" else position()])</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>deep-equal((0, 1, 2), (0, 1, 2)[if(. eq 8) then 0 else position()])</x:label>
      <x:variable name="expr" as="xs:string">deep-equal((0, 1, 2), (0, 1, 2)[if(. eq 8) then 0 else position()])</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>(0, 1, 2)[last()]</x:label>
      <x:variable name="expr" as="xs:string">(0, 1, 2)[last()]</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>(0, 1, "2")[last()]</x:label>
      <x:variable name="expr" as="xs:string">(0, 1, "2")[last()]</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>2 eq (0, 1, "2")[last()]</x:label>
      <x:variable name="expr" as="xs:string">2 eq (0, 1, "2")[last()]</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>empty((())[last()])</x:label>
      <x:variable name="expr" as="xs:string">empty((())[last()])</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>empty(()[last()])</x:label>
      <x:variable name="expr" as="xs:string">empty(()[last()])</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>(0, 1, 2)[. eq 0]</x:label>
      <x:variable name="expr" as="xs:string">(0, 1, 2)[. eq 0]</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>(0, 1, 2)[. eq 1]</x:label>
      <x:variable name="expr" as="xs:string">(0, 1, 2)[. eq 1]</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>(0, 1, 2)[. eq 2]</x:label>
      <x:variable name="expr" as="xs:string">(0, 1, 2)[. eq 2]</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>deep-equal((0, 1, 2), (0, 1, 2)[. eq 0 or . eq 1 or . eq 2])</x:label>
      <x:variable name="expr" as="xs:string">deep-equal((0, 1, 2), (0, 1, 2)[. eq 0 or . eq 1 or . eq 2])</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>(0, 1, 2)[remove((1, "a string"), 2)]</x:label>
      <x:variable name="expr" as="xs:string">(0, 1, 2)[remove((1, "a string"), 2)]</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>deep-equal((1, 2), (1, 2)[remove((true(), "a string"), 2)])</x:label>
      <x:variable name="expr" as="xs:string">deep-equal((1, 2), (1, 2)[remove((true(), "a string"), 2)])</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>empty((1, 2, 3)[remove((false(), "a string"), 2)])</x:label>
      <x:variable name="expr" as="xs:string">empty((1, 2, 3)[remove((false(), "a string"), 2)])</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>empty((1, 2, 3)[remove((false(), "a string"), 2)])</x:label>
      <x:variable name="expr" as="xs:string">empty((1, 2, 3)[remove((false(), "a string"), 2)])</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>empty(current-time()[2])</x:label>
      <x:variable name="expr" as="xs:string">empty(current-time()[2])</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>empty((1, 2, 3, current-time())[0])</x:label>
      <x:variable name="expr" as="xs:string">empty((1, 2, 3, current-time())[0])</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>empty(remove((1, 2, 3, current-time()), 4)[false()])</x:label>
      <x:variable name="expr" as="xs:string">empty(remove((1, 2, 3, current-time()), 4)[false()])</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>deep-equal(remove((1, 2, 3, current-time()), 4)[true()], (1, 2, 3))</x:label>
      <x:variable name="expr" as="xs:string">deep-equal(remove((1, 2, 3, current-time()), 4)[true()], (1, 2, 3))</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>(1, 2, 3)[(last(), last())[2]]</x:label>
      <x:variable name="expr" as="xs:string">(1, 2, 3)[(last(), last())[2]]</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>(1, 2, 3)[xs:hexBinary("FF")]</x:label>
      <x:variable name="expr" as="xs:string">(1, 2, 3)[xs:hexBinary("FF")]</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>(1, 2, 3)[1, 2]</x:label>
      <x:variable name="expr" as="xs:string">(1, 2, 3)[1, 2]</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>(1, 2, 3)[1, "a string"]</x:label>
      <x:variable name="expr" as="xs:string">(1, 2, 3)[1, "a string"]</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>(1, 2, 3)["a string", 1]</x:label>
      <x:variable name="expr" as="xs:string">(1, 2, 3)["a string", 1]</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>/works/employee[@name=/works/employee[1]/@name]/@name/string()</x:label>
      <x:variable name="expr" as="xs:string">/works/employee[@name=/works/employee[1]/@name]/@name/string()</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>empty((1,2,3,4,5)[3.4])</x:label>
      <x:variable name="expr" as="xs:string">empty((1,2,3,4,5)[3.4])</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>(//integer[fn:true()])</x:label>
      <x:variable name="expr" as="xs:string">(//integer[fn:true()])</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>fn:count((//integer[fn:false()]))</x:label>
      <x:variable name="expr" as="xs:string">fn:count((//integer[fn:false()]))</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>(//integer[fn:not(fn:false())])</x:label>
      <x:variable name="expr" as="xs:string">(//integer[fn:not(fn:false())])</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>(//integer[fn:true() and fn:true()])</x:label>
      <x:variable name="expr" as="xs:string">(//integer[fn:true() and fn:true()])</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>(//integer[fn:true() or fn:true()])</x:label>
      <x:variable name="expr" as="xs:string">(//integer[fn:true() or fn:true()])</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>fn:count((//integer[fn:false() and fn:false()]))</x:label>
      <x:variable name="expr" as="xs:string">fn:count((//integer[fn:false() and fn:false()]))</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>fn:count((//integer[fn:false() or fn:false()]))</x:label>
      <x:variable name="expr" as="xs:string">fn:count((//integer[fn:false() or fn:false()]))</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>(/root/string[xs:string(.) = "A String Function"])</x:label>
      <x:variable name="expr" as="xs:string">(/root/string[xs:string(.) = "A String Function"])</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>(/root/integer[xs:integer(.) = 12678967543233])</x:label>
      <x:variable name="expr" as="xs:string">(/root/integer[xs:integer(.) = 12678967543233])</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>(/root/decimal[xs:decimal(.) = 12678967.543233])</x:label>
      <x:variable name="expr" as="xs:string">(/root/decimal[xs:decimal(.) = 12678967.543233])</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>(/root/float[xs:float(.) = xs:float(1267.43233E12)])</x:label>
      <x:variable name="expr" as="xs:string">(/root/float[xs:float(.) = xs:float(1267.43233E12)])</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>(/root/double[xs:double(.) = 1267.43233E12])</x:label>
      <x:variable name="expr" as="xs:string">(/root/double[xs:double(.) = 1267.43233E12])</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>(/root/boolean[xs:boolean(.) = fn:true()])</x:label>
      <x:variable name="expr" as="xs:string">(/root/boolean[xs:boolean(.) = fn:true()])</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>(/root/date[xs:date(.) = xs:date("2000-01-01+05:00")])</x:label>
      <x:variable name="expr" as="xs:string">(/root/date[xs:date(.) = xs:date("2000-01-01+05:00")])</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>(/works/employee[@name="Jane Doe 11"])</x:label>
      <x:variable name="expr" as="xs:string">(/works/employee[@name="Jane Doe 11"])</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>(/works//day[xs:string(.) ne "Monday"])</x:label>
      <x:variable name="expr" as="xs:string">(/works//day[xs:string(.) ne "Monday"])</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>(/works//hours[xs:integer(.) lt 13])</x:label>
      <x:variable name="expr" as="xs:string">(/works//hours[xs:integer(.) lt 13])</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>(/works//hours[xs:integer(.) le 12])</x:label>
      <x:variable name="expr" as="xs:string">(/works//hours[xs:integer(.) le 12])</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>(/works//hours[xs:integer(.) gt 79])</x:label>
      <x:variable name="expr" as="xs:string">(/works//hours[xs:integer(.) gt 79])</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>(/works//hours[xs:integer(.) ge 80])</x:label>
      <x:variable name="expr" as="xs:string">(/works//hours[xs:integer(.) ge 80])</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>(/works//hours[xs:integer(.) = 12])</x:label>
      <x:variable name="expr" as="xs:string">(/works//hours[xs:integer(.) = 12])</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>(/works[1]//employee[empnum != "E1" and empnum != "E4"])</x:label>
      <x:variable name="expr" as="xs:string">(/works[1]//employee[empnum != "E1" and empnum != "E4"])</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>(/works//hours[xs:integer(.) &gt; 79])</x:label>
      <x:variable name="expr" as="xs:string">(/works//hours[xs:integer(.) &gt; 79])</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>(/works//hours[xs:integer(.) &gt;= 80])</x:label>
      <x:variable name="expr" as="xs:string">(/works//hours[xs:integer(.) &gt;= 80])</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>for $x in /works/employee[fn:position() lt 5][fn:position() mod 2 eq 1] return (fn:data($x/empnum), fn:data($x/pnum))</x:label>
      <x:variable name="expr" as="xs:string">for $x in /works/employee[fn:position() lt 5][fn:position() mod 2 eq 1] return (fn:data($x/empnum), fn:data($x/pnum))</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>for $x in /works/employee[fn:position() mod 2 eq 1][fn:position() lt 5] return (fn:data($x/empnum), fn:data($x/pnum))</x:label>
      <x:variable name="expr" as="xs:string">for $x in /works/employee[fn:position() mod 2 eq 1][fn:position() lt 5] return (fn:data($x/empnum), fn:data($x/pnum))</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>fn:count((//integer[fn:true()]))</x:label>
      <x:variable name="expr" as="xs:string">fn:count((//integer[fn:true()]))</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>fn:count((//integer[fn:false()]))</x:label>
      <x:variable name="expr" as="xs:string">fn:count((//integer[fn:false()]))</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>(//integer[fn:not(fn:false())])</x:label>
      <x:variable name="expr" as="xs:string">(//integer[fn:not(fn:false())])</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>(//integer[fn:true() and fn:true()])</x:label>
      <x:variable name="expr" as="xs:string">(//integer[fn:true() and fn:true()])</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>(//integer[fn:true() or fn:true()])</x:label>
      <x:variable name="expr" as="xs:string">(//integer[fn:true() or fn:true()])</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>fn:count((//integer[fn:false() and fn:false()]))</x:label>
      <x:variable name="expr" as="xs:string">fn:count((//integer[fn:false() and fn:false()]))</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>fn:count((//integer[fn:false() or fn:false()]))</x:label>
      <x:variable name="expr" as="xs:string">fn:count((//integer[fn:false() or fn:false()]))</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>(/root/string[xs:string(.) = "A String Function"])</x:label>
      <x:variable name="expr" as="xs:string">(/root/string[xs:string(.) = "A String Function"])</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>(/root/integer[xs:integer(.) = 12678967543233])</x:label>
      <x:variable name="expr" as="xs:string">(/root/integer[xs:integer(.) = 12678967543233])</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>(/root/decimal[(xs:decimal(.) = 12678967.543233)])</x:label>
      <x:variable name="expr" as="xs:string">(/root/decimal[(xs:decimal(.) = 12678967.543233)])</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>(/root/float[xs:float(.) = xs:float(1267.43233E12)])</x:label>
      <x:variable name="expr" as="xs:string">(/root/float[xs:float(.) = xs:float(1267.43233E12)])</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>(/root/double[xs:double(.) = 1267.43233E12])</x:label>
      <x:variable name="expr" as="xs:string">(/root/double[xs:double(.) = 1267.43233E12])</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>(/root/boolean[xs:boolean(.) = fn:true()])</x:label>
      <x:variable name="expr" as="xs:string">(/root/boolean[xs:boolean(.) = fn:true()])</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>(/root/date[xs:date(.) = xs:date("2000-01-01+05:00")])</x:label>
      <x:variable name="expr" as="xs:string">(/root/date[xs:date(.) = xs:date("2000-01-01+05:00")])</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>"c"[. treat as xs:string]</x:label>
      <x:variable name="expr" as="xs:string">"c"[. treat as xs:string]</x:variable>
      <x:like label="generic-test"/>
    </x:scenario></x:description>