<?xml version="1.0" encoding="UTF-8"?><x:description xmlns:nk="http://www.nkutsche.com/xpath-model" xmlns:x="http://www.jenitennison.com/xslt/xspec" stylesheet="../../../main/resources/xsl/xpath-model.xsl"><x:scenario label="/qt3tests-master/prod/GeneralComp.ne.xml"><x:call function="nk:xpath-model"/><x:scenario label="() != ()">
      <x:call>
        <x:param select="string(.)">() != ()</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="() != 10000">
      <x:call>
        <x:param select="string(.)">() != 10000</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="() != (50000)">
      <x:call>
        <x:param select="string(.)">() != (50000)</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="() != (10000,50000)">
      <x:call>
        <x:param select="string(.)">() != (10000,50000)</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="() != (/works/employee[1]/hours[1])">
      <x:call>
        <x:param select="string(.)">() != (/works/employee[1]/hours[1])</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="() != (/works/employee[1]/hours[1],/works/employee[6]/hours[1])">
      <x:call>
        <x:param select="string(.)">() != (/works/employee[1]/hours[1],/works/employee[6]/hours[1])</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="() != ($works/works/employee[1]/hours[1],$staff/staff/employee[6]/grade[1])">
      <x:call>
        <x:param select="string(.)">() != ($works/works/employee[1]/hours[1],$staff/staff/employee[6]/grade[1])</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="10000 != ()">
      <x:call>
        <x:param select="string(.)">10000 != ()</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="10000 != (50000)">
      <x:call>
        <x:param select="string(.)">10000 != (50000)</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="10000 != (10000,50000)">
      <x:call>
        <x:param select="string(.)">10000 != (10000,50000)</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="10000 != (/works/employee[1]/hours[1])">
      <x:call>
        <x:param select="string(.)">10000 != (/works/employee[1]/hours[1])</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="10000 != (/works/employee[1]/hours[1],/works/employee[6]/hours[1])">
      <x:call>
        <x:param select="string(.)">10000 != (/works/employee[1]/hours[1],/works/employee[6]/hours[1])</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="10000 != ($works/works/employee[1]/hours[1],$staff/staff/employee[6]/grade[1])">
      <x:call>
        <x:param select="string(.)">10000 != ($works/works/employee[1]/hours[1],$staff/staff/employee[6]/grade[1])</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(50000) != ()">
      <x:call>
        <x:param select="string(.)">(50000) != ()</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(50000) != 10000">
      <x:call>
        <x:param select="string(.)">(50000) != 10000</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(50000) != (50000)">
      <x:call>
        <x:param select="string(.)">(50000) != (50000)</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(50000) != (10000,50000)">
      <x:call>
        <x:param select="string(.)">(50000) != (10000,50000)</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(50000) != (/works/employee[1]/hours[1])">
      <x:call>
        <x:param select="string(.)">(50000) != (/works/employee[1]/hours[1])</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(50000) != (/works/employee[1]/hours[1],/works/employee[6]/hours[1])">
      <x:call>
        <x:param select="string(.)">(50000) != (/works/employee[1]/hours[1],/works/employee[6]/hours[1])</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(50000) != ($works/works/employee[1]/hours[1],$staff/staff/employee[6]/grade[1])">
      <x:call>
        <x:param select="string(.)">(50000) != ($works/works/employee[1]/hours[1],$staff/staff/employee[6]/grade[1])</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(10000,50000) != ()">
      <x:call>
        <x:param select="string(.)">(10000,50000) != ()</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(10000,50000) != 10000">
      <x:call>
        <x:param select="string(.)">(10000,50000) != 10000</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(10000,50000) != (50000)">
      <x:call>
        <x:param select="string(.)">(10000,50000) != (50000)</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(10000,50000) != (10000,50000)">
      <x:call>
        <x:param select="string(.)">(10000,50000) != (10000,50000)</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(10000,50000) != (/works/employee[1]/hours[1])">
      <x:call>
        <x:param select="string(.)">(10000,50000) != (/works/employee[1]/hours[1])</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(10000,50000) != (/works/employee[1]/hours[1],/works/employee[6]/hours[1])">
      <x:call>
        <x:param select="string(.)">(10000,50000) != (/works/employee[1]/hours[1],/works/employee[6]/hours[1])</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(10000,50000) != ($works/works/employee[1]/hours[1],$staff/staff/employee[6]/grade[1])">
      <x:call>
        <x:param select="string(.)">(10000,50000) != ($works/works/employee[1]/hours[1],$staff/staff/employee[6]/grade[1])</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(/works/employee[1]/hours[1]) != ()">
      <x:call>
        <x:param select="string(.)">(/works/employee[1]/hours[1]) != ()</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(/works/employee[1]/hours[1]) != 10000">
      <x:call>
        <x:param select="string(.)">(/works/employee[1]/hours[1]) != 10000</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(/works/employee[1]/hours[1]) != (50000)">
      <x:call>
        <x:param select="string(.)">(/works/employee[1]/hours[1]) != (50000)</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(/works/employee[1]/hours[1]) != (10000,50000)">
      <x:call>
        <x:param select="string(.)">(/works/employee[1]/hours[1]) != (10000,50000)</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(/works/employee[1]/hours[1]) != (/works/employee[1]/hours[1])">
      <x:call>
        <x:param select="string(.)">(/works/employee[1]/hours[1]) != (/works/employee[1]/hours[1])</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(/works/employee[1]/hours[1]) != (/works/employee[1]/hours[1],/works/employee[6]/hours[1])">
      <x:call>
        <x:param select="string(.)">(/works/employee[1]/hours[1]) != (/works/employee[1]/hours[1],/works/employee[6]/hours[1])</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="($works/works/employee[1]/hours[1]) != ($works/works/employee[1]/hours[1],$staff/staff/employee[6]/grade[1])">
      <x:call>
        <x:param select="string(.)">($works/works/employee[1]/hours[1]) != ($works/works/employee[1]/hours[1],$staff/staff/employee[6]/grade[1])</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(/works/employee[1]/hours[1],/works/employee[6]/hours[1]) != ()">
      <x:call>
        <x:param select="string(.)">(/works/employee[1]/hours[1],/works/employee[6]/hours[1]) != ()</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(/works/employee[1]/hours[1],/works/employee[6]/hours[1]) != 10000">
      <x:call>
        <x:param select="string(.)">(/works/employee[1]/hours[1],/works/employee[6]/hours[1]) != 10000</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(/works/employee[1]/hours[1],/works/employee[6]/hours[1]) != (50000)">
      <x:call>
        <x:param select="string(.)">(/works/employee[1]/hours[1],/works/employee[6]/hours[1]) != (50000)</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(/works/employee[1]/hours[1],/works/employee[6]/hours[1]) != (10000,50000)">
      <x:call>
        <x:param select="string(.)">(/works/employee[1]/hours[1],/works/employee[6]/hours[1]) != (10000,50000)</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(/works/employee[1]/hours[1],/works/employee[6]/hours[1]) != (/works/employee[1]/hours[1])">
      <x:call>
        <x:param select="string(.)">(/works/employee[1]/hours[1],/works/employee[6]/hours[1]) != (/works/employee[1]/hours[1])</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(/works/employee[1]/hours[1],/works/employee[6]/hours[1]) != (/works/employee[1]/hours[1],/works/employee[6]/hours[1])">
      <x:call>
        <x:param select="string(.)">(/works/employee[1]/hours[1],/works/employee[6]/hours[1]) != (/works/employee[1]/hours[1],/works/employee[6]/hours[1])</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="($works/works/employee[1]/hours[1],$works/works/employee[6]/hours[1]) != ($works/works/employee[1]/hours[1],$staff/staff/employee[6]/grade[1])">
      <x:call>
        <x:param select="string(.)">($works/works/employee[1]/hours[1],$works/works/employee[6]/hours[1]) != ($works/works/employee[1]/hours[1],$staff/staff/employee[6]/grade[1])</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="($works/works/employee[1]/hours[1],$staff/staff/employee[6]/hours[1]) != ()">
      <x:call>
        <x:param select="string(.)">($works/works/employee[1]/hours[1],$staff/staff/employee[6]/hours[1]) != ()</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="($works/works/employee[1]/hours[1],$staff/staff/employee[6]/hours[1]) != 10000">
      <x:call>
        <x:param select="string(.)">($works/works/employee[1]/hours[1],$staff/staff/employee[6]/hours[1]) != 10000</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="($works/works/employee[1]/hours[1],$staff/staff/employee[6]/hours[1]) != (50000)">
      <x:call>
        <x:param select="string(.)">($works/works/employee[1]/hours[1],$staff/staff/employee[6]/hours[1]) != (50000)</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="($works/works/employee[1]/hours[1],$staff/staff/employee[6]/hours[1]) != (10000,50000)">
      <x:call>
        <x:param select="string(.)">($works/works/employee[1]/hours[1],$staff/staff/employee[6]/hours[1]) != (10000,50000)</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="($works/works/employee[1]/hours[1],$staff/staff/employee[6]/hours[1]) != ($works/works/employee[1]/hours[1])">
      <x:call>
        <x:param select="string(.)">($works/works/employee[1]/hours[1],$staff/staff/employee[6]/hours[1]) != ($works/works/employee[1]/hours[1])</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="($works/works/employee[1]/hours[1],$staff/staff/employee[6]/hours[1]) != ($works/works/employee[1]/hours[1],$works/works/employee[6]/hours[1])">
      <x:call>
        <x:param select="string(.)">($works/works/employee[1]/hours[1],$staff/staff/employee[6]/hours[1]) != ($works/works/employee[1]/hours[1],$works/works/employee[6]/hours[1])</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="($works/works/employee[1]/hours[1],$staff/staff/employee[6]/hours[1]) != ($works/works/employee[1]/hours[1],$staff/staff/employee[6]/grade[1])">
      <x:call>
        <x:param select="string(.)">($works/works/employee[1]/hours[1],$staff/staff/employee[6]/hours[1]) != ($works/works/employee[1]/hours[1],$staff/staff/employee[6]/grade[1])</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(() != ()) eq false()">
      <x:call>
        <x:param select="string(.)">(() != ()) eq false()</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="not(() = 1 )">
      <x:call>
        <x:param select="string(.)">not(() = 1 )</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="not(() != () )">
      <x:call>
        <x:param select="string(.)">not(() != () )</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="not(1 != () )">
      <x:call>
        <x:param select="string(.)">not(1 != () )</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="not(() != 1 )">
      <x:call>
        <x:param select="string(.)">not(() != 1 )</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(1, 2) != (2, 3)">
      <x:call>
        <x:param select="string(.)">(1, 2) != (2, 3)</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="xs:untypedAtomic(&#34;2&#34;) != 1">
      <x:call>
        <x:param select="string(.)">xs:untypedAtomic("2") != 1</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="not(xs:untypedAtomic(&#34;1&#34;) != 1)">
      <x:call>
        <x:param select="string(.)">not(xs:untypedAtomic("1") != 1)</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="not(&#34;2&#34; = xs:untypedAtomic(&#34;1&#34;))">
      <x:call>
        <x:param select="string(.)">not("2" = xs:untypedAtomic("1"))</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="2 != xs:untypedAtomic(&#34;1&#34;)">
      <x:call>
        <x:param select="string(.)">2 != xs:untypedAtomic("1")</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="not(1 != xs:untypedAtomic(&#34;1&#34;))">
      <x:call>
        <x:param select="string(.)">not(1 != xs:untypedAtomic("1"))</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="count((0, timezone-from-time(current-time()))) != 0">
      <x:call>
        <x:param select="string(.)">count((0, timezone-from-time(current-time()))) != 0</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="&#34;a string&#34; != &#34;a stringDIFF&#34;">
      <x:call>
        <x:param select="string(.)">"a string" != "a stringDIFF"</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="not(&#34;a string&#34; != &#34;a string&#34;)">
      <x:call>
        <x:param select="string(.)">not("a string" != "a string")</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="xs:untypedAtomic(&#34;a string&#34;) != &#34;a stringDIFF&#34;">
      <x:call>
        <x:param select="string(.)">xs:untypedAtomic("a string") != "a stringDIFF"</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="&#34;a string&#34; != xs:untypedAtomic(&#34;a stringDIFF&#34;)">
      <x:call>
        <x:param select="string(.)">"a string" != xs:untypedAtomic("a stringDIFF")</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="not(&#34;a string&#34; != xs:untypedAtomic(&#34;a string&#34;))">
      <x:call>
        <x:param select="string(.)">not("a string" != xs:untypedAtomic("a string"))</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="not(xs:untypedAtomic(&#34;a string&#34;) != &#34;a string&#34;)">
      <x:call>
        <x:param select="string(.)">not(xs:untypedAtomic("a string") != "a string")</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="xs:untypedAtomic(&#34;true&#34;) != false()">
      <x:call>
        <x:param select="string(.)">xs:untypedAtomic("true") != false()</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="false() != xs:untypedAtomic(&#34;true&#34;)">
      <x:call>
        <x:param select="string(.)">false() != xs:untypedAtomic("true")</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="not(xs:untypedAtomic(&#34;false&#34;) != false())">
      <x:call>
        <x:param select="string(.)">not(xs:untypedAtomic("false") != false())</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="not(false() != xs:untypedAtomic(&#34;false&#34;))">
      <x:call>
        <x:param select="string(.)">not(false() != xs:untypedAtomic("false"))</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(1, 2, 3) != 1">
      <x:call>
        <x:param select="string(.)">(1, 2, 3) != 1</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(1, 2, 3) != 2">
      <x:call>
        <x:param select="string(.)">(1, 2, 3) != 2</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(1, 2, 3) != 3">
      <x:call>
        <x:param select="string(.)">(1, 2, 3) != 3</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="1 != 2">
      <x:call>
        <x:param select="string(.)">1 != 2</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="1 != (1, 2, 3)">
      <x:call>
        <x:param select="string(.)">1 != (1, 2, 3)</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="2 != (1, 2, 3)">
      <x:call>
        <x:param select="string(.)">2 != (1, 2, 3)</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="3 != (1, 2, 3)">
      <x:call>
        <x:param select="string(.)">3 != (1, 2, 3)</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="xs:untypedAtomic(&#34;three&#34;) != 3">
      <x:call>
        <x:param select="string(.)">xs:untypedAtomic("three") != 3</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="3 != xs:untypedAtomic(&#34;three&#34;)">
      <x:call>
        <x:param select="string(.)">3 != xs:untypedAtomic("three")</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="&#34;2&#34; != 1">
      <x:call>
        <x:param select="string(.)">"2" != 1</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="1 != &#34;2&#34;">
      <x:call>
        <x:param select="string(.)">1 != "2"</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="xs:untypedAtomic(&#34;falseERR&#34;) != false()">
      <x:call>
        <x:param select="string(.)">xs:untypedAtomic("falseERR") != false()</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="1 != &#34;1&#34;">
      <x:call>
        <x:param select="string(.)">1 != "1"</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="xs:string(&#34;false&#34;) != false()">
      <x:call>
        <x:param select="string(.)">xs:string("false") != false()</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="false() != xs:string(&#34;false&#34;)">
      <x:call>
        <x:param select="string(.)">false() != xs:string("false")</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="false() != xs:untypedAtomic(&#34;falseERR&#34;)">
      <x:call>
        <x:param select="string(.)">false() != xs:untypedAtomic("falseERR")</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="false() != xs:anyURI(&#34;example.com/&#34;)">
      <x:call>
        <x:param select="string(.)">false() != xs:anyURI("example.com/")</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="xs:anyURI(&#34;example.com/&#34;) != false()">
      <x:call>
        <x:param select="string(.)">xs:anyURI("example.com/") != false()</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario></x:scenario></x:description>