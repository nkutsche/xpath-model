<?xml version="1.0" encoding="UTF-8"?><x:description xmlns:nk="http://www.nkutsche.com/xpath-model" xmlns:x="http://www.jenitennison.com/xslt/xspec" stylesheet="../../../main/resources/xsl/xpath-model.xsl"><x:scenario label="/qt3tests-master/prod/GeneralComp.eq.xml"><x:call function="nk:xpath-model"/><x:scenario label="() = ()">
      <x:call>
        <x:param select="string(.)">() = ()</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="() = 10000">
      <x:call>
        <x:param select="string(.)">() = 10000</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="() = (50000)">
      <x:call>
        <x:param select="string(.)">() = (50000)</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="() = (10000,50000)">
      <x:call>
        <x:param select="string(.)">() = (10000,50000)</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="() = (/works/employee[1]/hours[1])">
      <x:call>
        <x:param select="string(.)">() = (/works/employee[1]/hours[1])</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="() = (/works/employee[1]/hours[1],/works/employee[6]/hours[1])">
      <x:call>
        <x:param select="string(.)">() = (/works/employee[1]/hours[1],/works/employee[6]/hours[1])</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="() = ($works/works/employee[1]/hours[1],$staff/staff/employee[6]/grade[1])">
      <x:call>
        <x:param select="string(.)">() = ($works/works/employee[1]/hours[1],$staff/staff/employee[6]/grade[1])</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="10000 = ()">
      <x:call>
        <x:param select="string(.)">10000 = ()</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="10000 = ()">
      <x:call>
        <x:param select="string(.)">10000 = ()</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="10000 = (10000,50000)">
      <x:call>
        <x:param select="string(.)">10000 = (10000,50000)</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="10000 = (/works/employee[1]/hours[1])">
      <x:call>
        <x:param select="string(.)">10000 = (/works/employee[1]/hours[1])</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="10000 = (/works/employee[1]/hours[1],/works/employee[6]/hours[1])">
      <x:call>
        <x:param select="string(.)">10000 = (/works/employee[1]/hours[1],/works/employee[6]/hours[1])</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="10000 = ($works/works/employee[1]/hours[1],$staff/staff/employee[6]/grade[1])">
      <x:call>
        <x:param select="string(.)">10000 = ($works/works/employee[1]/hours[1],$staff/staff/employee[6]/grade[1])</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(50000) = ()">
      <x:call>
        <x:param select="string(.)">(50000) = ()</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(50000) = 10000">
      <x:call>
        <x:param select="string(.)">(50000) = 10000</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(50000) = (50000)">
      <x:call>
        <x:param select="string(.)">(50000) = (50000)</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(50000) = (10000,50000)">
      <x:call>
        <x:param select="string(.)">(50000) = (10000,50000)</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(50000) = (/works/employee[1]/hours[1])">
      <x:call>
        <x:param select="string(.)">(50000) = (/works/employee[1]/hours[1])</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(50000) = (/works/employee[1]/hours[1],/works/employee[6]/hours[1])">
      <x:call>
        <x:param select="string(.)">(50000) = (/works/employee[1]/hours[1],/works/employee[6]/hours[1])</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(50000) = ($works/works/employee[1]/hours[1],$staff/staff/employee[6]/grade[1])">
      <x:call>
        <x:param select="string(.)">(50000) = ($works/works/employee[1]/hours[1],$staff/staff/employee[6]/grade[1])</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(10000,50000) = ()">
      <x:call>
        <x:param select="string(.)">(10000,50000) = ()</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(10000,50000) = 10000">
      <x:call>
        <x:param select="string(.)">(10000,50000) = 10000</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(10000,50000) = (50000)">
      <x:call>
        <x:param select="string(.)">(10000,50000) = (50000)</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(10000,50000) = (10000,50000)">
      <x:call>
        <x:param select="string(.)">(10000,50000) = (10000,50000)</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(10000,50000) = (/works/employee[1]/hours[1])">
      <x:call>
        <x:param select="string(.)">(10000,50000) = (/works/employee[1]/hours[1])</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(10000,50000) = (/works/employee[1]/hours[1],/works/employee[6]/hours[1])">
      <x:call>
        <x:param select="string(.)">(10000,50000) = (/works/employee[1]/hours[1],/works/employee[6]/hours[1])</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(10000,50000) = ($works/works/employee[1]/hours[1],$staff/staff/employee[6]/grade[1])">
      <x:call>
        <x:param select="string(.)">(10000,50000) = ($works/works/employee[1]/hours[1],$staff/staff/employee[6]/grade[1])</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(/works/employee[1]/hours[1]) = ()">
      <x:call>
        <x:param select="string(.)">(/works/employee[1]/hours[1]) = ()</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(/works/employee[1]/hours[1]) = 10000">
      <x:call>
        <x:param select="string(.)">(/works/employee[1]/hours[1]) = 10000</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(/works/employee[1]/hours[1]) = (50000)">
      <x:call>
        <x:param select="string(.)">(/works/employee[1]/hours[1]) = (50000)</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(/works/employee[1]/hours[1]) = (10000,50000)">
      <x:call>
        <x:param select="string(.)">(/works/employee[1]/hours[1]) = (10000,50000)</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(/works/employee[1]/hours[1]) = (/works/employee[1]/hours[1])">
      <x:call>
        <x:param select="string(.)">(/works/employee[1]/hours[1]) = (/works/employee[1]/hours[1])</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(/works/employee[1]/hours[1]) = (/works/employee[1]/hours[1],/works/employee[6]/hours[1])">
      <x:call>
        <x:param select="string(.)">(/works/employee[1]/hours[1]) = (/works/employee[1]/hours[1],/works/employee[6]/hours[1])</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="($works/works/employee[1]/hours[1]) = ($works/works/employee[1]/hours[1],$staff/staff/employee[6]/grade[1])">
      <x:call>
        <x:param select="string(.)">($works/works/employee[1]/hours[1]) = ($works/works/employee[1]/hours[1],$staff/staff/employee[6]/grade[1])</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(/works/employee[1]/hours[1],/works/employee[6]/hours[1]) = ()">
      <x:call>
        <x:param select="string(.)">(/works/employee[1]/hours[1],/works/employee[6]/hours[1]) = ()</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(/works/employee[1]/hours[1],/works/employee[6]/hours[1]) = 10000">
      <x:call>
        <x:param select="string(.)">(/works/employee[1]/hours[1],/works/employee[6]/hours[1]) = 10000</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(/works/employee[1]/hours[1],/works/employee[6]/hours[1]) = (50000)">
      <x:call>
        <x:param select="string(.)">(/works/employee[1]/hours[1],/works/employee[6]/hours[1]) = (50000)</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(/works/employee[1]/hours[1],/works/employee[6]/hours[1]) = (10000,50000)">
      <x:call>
        <x:param select="string(.)">(/works/employee[1]/hours[1],/works/employee[6]/hours[1]) = (10000,50000)</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(/works/employee[1]/hours[1],/works/employee[6]/hours[1]) = (/works/employee[1]/hours[1])">
      <x:call>
        <x:param select="string(.)">(/works/employee[1]/hours[1],/works/employee[6]/hours[1]) = (/works/employee[1]/hours[1])</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(/works/employee[1]/hours[1],/works/employee[6]/hours[1]) = (/works/employee[1]/hours[1],/works/employee[6]/hours[1])">
      <x:call>
        <x:param select="string(.)">(/works/employee[1]/hours[1],/works/employee[6]/hours[1]) = (/works/employee[1]/hours[1],/works/employee[6]/hours[1])</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="($works/works/employee[1]/hours[1],$works/works/employee[6]/hours[1]) = &#xA;         ($works/works/employee[1]/hours[1],$staff/staff/employee[6]/grade[1])">
      <x:call>
        <x:param select="string(.)">($works/works/employee[1]/hours[1],$works/works/employee[6]/hours[1]) = 
         ($works/works/employee[1]/hours[1],$staff/staff/employee[6]/grade[1])</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="($works/works/employee[1]/hours[1],$staff/staff/employee[6]/hours[1]) = ()">
      <x:call>
        <x:param select="string(.)">($works/works/employee[1]/hours[1],$staff/staff/employee[6]/hours[1]) = ()</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="($works/works/employee[1]/hours[1],$staff/staff/employee[6]/hours[1]) = 10000">
      <x:call>
        <x:param select="string(.)">($works/works/employee[1]/hours[1],$staff/staff/employee[6]/hours[1]) = 10000</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="($works/works/employee[1]/hours[1],$staff/staff/employee[6]/hours[1]) = (50000)">
      <x:call>
        <x:param select="string(.)">($works/works/employee[1]/hours[1],$staff/staff/employee[6]/hours[1]) = (50000)</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="($works/works/employee[1]/hours[1],$staff/staff/employee[6]/hours[1]) = (10000,50000)">
      <x:call>
        <x:param select="string(.)">($works/works/employee[1]/hours[1],$staff/staff/employee[6]/hours[1]) = (10000,50000)</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="($works/works/employee[1]/hours[1],$staff/staff/employee[6]/hours[1]) =&#xA;         ($works/works/employee[1]/hours[1])">
      <x:call>
        <x:param select="string(.)">($works/works/employee[1]/hours[1],$staff/staff/employee[6]/hours[1]) =
         ($works/works/employee[1]/hours[1])</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="($works/works/employee[1]/hours[1],$staff/staff/employee[6]/hours[1]) = ($works/works/employee[1]/hours[1],$works/works/employee[6]/hours[1])">
      <x:call>
        <x:param select="string(.)">($works/works/employee[1]/hours[1],$staff/staff/employee[6]/hours[1]) = ($works/works/employee[1]/hours[1],$works/works/employee[6]/hours[1])</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="($works/works/employee[1]/hours[1],$staff/staff/employee[6]/hours[1]) = ($works/works/employee[1]/hours[1],$staff/staff/employee[6]/grade[1])">
      <x:call>
        <x:param select="string(.)">($works/works/employee[1]/hours[1],$staff/staff/employee[6]/hours[1]) = ($works/works/employee[1]/hours[1],$staff/staff/employee[6]/grade[1])</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="not(() = ())">
      <x:call>
        <x:param select="string(.)">not(() = ())</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="not((() = ()))">
      <x:call>
        <x:param select="string(.)">not((() = ()))</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="not((() = 1))">
      <x:call>
        <x:param select="string(.)">not((() = 1))</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="not(1 = ())">
      <x:call>
        <x:param select="string(.)">not(1 = ())</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(1, 2) = (2, 3)">
      <x:call>
        <x:param select="string(.)">(1, 2) = (2, 3)</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(2, 3) = (3, 4)">
      <x:call>
        <x:param select="string(.)">(2, 3) = (3, 4)</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="not((1, 2) = (3, 4))">
      <x:call>
        <x:param select="string(.)">not((1, 2) = (3, 4))</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(xs:untypedAtomic(&#34;1&#34;), xs:untypedAtomic(&#34;2&#34;)) = (xs:untypedAtomic(&#34;2.0&#34;), 2.0)">
      <x:call>
        <x:param select="string(.)">(xs:untypedAtomic("1"), xs:untypedAtomic("2")) = (xs:untypedAtomic("2.0"), 2.0)</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="not((xs:untypedAtomic(&#34;1&#34;), xs:untypedAtomic(&#34;2&#34;)) = (xs:untypedAtomic(&#34;2.0&#34;), 3.0))">
      <x:call>
        <x:param select="string(.)">not((xs:untypedAtomic("1"), xs:untypedAtomic("2")) = (xs:untypedAtomic("2.0"), 3.0))</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="xs:untypedAtomic(&#34;1&#34;) = 1">
      <x:call>
        <x:param select="string(.)">xs:untypedAtomic("1") = 1</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="not(xs:untypedAtomic(&#34;2&#34;) = 1)">
      <x:call>
        <x:param select="string(.)">not(xs:untypedAtomic("2") = 1)</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="xs:untypedAtomic(&#34;1&#34;) = 1">
      <x:call>
        <x:param select="string(.)">xs:untypedAtomic("1") = 1</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="1 = xs:untypedAtomic(&#34;1&#34;)">
      <x:call>
        <x:param select="string(.)">1 = xs:untypedAtomic("1")</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="1 = xs:untypedAtomic(&#34;1&#34;)">
      <x:call>
        <x:param select="string(.)">1 = xs:untypedAtomic("1")</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="error() = 3">
      <x:call>
        <x:param select="string(.)">error() = 3</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(error(), 3) = 3">
      <x:call>
        <x:param select="string(.)">(error(), 3) = 3</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="3 = error()">
      <x:call>
        <x:param select="string(.)">3 = error()</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="3 = (error(), 3)">
      <x:call>
        <x:param select="string(.)">3 = (error(), 3)</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="count(remove(remove((current-time(), 1), 1), 1)) = 0">
      <x:call>
        <x:param select="string(.)">count(remove(remove((current-time(), 1), 1), 1)) = 0</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="not(0 = count((1, 2, timezone-from-time(current-time()))))">
      <x:call>
        <x:param select="string(.)">not(0 = count((1, 2, timezone-from-time(current-time()))))</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="0 != count((1, 2, timezone-from-time(current-time())))">
      <x:call>
        <x:param select="string(.)">0 != count((1, 2, timezone-from-time(current-time())))</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(xs:anyURI(&#34;example.com/&#34;), 1, QName(&#34;example.com&#34;, &#34;ncname&#34;), false(), xs:hexBinary(&#34;FF&#34;)) = (xs:anyURI(&#34;example.com/NOT&#34;), 0, QName(&#34;example.com&#34;, &#34;p:ncname&#34;), true(), xs:hexBinary(&#34;EF&#34;))">
      <x:call>
        <x:param select="string(.)">(xs:anyURI("example.com/"), 1, QName("example.com", "ncname"), false(), xs:hexBinary("FF")) = (xs:anyURI("example.com/NOT"), 0, QName("example.com", "p:ncname"), true(), xs:hexBinary("EF"))</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="&#34;a string&#34; = &#34;a string&#34;">
      <x:call>
        <x:param select="string(.)">"a string" = "a string"</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="xs:untypedAtomic(&#34;a string&#34;) = &#34;a string&#34;">
      <x:call>
        <x:param select="string(.)">xs:untypedAtomic("a string") = "a string"</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="&#34;a string&#34; = xs:untypedAtomic(&#34;a string&#34;)">
      <x:call>
        <x:param select="string(.)">"a string" = xs:untypedAtomic("a string")</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="not(xs:untypedAtomic(&#34;a string&#34;) = &#34;a stringDIFF&#34;)">
      <x:call>
        <x:param select="string(.)">not(xs:untypedAtomic("a string") = "a stringDIFF")</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="not(&#34;a string&#34; = xs:untypedAtomic(&#34;a stringDIFF&#34;))">
      <x:call>
        <x:param select="string(.)">not("a string" = xs:untypedAtomic("a stringDIFF"))</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="not(&#34;a string&#34; = &#34;a stringDIFF&#34;)">
      <x:call>
        <x:param select="string(.)">not("a string" = "a stringDIFF")</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="remove((6, &#34;a string&#34;), 1) = 6">
      <x:call>
        <x:param select="string(.)">remove((6, "a string"), 1) = 6</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="6 = remove((&#34;a string&#34;, 6), 2)">
      <x:call>
        <x:param select="string(.)">6 = remove(("a string", 6), 2)</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="remove((6, &#34;a string&#34;), 2) = xs:untypedAtomic(&#34;6&#34;)">
      <x:call>
        <x:param select="string(.)">remove((6, "a string"), 2) = xs:untypedAtomic("6")</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="xs:untypedAtomic(&#34;6&#34;) = remove((&#34;a string&#34;, 6), 1)">
      <x:call>
        <x:param select="string(.)">xs:untypedAtomic("6") = remove(("a string", 6), 1)</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(remove((xs:untypedAtomic(&#34;6&#34;), &#34;a string&#34;), 2)) = 6">
      <x:call>
        <x:param select="string(.)">(remove((xs:untypedAtomic("6"), "a string"), 2)) = 6</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="6 = (remove((&#34;a string&#34;, xs:untypedAtomic(&#34;6&#34;)), 1))">
      <x:call>
        <x:param select="string(.)">6 = (remove(("a string", xs:untypedAtomic("6")), 1))</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="1 = 1">
      <x:call>
        <x:param select="string(.)">1 = 1</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(1, 2, 3) = 1">
      <x:call>
        <x:param select="string(.)">(1, 2, 3) = 1</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(1, 2, 3) = 2">
      <x:call>
        <x:param select="string(.)">(1, 2, 3) = 2</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(1, 2, 3) = 3">
      <x:call>
        <x:param select="string(.)">(1, 2, 3) = 3</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="2 = (1, 2, 3)">
      <x:call>
        <x:param select="string(.)">2 = (1, 2, 3)</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="1 = (1, 2, 3)">
      <x:call>
        <x:param select="string(.)">1 = (1, 2, 3)</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="3 = (1, 2, 3)">
      <x:call>
        <x:param select="string(.)">3 = (1, 2, 3)</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="xs:untypedAtomic(&#34;false&#34;) = false()">
      <x:call>
        <x:param select="string(.)">xs:untypedAtomic("false") = false()</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="false() = xs:untypedAtomic(&#34;false&#34;)">
      <x:call>
        <x:param select="string(.)">false() = xs:untypedAtomic("false")</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="not(xs:untypedAtomic(&#34;true&#34;) = false())">
      <x:call>
        <x:param select="string(.)">not(xs:untypedAtomic("true") = false())</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(true() = xs:untypedAtomic(&#34;true&#34;))">
      <x:call>
        <x:param select="string(.)">(true() = xs:untypedAtomic("true"))</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="&#34;1&#34; = 1">
      <x:call>
        <x:param select="string(.)">"1" = 1</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="1 = &#34;1&#34;">
      <x:call>
        <x:param select="string(.)">1 = "1"</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="false() = 5">
      <x:call>
        <x:param select="string(.)">false() = 5</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="5 = false()">
      <x:call>
        <x:param select="string(.)">5 = false()</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="xs:untypedAtomic(&#34;three&#34;) = 3">
      <x:call>
        <x:param select="string(.)">xs:untypedAtomic("three") = 3</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="xs:string(&#34;false&#34;) = false()">
      <x:call>
        <x:param select="string(.)">xs:string("false") = false()</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="false() = xs:string(&#34;false&#34;)">
      <x:call>
        <x:param select="string(.)">false() = xs:string("false")</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="xs:untypedAtomic(&#34;falseERR&#34;) = false()">
      <x:call>
        <x:param select="string(.)">xs:untypedAtomic("falseERR") = false()</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(xs:untypedAtomic(&#34;1&#34;), xs:anyURI(&#34;example.com&#34;)) = (xs:untypedAtomic(&#34;2.0&#34;), 3.0)">
      <x:call>
        <x:param select="string(.)">(xs:untypedAtomic("1"), xs:anyURI("example.com")) = (xs:untypedAtomic("2.0"), 3.0)</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="false() = xs:untypedAtomic(&#34;falseERR&#34;)">
      <x:call>
        <x:param select="string(.)">false() = xs:untypedAtomic("falseERR")</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="3 = xs:untypedAtomic(&#34;three&#34;)">
      <x:call>
        <x:param select="string(.)">3 = xs:untypedAtomic("three")</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="xs:anyURI(&#34;example.com/&#34;) = false()">
      <x:call>
        <x:param select="string(.)">xs:anyURI("example.com/") = false()</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="false() = xs:anyURI(&#34;example.com/&#34;)">
      <x:call>
        <x:param select="string(.)">false() = xs:anyURI("example.com/")</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="xs:untypedAtomic(&#34;a string&#34;) = xs:untypedAtomic(&#34;a stringDIFF&#34;)">
      <x:call>
        <x:param select="string(.)">xs:untypedAtomic("a string") = xs:untypedAtomic("a stringDIFF")</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="xs:untypedAtomic(&#34;1&#34;) = xs:NCName(&#34;string&#34;)">
      <x:call>
        <x:param select="string(.)">xs:untypedAtomic("1") = xs:NCName("string")</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="xs:dayTimeDuration(&#34;P3DT08H34M12.143S&#34;) = xs:untypedAtomic(&#34;P3DT08H34M12.143S&#34;)">
      <x:call>
        <x:param select="string(.)">xs:dayTimeDuration("P3DT08H34M12.143S") = xs:untypedAtomic("P3DT08H34M12.143S")</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="xs:untypedAtomic(&#34;0&#34;) = xs:dayTimeDuration(&#34;PT0S&#34;)">
      <x:call>
        <x:param select="string(.)">xs:untypedAtomic("0") = xs:dayTimeDuration("PT0S")</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="xs:untypedAtomic(&#34;P1999Y10M&#34;) = xs:yearMonthDuration(&#34;P1999Y10M&#34;)">
      <x:call>
        <x:param select="string(.)">xs:untypedAtomic("P1999Y10M") = xs:yearMonthDuration("P1999Y10M")</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="xs:yearMonthDuration(&#34;P1999Y&#34;) = xs:untypedAtomic(&#34;1999&#34;)">
      <x:call>
        <x:param select="string(.)">xs:yearMonthDuration("P1999Y") = xs:untypedAtomic("1999")</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="((true() = true()) = true()) = true()">
      <x:call>
        <x:param select="string(.)">((true() = true()) = true()) = true()</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario></x:scenario></x:description>