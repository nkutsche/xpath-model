<?xml version="1.0" encoding="UTF-8"?><x:description xmlns:nk="http://www.nkutsche.com/xpath-model" xmlns:x="http://www.jenitennison.com/xslt/xspec" stylesheet="../../../main/resources/xsl/xpath-model.xsl"><x:scenario label="/qt3tests-master/prod/IfExpr.xml"><x:call function="nk:xpath-model"/><x:scenario label="if ( /Root/Customers[1]/@CustomerID = 'ALFKI' and /Root/Customers[1]/FullAddress/City = 'Berlin') then &#34;pass&#34; else &#34;fail&#34;">
      <x:call>
        <x:param select="string(.)">if ( /Root/Customers[1]/@CustomerID = 'ALFKI' and /Root/Customers[1]/FullAddress/City = 'Berlin') then "pass" else "fail"</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="if (/Root/Customers[1]/@CustomerID = 'ALFKI' or /Root/Customers[1]/FullAddress/City = 'Non-Existent') then &#34;pass&#34; else &#34;fail&#34;">
      <x:call>
        <x:param select="string(.)">if (/Root/Customers[1]/@CustomerID = 'ALFKI' or /Root/Customers[1]/FullAddress/City = 'Non-Existent') then "pass" else "fail"</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="if (2 != 4) then 1 else 0">
      <x:call>
        <x:param select="string(.)">if (2 != 4) then 1 else 0</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="( if (3 != 2) then 16 else 0 ) + ( if (8 = 7) then 4 else 1 )">
      <x:call>
        <x:param select="string(.)">( if (3 != 2) then 16 else 0 ) + ( if (8 = 7) then 4 else 1 )</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(if (3 != 2) then 16 else 0) + (if (8 = 7) then 4 else 1)">
      <x:call>
        <x:param select="string(.)">(if (3 != 2) then 16 else 0) + (if (8 = 7) then 4 else 1)</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(//Folder)[1]/File[ if ( ./@name='File00000000000' ) then 2 else true() ]/FileName">
      <x:call>
        <x:param select="string(.)">(//Folder)[1]/File[ if ( ./@name='File00000000000' ) then 2 else true() ]/FileName</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="for $file in (//Folder)[1]/File return if( $file/FileName='File00000000000' ) then $file/FileName else data( $file/FileName )">
      <x:call>
        <x:param select="string(.)">for $file in (//Folder)[1]/File return if( $file/FileName='File00000000000' ) then $file/FileName else data( $file/FileName )</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="for $file in (//Folder)[1]/File return if( $file/FileName='File00000000004' ) then 1 else data( $file/FileName )">
      <x:call>
        <x:param select="string(.)">for $file in (//Folder)[1]/File return if( $file/FileName='File00000000004' ) then 1 else data( $file/FileName )</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="if( false() ) then /Folder[1] cast as xs:double ? else 10 cast as xs:double ?">
      <x:call>
        <x:param select="string(.)">if( false() ) then /Folder[1] cast as xs:double ? else 10 cast as xs:double ?</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="if( true() ) then 10 cast as xs:double ? else /Folder[1] cast as xs:double ?">
      <x:call>
        <x:param select="string(.)">if( true() ) then 10 cast as xs:double ? else /Folder[1] cast as xs:double ?</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="if (doc-available('nodocument.xml')) then doc('nodocument.xml') else 10 cast as xs:double">
      <x:call>
        <x:param select="string(.)">if (doc-available('nodocument.xml')) then doc('nodocument.xml') else 10 cast as xs:double</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(if(2) then 1 else 0) eq 1">
      <x:call>
        <x:param select="string(.)">(if(2) then 1 else 0) eq 1</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="if(()) then false() else true()">
      <x:call>
        <x:param select="string(.)">if(()) then false() else true()</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(if((1, current-time())[1] treat as xs:integer) then true() else false()) eq true()">
      <x:call>
        <x:param select="string(.)">(if((1, current-time())[1] treat as xs:integer) then true() else false()) eq true()</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(if(boolean((1, current-time())[1] treat as xs:integer)) then true() else false()) eq true()">
      <x:call>
        <x:param select="string(.)">(if(boolean((1, current-time())[1] treat as xs:integer)) then true() else false()) eq true()</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="if((1, 2, 3, hours-from-time(current-time()))[1]) then true() else false()">
      <x:call>
        <x:param select="string(.)">if((1, 2, 3, hours-from-time(current-time()))[1]) then true() else false()</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="string(if(boolean((1, current-time())[1] treat as xs:integer)) then true() else false()) eq &#34;true&#34;">
      <x:call>
        <x:param select="string(.)">string(if(boolean((1, current-time())[1] treat as xs:integer)) then true() else false()) eq "true"</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(if(current-time()) then 1 else 0) eq 1">
      <x:call>
        <x:param select="string(.)">(if(current-time()) then 1 else 0) eq 1</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="1 eq (if(xs:anyURI(&#34;example.com/&#34;)) then 1 else 0)">
      <x:call>
        <x:param select="string(.)">1 eq (if(xs:anyURI("example.com/")) then 1 else 0)</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="0 eq (if(xs:anyURI(&#34;&#34;)) then 1 else 0)">
      <x:call>
        <x:param select="string(.)">0 eq (if(xs:anyURI("")) then 1 else 0)</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="if(count((1, 2, 3, current-time(), 4))) then true() else 4">
      <x:call>
        <x:param select="string(.)">if(count((1, 2, 3, current-time(), 4))) then true() else 4</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="if(not(count(remove((1, 2, 3, current-time()), 1)))) then 3 else true()">
      <x:call>
        <x:param select="string(.)">if(not(count(remove((1, 2, 3, current-time()), 1)))) then 3 else true()</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="if(boolean((1, 2, 3, current-time())[1] treat as xs:integer)) then true() else 4">
      <x:call>
        <x:param select="string(.)">if(boolean((1, 2, 3, current-time())[1] treat as xs:integer)) then true() else 4</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="if(//(employee[location = &#34;Denver&#34;]/ancestor::*)) then 1 else 3">
      <x:call>
        <x:param select="string(.)">if(//(employee[location = "Denver"]/ancestor::*)) then 1 else 3</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="if (1) then 1 else if (1) then 1 else if (1) then 1 else if (1) then 1 else if (1) then 1 else if (1) then 1 else if (1) then 1 else if (1) then 1 else if (1) then 1 else if (1) then 1 else if (1) then 1 else if (1) then 1 else if (1) then 1 else if (1) then 1 else if (1) then 1 else if (1) then 1 else if (1) then 1 else if (1) then 1 else if (1) then 1 else if (1) then 1 else if (1) then 1 else if (1) then 1 else if (1) then 1 else if (1) then 1 else if (1) then 1 else if (1) then 1 else if (1) then 1 else if (1) then 1 else ()">
      <x:call>
        <x:param select="string(.)">if (1) then 1 else if (1) then 1 else if (1) then 1 else if (1) then 1 else if (1) then 1 else if (1) then 1 else if (1) then 1 else if (1) then 1 else if (1) then 1 else if (1) then 1 else if (1) then 1 else if (1) then 1 else if (1) then 1 else if (1) then 1 else if (1) then 1 else if (1) then 1 else if (1) then 1 else if (1) then 1 else if (1) then 1 else if (1) then 1 else if (1) then 1 else if (1) then 1 else if (1) then 1 else if (1) then 1 else if (1) then 1 else if (1) then 1 else if (1) then 1 else if (1) then 1 else ()</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario></x:scenario></x:description>