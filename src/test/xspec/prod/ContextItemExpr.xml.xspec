<?xml version="1.0" encoding="UTF-8"?><x:description xmlns:nk="http://www.nkutsche.com/xpath-model" xmlns:x="http://www.jenitennison.com/xslt/xspec" stylesheet="../../../main/resources/xsl/xpath-model.xsl"><x:scenario label="/qt3tests-master/prod/ContextItemExpr.xml"><x:call function="nk:xpath-model"/><x:scenario label="for $var in /works/employee[1] return $var/xs:string(exactly-one(empnum))">
      <x:call>
        <x:param select="string(.)">for $var in /works/employee[1] return $var/xs:string(exactly-one(empnum))</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="for $var in (/works/employee[1]) return $var/xs:integer(exactly-one(hours))">
      <x:call>
        <x:param select="string(.)">for $var in (/works/employee[1]) return $var/xs:integer(exactly-one(hours))</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="for $var in (/works/employee[1]) return $var/xs:decimal(exactly-one(hours))">
      <x:call>
        <x:param select="string(.)">for $var in (/works/employee[1]) return $var/xs:decimal(exactly-one(hours))</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="for $var in /works/employee[1] return $var/xs:float(exactly-one(hours))">
      <x:call>
        <x:param select="string(.)">for $var in /works/employee[1] return $var/xs:float(exactly-one(hours))</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="for $var in (/works/employee[1]) return $var/xs:double(exactly-one(hours))">
      <x:call>
        <x:param select="string(.)">for $var in (/works/employee[1]) return $var/xs:double(exactly-one(hours))</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="for $var in (/works/employee[1]) return $var/xs:boolean(exactly-one(hours) - 39)">
      <x:call>
        <x:param select="string(.)">for $var in (/works/employee[1]) return $var/xs:boolean(exactly-one(hours) - 39)</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="for $var in (/works/employee[1]) return $var/fn:not(xs:boolean(exactly-one(hours) - 39))">
      <x:call>
        <x:param select="string(.)">for $var in (/works/employee[1]) return $var/fn:not(xs:boolean(exactly-one(hours) - 39))</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="for $var in (/works/employee[1]) return $var/fn:sum((hours,hours))">
      <x:call>
        <x:param select="string(.)">for $var in (/works/employee[1]) return $var/fn:sum((hours,hours))</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="for $var in (/works/employee[1]) return $var/(exactly-one(hours) + exactly-one(hours))">
      <x:call>
        <x:param select="string(.)">for $var in (/works/employee[1]) return $var/(exactly-one(hours) + exactly-one(hours))</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="for $var in (/works/employee[1]) return $var/(exactly-one(hours) - exactly-one(hours))">
      <x:call>
        <x:param select="string(.)">for $var in (/works/employee[1]) return $var/(exactly-one(hours) - exactly-one(hours))</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="for $var in (/works/employee[1]) return $var/(exactly-one(hours) * exactly-one(hours))">
      <x:call>
        <x:param select="string(.)">for $var in (/works/employee[1]) return $var/(exactly-one(hours) * exactly-one(hours))</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="for $var in (/works/employee[1]) return $var/(exactly-one(hours) mod exactly-one(hours))">
      <x:call>
        <x:param select="string(.)">for $var in (/works/employee[1]) return $var/(exactly-one(hours) mod exactly-one(hours))</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="for $var in (/works/employee[1]) return $var/(exactly-one(hours) div exactly-one(hours))">
      <x:call>
        <x:param select="string(.)">for $var in (/works/employee[1]) return $var/(exactly-one(hours) div exactly-one(hours))</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="for $var in (/works/employee[1]) return $var/(exactly-one(hours) idiv exactly-one(hours))">
      <x:call>
        <x:param select="string(.)">for $var in (/works/employee[1]) return $var/(exactly-one(hours) idiv exactly-one(hours))</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="for $var in (/works/employee[1]) return $var/(xs:boolean(exactly-one(hours) - 39) and xs:boolean(exactly-one(hours) - 39))">
      <x:call>
        <x:param select="string(.)">for $var in (/works/employee[1]) return $var/(xs:boolean(exactly-one(hours) - 39) and xs:boolean(exactly-one(hours) - 39))</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="for $var in (/works/employee[1]) return $var/(xs:boolean(exactly-one(hours) - 39) or xs:boolean(exactly-one(hours) - 39))">
      <x:call>
        <x:param select="string(.)">for $var in (/works/employee[1]) return $var/(xs:boolean(exactly-one(hours) - 39) or xs:boolean(exactly-one(hours) - 39))</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="for $var in (/works/employee[1]) return $var/fn:string-length(exactly-one(hours))">
      <x:call>
        <x:param select="string(.)">for $var in (/works/employee[1]) return $var/fn:string-length(exactly-one(hours))</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="for $var in (/works/employee[1]) return $var/fn:avg((hours,hours,hours))">
      <x:call>
        <x:param select="string(.)">for $var in (/works/employee[1]) return $var/fn:avg((hours,hours,hours))</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="for $var in (/works/employee[1]) return $var/fn:min((hours,hours,22))">
      <x:call>
        <x:param select="string(.)">for $var in (/works/employee[1]) return $var/fn:min((hours,hours,22))</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="for $var in (/works/employee[1]) return $var/fn:max((hours,exactly-one(hours) + 1,22))">
      <x:call>
        <x:param select="string(.)">for $var in (/works/employee[1]) return $var/fn:max((hours,exactly-one(hours) + 1,22))</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="./works/employee[1]">
      <x:call>
        <x:param select="string(.)">./works/employee[1]</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="./works/employee[1]">
      <x:call>
        <x:param select="string(.)">./works/employee[1]</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="works/employee[1]">
      <x:call>
        <x:param select="string(.)">works/employee[1]</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(&#34;A&#34;,&#34;B&#34;,&#34;C&#34;)[xs:string(.)]">
      <x:call>
        <x:param select="string(.)">("A","B","C")[xs:string(.)]</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(1,2,3)[xs:integer(.)]">
      <x:call>
        <x:param select="string(.)">(1,2,3)[xs:integer(.)]</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(1,2,3)[xs:decimal(.)]">
      <x:call>
        <x:param select="string(.)">(1,2,3)[xs:decimal(.)]</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(1,2,3)[xs:float(.)]">
      <x:call>
        <x:param select="string(.)">(1,2,3)[xs:float(.)]</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(1,2,3)[xs:double(.)]">
      <x:call>
        <x:param select="string(.)">(1,2,3)[xs:double(.)]</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(fn:true(),fn:false(),fn:true())[xs:boolean(.)]">
      <x:call>
        <x:param select="string(.)">(fn:true(),fn:false(),fn:true())[xs:boolean(.)]</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(fn:false(),fn:true(),fn:false())[fn:not(xs:boolean(.))]">
      <x:call>
        <x:param select="string(.)">(fn:false(),fn:true(),fn:false())[fn:not(xs:boolean(.))]</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="fn:count(((),(),())[xs:string(.)])">
      <x:call>
        <x:param select="string(.)">fn:count(((),(),())[xs:string(.)])</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(1,2,3)[(. + .) gt 1]">
      <x:call>
        <x:param select="string(.)">(1,2,3)[(. + .) gt 1]</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(3,4,5)[(xs:integer(5) - xs:integer(.)) gt 1]">
      <x:call>
        <x:param select="string(.)">(3,4,5)[(xs:integer(5) - xs:integer(.)) gt 1]</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(3,4,5)[(xs:integer(.) * xs:integer(.)) gt 2]">
      <x:call>
        <x:param select="string(.)">(3,4,5)[(xs:integer(.) * xs:integer(.)) gt 2]</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(6,10,14)[(xs:integer(.) mod xs:integer(3)) gt 1]">
      <x:call>
        <x:param select="string(.)">(6,10,14)[(xs:integer(.) mod xs:integer(3)) gt 1]</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(6,10,14)[(xs:integer(.) div xs:integer(3)) gt 2]">
      <x:call>
        <x:param select="string(.)">(6,10,14)[(xs:integer(.) div xs:integer(3)) gt 2]</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(6,10,14)[(xs:integer(.) idiv xs:integer(3)) gt 2]">
      <x:call>
        <x:param select="string(.)">(6,10,14)[(xs:integer(.) idiv xs:integer(3)) gt 2]</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(fn:true(),fn:false(),fn:true())[xs:boolean(.) and xs:boolean(.)]">
      <x:call>
        <x:param select="string(.)">(fn:true(),fn:false(),fn:true())[xs:boolean(.) and xs:boolean(.)]</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(fn:true(),fn:false(),fn:true())[xs:boolean(.) or xs:boolean(.)]">
      <x:call>
        <x:param select="string(.)">(fn:true(),fn:false(),fn:true())[xs:boolean(.) or xs:boolean(.)]</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(&#34;ABC&#34;, &#34;DEF&#34;,&#34;A&#34;)[fn:string-length(.) gt 2]">
      <x:call>
        <x:param select="string(.)">("ABC", "DEF","A")[fn:string-length(.) gt 2]</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(1,2,3)[fn:avg((.,2,3)) gt 2]">
      <x:call>
        <x:param select="string(.)">(1,2,3)[fn:avg((.,2,3)) gt 2]</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(1,2,3)[fn:min((.,2)) eq 2]">
      <x:call>
        <x:param select="string(.)">(1,2,3)[fn:min((.,2)) eq 2]</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(1,2,3)[fn:min((.,3)) eq 3]">
      <x:call>
        <x:param select="string(.)">(1,2,3)[fn:min((.,3)) eq 3]</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario></x:scenario></x:description>