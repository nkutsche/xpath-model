<?xml version="1.0" encoding="UTF-8"?><x:description xmlns:nk="http://www.nkutsche.com/xpath-model" xmlns:x="http://www.jenitennison.com/xslt/xspec" stylesheet="../../../main/resources/xsl/xpath-model.xsl"><x:scenario label="generic-test" shared="yes">
    <x:call function="nk:xpath-model">
      <x:param select="$expr"/>
    </x:call>
    <x:expect label="result should be valid">
      <expr>...</expr>
    </x:expect>
  </x:scenario><x:scenario>
      <x:label>for $var in /works/employee[1] return $var/xs:string(exactly-one(empnum))</x:label>
      <x:variable name="expr" as="xs:string">for $var in /works/employee[1] return $var/xs:string(exactly-one(empnum))</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>for $var in (/works/employee[1]) return $var/xs:integer(exactly-one(hours))</x:label>
      <x:variable name="expr" as="xs:string">for $var in (/works/employee[1]) return $var/xs:integer(exactly-one(hours))</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>for $var in (/works/employee[1]) return $var/xs:decimal(exactly-one(hours))</x:label>
      <x:variable name="expr" as="xs:string">for $var in (/works/employee[1]) return $var/xs:decimal(exactly-one(hours))</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>for $var in /works/employee[1] return $var/xs:float(exactly-one(hours))</x:label>
      <x:variable name="expr" as="xs:string">for $var in /works/employee[1] return $var/xs:float(exactly-one(hours))</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>for $var in (/works/employee[1]) return $var/xs:double(exactly-one(hours))</x:label>
      <x:variable name="expr" as="xs:string">for $var in (/works/employee[1]) return $var/xs:double(exactly-one(hours))</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>for $var in (/works/employee[1]) return $var/xs:boolean(exactly-one(hours) - 39)</x:label>
      <x:variable name="expr" as="xs:string">for $var in (/works/employee[1]) return $var/xs:boolean(exactly-one(hours) - 39)</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>for $var in (/works/employee[1]) return $var/fn:not(xs:boolean(exactly-one(hours) - 39))</x:label>
      <x:variable name="expr" as="xs:string">for $var in (/works/employee[1]) return $var/fn:not(xs:boolean(exactly-one(hours) - 39))</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>for $var in (/works/employee[1]) return $var/fn:sum((hours,hours))</x:label>
      <x:variable name="expr" as="xs:string">for $var in (/works/employee[1]) return $var/fn:sum((hours,hours))</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>for $var in (/works/employee[1]) return $var/(exactly-one(hours) + exactly-one(hours))</x:label>
      <x:variable name="expr" as="xs:string">for $var in (/works/employee[1]) return $var/(exactly-one(hours) + exactly-one(hours))</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>for $var in (/works/employee[1]) return $var/(exactly-one(hours) - exactly-one(hours))</x:label>
      <x:variable name="expr" as="xs:string">for $var in (/works/employee[1]) return $var/(exactly-one(hours) - exactly-one(hours))</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>for $var in (/works/employee[1]) return $var/(exactly-one(hours) * exactly-one(hours))</x:label>
      <x:variable name="expr" as="xs:string">for $var in (/works/employee[1]) return $var/(exactly-one(hours) * exactly-one(hours))</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>for $var in (/works/employee[1]) return $var/(exactly-one(hours) mod exactly-one(hours))</x:label>
      <x:variable name="expr" as="xs:string">for $var in (/works/employee[1]) return $var/(exactly-one(hours) mod exactly-one(hours))</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>for $var in (/works/employee[1]) return $var/(exactly-one(hours) div exactly-one(hours))</x:label>
      <x:variable name="expr" as="xs:string">for $var in (/works/employee[1]) return $var/(exactly-one(hours) div exactly-one(hours))</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>for $var in (/works/employee[1]) return $var/(exactly-one(hours) idiv exactly-one(hours))</x:label>
      <x:variable name="expr" as="xs:string">for $var in (/works/employee[1]) return $var/(exactly-one(hours) idiv exactly-one(hours))</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>for $var in (/works/employee[1]) return $var/(xs:boolean(exactly-one(hours) - 39) and xs:boolean(exactly-one(hours) - 39))</x:label>
      <x:variable name="expr" as="xs:string">for $var in (/works/employee[1]) return $var/(xs:boolean(exactly-one(hours) - 39) and xs:boolean(exactly-one(hours) - 39))</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>for $var in (/works/employee[1]) return $var/(xs:boolean(exactly-one(hours) - 39) or xs:boolean(exactly-one(hours) - 39))</x:label>
      <x:variable name="expr" as="xs:string">for $var in (/works/employee[1]) return $var/(xs:boolean(exactly-one(hours) - 39) or xs:boolean(exactly-one(hours) - 39))</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>for $var in (/works/employee[1]) return $var/fn:string-length(exactly-one(hours))</x:label>
      <x:variable name="expr" as="xs:string">for $var in (/works/employee[1]) return $var/fn:string-length(exactly-one(hours))</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>for $var in (/works/employee[1]) return $var/fn:avg((hours,hours,hours))</x:label>
      <x:variable name="expr" as="xs:string">for $var in (/works/employee[1]) return $var/fn:avg((hours,hours,hours))</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>for $var in (/works/employee[1]) return $var/fn:min((hours,hours,22))</x:label>
      <x:variable name="expr" as="xs:string">for $var in (/works/employee[1]) return $var/fn:min((hours,hours,22))</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>for $var in (/works/employee[1]) return $var/fn:max((hours,exactly-one(hours) + 1,22))</x:label>
      <x:variable name="expr" as="xs:string">for $var in (/works/employee[1]) return $var/fn:max((hours,exactly-one(hours) + 1,22))</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>./works/employee[1]</x:label>
      <x:variable name="expr" as="xs:string">./works/employee[1]</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>./works/employee[1]</x:label>
      <x:variable name="expr" as="xs:string">./works/employee[1]</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>works/employee[1]</x:label>
      <x:variable name="expr" as="xs:string">works/employee[1]</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>("A","B","C")[xs:string(.)]</x:label>
      <x:variable name="expr" as="xs:string">("A","B","C")[xs:string(.)]</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>(1,2,3)[xs:integer(.)]</x:label>
      <x:variable name="expr" as="xs:string">(1,2,3)[xs:integer(.)]</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>(1,2,3)[xs:decimal(.)]</x:label>
      <x:variable name="expr" as="xs:string">(1,2,3)[xs:decimal(.)]</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>(1,2,3)[xs:float(.)]</x:label>
      <x:variable name="expr" as="xs:string">(1,2,3)[xs:float(.)]</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>(1,2,3)[xs:double(.)]</x:label>
      <x:variable name="expr" as="xs:string">(1,2,3)[xs:double(.)]</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>(fn:true(),fn:false(),fn:true())[xs:boolean(.)]</x:label>
      <x:variable name="expr" as="xs:string">(fn:true(),fn:false(),fn:true())[xs:boolean(.)]</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>(fn:false(),fn:true(),fn:false())[fn:not(xs:boolean(.))]</x:label>
      <x:variable name="expr" as="xs:string">(fn:false(),fn:true(),fn:false())[fn:not(xs:boolean(.))]</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>fn:count(((),(),())[xs:string(.)])</x:label>
      <x:variable name="expr" as="xs:string">fn:count(((),(),())[xs:string(.)])</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>(1,2,3)[(. + .) gt 1]</x:label>
      <x:variable name="expr" as="xs:string">(1,2,3)[(. + .) gt 1]</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>(3,4,5)[(xs:integer(5) - xs:integer(.)) gt 1]</x:label>
      <x:variable name="expr" as="xs:string">(3,4,5)[(xs:integer(5) - xs:integer(.)) gt 1]</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>(3,4,5)[(xs:integer(.) * xs:integer(.)) gt 2]</x:label>
      <x:variable name="expr" as="xs:string">(3,4,5)[(xs:integer(.) * xs:integer(.)) gt 2]</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>(6,10,14)[(xs:integer(.) mod xs:integer(3)) gt 1]</x:label>
      <x:variable name="expr" as="xs:string">(6,10,14)[(xs:integer(.) mod xs:integer(3)) gt 1]</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>(6,10,14)[(xs:integer(.) div xs:integer(3)) gt 2]</x:label>
      <x:variable name="expr" as="xs:string">(6,10,14)[(xs:integer(.) div xs:integer(3)) gt 2]</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>(6,10,14)[(xs:integer(.) idiv xs:integer(3)) gt 2]</x:label>
      <x:variable name="expr" as="xs:string">(6,10,14)[(xs:integer(.) idiv xs:integer(3)) gt 2]</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>(fn:true(),fn:false(),fn:true())[xs:boolean(.) and xs:boolean(.)]</x:label>
      <x:variable name="expr" as="xs:string">(fn:true(),fn:false(),fn:true())[xs:boolean(.) and xs:boolean(.)]</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>(fn:true(),fn:false(),fn:true())[xs:boolean(.) or xs:boolean(.)]</x:label>
      <x:variable name="expr" as="xs:string">(fn:true(),fn:false(),fn:true())[xs:boolean(.) or xs:boolean(.)]</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>("ABC", "DEF","A")[fn:string-length(.) gt 2]</x:label>
      <x:variable name="expr" as="xs:string">("ABC", "DEF","A")[fn:string-length(.) gt 2]</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>(1,2,3)[fn:avg((.,2,3)) gt 2]</x:label>
      <x:variable name="expr" as="xs:string">(1,2,3)[fn:avg((.,2,3)) gt 2]</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>(1,2,3)[fn:min((.,2)) eq 2]</x:label>
      <x:variable name="expr" as="xs:string">(1,2,3)[fn:min((.,2)) eq 2]</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>(1,2,3)[fn:min((.,3)) eq 3]</x:label>
      <x:variable name="expr" as="xs:string">(1,2,3)[fn:min((.,3)) eq 3]</x:variable>
      <x:like label="generic-test"/>
    </x:scenario></x:description>