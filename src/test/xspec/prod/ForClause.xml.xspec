<?xml version="1.0" encoding="UTF-8"?><x:description xmlns:nk="http://www.nkutsche.com/xpath-model" xmlns:x="http://www.jenitennison.com/xslt/xspec" stylesheet="../../../main/resources/xsl/xpath-model.xsl"><x:scenario label="generic-test" shared="yes">
    <x:call function="nk:xpath-model">
      <x:param select="$expr"/>
    </x:call>
    <x:expect label="result should be valid">
      <expr>...</expr>
    </x:expect>
  </x:scenario><x:scenario>
      <x:label>for $a in ("test", "test1", "test2") return $a</x:label>
      <x:variable name="expr" as="xs:string">for $a in ("test", "test1", "test2") return $a</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>for $f in /MyComputer//File[@creation_date="08/06/00"]/SecurityObject/Denies/Deny[security/right] return $f/../../@name/string()</x:label>
      <x:variable name="expr" as="xs:string">for $f in /MyComputer//File[@creation_date="08/06/00"]/SecurityObject/Denies/Deny[security/right] return $f/../../@name/string()</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>for $AaBbCc.-_Dd in /MyComputer/Drive1/Folder return $AaBbCc.-_Dd/FolderName</x:label>
      <x:variable name="expr" as="xs:string">for $AaBbCc.-_Dd in /MyComputer/Drive1/Folder return $AaBbCc.-_Dd/FolderName</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>for $a in $a/* return $a</x:label>
      <x:variable name="expr" as="xs:string">for $a in $a/* return $a</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>for $fileName in for $file in //Folder/File return $file/FileName return string( $fileName )</x:label>
      <x:variable name="expr" as="xs:string">for $fileName in for $file in //Folder/File return $file/FileName return string( $fileName )</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>for $fileName in //File/FileName, 
            $folderName in //Folder[contains(description, 'fren')]/FolderName 
        return ($folderName, $fileName)</x:label>
      <x:variable name="expr" as="xs:string">for $fileName in //File/FileName, 
            $folderName in //Folder[contains(description, 'fren')]/FolderName 
        return ($folderName, $fileName)</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>for $folder in //Folder return for $file in $folder/File return string( $file/FileName[1] )</x:label>
      <x:variable name="expr" as="xs:string">for $folder in //Folder return for $file in $folder/File return string( $file/FileName[1] )</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>for $folder in //Folder, $index in (1, 2, 3) return $folder/File[$index]/FileName</x:label>
      <x:variable name="expr" as="xs:string">for $folder in //Folder, $index in (1, 2, 3) return $folder/File[$index]/FileName</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>for $i in (1, 2), $j in (3, 4) return ($i, $j)</x:label>
      <x:variable name="expr" as="xs:string">for $i in (1, 2), $j in (3, 4) return ($i, $j)</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>for $file in (//Folder)[1]/File, $file in (//Folder)[2]/File return $file/FileName</x:label>
      <x:variable name="expr" as="xs:string">for $file in (//Folder)[1]/File, $file in (//Folder)[2]/File return $file/FileName</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>for $var in (1,2), $var in (2,2) return $var * $var</x:label>
      <x:variable name="expr" as="xs:string">for $var in (1,2), $var in (2,2) return $var * $var</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>deep-equal(1 to 5, (for $i in (1,2,3,4,5) return $i))</x:label>
      <x:variable name="expr" as="xs:string">deep-equal(1 to 5, (for $i in (1,2,3,4,5) return $i))</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>3 eq (for $foo in 1 return 3)</x:label>
      <x:variable name="expr" as="xs:string">3 eq (for $foo in 1 return 3)</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>1 eq (for $foo in 1 return $foo)</x:label>
      <x:variable name="expr" as="xs:string">1 eq (for $foo in 1 return $foo)</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>2 eq (for $foo in 1 return $foo + 1)</x:label>
      <x:variable name="expr" as="xs:string">2 eq (for $foo in 1 return $foo + 1)</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>3 eq (for $foo in 1 return for $foo in 3 return $foo)</x:label>
      <x:variable name="expr" as="xs:string">3 eq (for $foo in 1 return for $foo in 3 return $foo)</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>deep-equal((for $var in (1, 2, 3) return $var), (1, 2, 3))</x:label>
      <x:variable name="expr" as="xs:string">deep-equal((for $var in (1, 2, 3) return $var), (1, 2, 3))</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>deep-equal((2, 2), (for $foo in (1, 1) return 1 + $foo))</x:label>
      <x:variable name="expr" as="xs:string">deep-equal((2, 2), (for $foo in (1, 1) return 1 + $foo))</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>4 eq (for $foo in 1, $bar in 2, $moo in 3 return 4)</x:label>
      <x:variable name="expr" as="xs:string">4 eq (for $foo in 1, $bar in 2, $moo in 3 return 4)</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>3 eq (for $foo in 1 return for $bar in 2 return $bar + $foo)</x:label>
      <x:variable name="expr" as="xs:string">3 eq (for $foo in 1 return for $bar in 2 return $bar + $foo)</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>3 eq (for $foo in 1 return for $bar in 2 return $bar + $foo)</x:label>
      <x:variable name="expr" as="xs:string">3 eq (for $foo in 1 return for $bar in 2 return $bar + $foo)</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>3 eq (for $foo in 1, $foo in 3 return $foo)</x:label>
      <x:variable name="expr" as="xs:string">3 eq (for $foo in 1, $foo in 3 return $foo)</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>8 eq (for $foo in 1, $foo in 3, $moo in 5 return $moo + $foo)</x:label>
      <x:variable name="expr" as="xs:string">8 eq (for $foo in 1, $foo in 3, $moo in 5 return $moo + $foo)</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>6 eq (for $foo in 1, $foo in 3 return $foo + $foo)</x:label>
      <x:variable name="expr" as="xs:string">6 eq (for $foo in 1, $foo in 3 return $foo + $foo)</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>empty(for $var in () return current-time())</x:label>
      <x:variable name="expr" as="xs:string">empty(for $var in () return current-time())</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>empty(for $var in () return 1)</x:label>
      <x:variable name="expr" as="xs:string">empty(for $var in () return 1)</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>empty((for $var in () return current-time()))</x:label>
      <x:variable name="expr" as="xs:string">empty((for $var in () return current-time()))</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>empty((for $var in () return 1) eq 1)</x:label>
      <x:variable name="expr" as="xs:string">empty((for $var in () return 1) eq 1)</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>empty(for $var in subsequence((current-time(), 1), 4) return 1)</x:label>
      <x:variable name="expr" as="xs:string">empty(for $var in subsequence((current-time(), 1), 4) return 1)</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>deep-equal(remove(for $var in (current-time(), 2, 3, 4) return $var, 1), (2, 3, 4))</x:label>
      <x:variable name="expr" as="xs:string">deep-equal(remove(for $var in (current-time(), 2, 3, 4) return $var, 1), (2, 3, 4))</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>(for $fn:name in (1, 1) return $fn:name) instance of xs:integer+</x:label>
      <x:variable name="expr" as="xs:string">(for $fn:name in (1, 1) return $fn:name) instance of xs:integer+</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>(for $xs:name in (1, 1) return $xs:name) instance of xs:integer+</x:label>
      <x:variable name="expr" as="xs:string">(for $xs:name in (1, 1) return $xs:name) instance of xs:integer+</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>$NOTEXIST</x:label>
      <x:variable name="expr" as="xs:string">$NOTEXIST</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>$PREFIXNOTEXIST:NOTEXIST</x:label>
      <x:variable name="expr" as="xs:string">$PREFIXNOTEXIST:NOTEXIST</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>$xs:NOTEXIST</x:label>
      <x:variable name="expr" as="xs:string">$xs:NOTEXIST</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>1 + $NOTEXIST</x:label>
      <x:variable name="expr" as="xs:string">1 + $NOTEXIST</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>1 + $prefix:NOTEXIST</x:label>
      <x:variable name="expr" as="xs:string">1 + $prefix:NOTEXIST</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>1 + $xs:NOTEXIST</x:label>
      <x:variable name="expr" as="xs:string">1 + $xs:NOTEXIST</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>$NOTEXIST + 1</x:label>
      <x:variable name="expr" as="xs:string">$NOTEXIST + 1</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>$PREFIXNOTEXIST:NOTEXIST + 1</x:label>
      <x:variable name="expr" as="xs:string">$PREFIXNOTEXIST:NOTEXIST + 1</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>$xs:NOTEXIST + 1</x:label>
      <x:variable name="expr" as="xs:string">$xs:NOTEXIST + 1</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>for $foo in 1 return $NOTEXIST</x:label>
      <x:variable name="expr" as="xs:string">for $foo in 1 return $NOTEXIST</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>for $foo in (1, 2, $foo) return 1</x:label>
      <x:variable name="expr" as="xs:string">for $foo in (1, 2, $foo) return 1</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>for $foo in (1, $foo, 3) return 1</x:label>
      <x:variable name="expr" as="xs:string">for $foo in (1, $foo, 3) return 1</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>for $foo in ($foo, 2, 3) return 1</x:label>
      <x:variable name="expr" as="xs:string">for $foo in ($foo, 2, 3) return 1</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>for $foo in $foo return 1</x:label>
      <x:variable name="expr" as="xs:string">for $foo in $foo return 1</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>for $foo in 1 return $bar + (for $bar in 2 return $bar)</x:label>
      <x:variable name="expr" as="xs:string">for $foo in 1 return $bar + (for $bar in 2 return $bar)</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>for $a in (1, 2, 3), $b in (1, 2, 3, $b) return $a, $b</x:label>
      <x:variable name="expr" as="xs:string">for $a in (1, 2, 3), $b in (1, 2, 3, $b) return $a, $b</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>for $a in (1, 2), $b in (1, 2), $c in (1, 2) return 1, $a</x:label>
      <x:variable name="expr" as="xs:string">for $a in (1, 2), $b in (1, 2), $c in (1, 2) return 1, $a</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>for $a in (1, 2) return 1, $a</x:label>
      <x:variable name="expr" as="xs:string">for $a in (1, 2) return 1, $a</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>for $a in (1, 2), $b in (1, 2), $c in (1, 2) return 1, $b</x:label>
      <x:variable name="expr" as="xs:string">for $a in (1, 2), $b in (1, 2), $c in (1, 2) return 1, $b</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>for $a in (1, 2), $b in (1, 2), $c in (1, 2) return 1, $c</x:label>
      <x:variable name="expr" as="xs:string">for $a in (1, 2), $b in (1, 2), $c in (1, 2) return 1, $c</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>for $foo in "foo" return 1 + $foo</x:label>
      <x:variable name="expr" as="xs:string">for $foo in "foo" return 1 + $foo</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>for $foo in ("a string", "another one") return 1 + subsequence($foo, 1, 1)</x:label>
      <x:variable name="expr" as="xs:string">for $foo in ("a string", "another one") return 1 + subsequence($foo, 1, 1)</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>1 eq (for $a in 1 return $a)</x:label>
      <x:variable name="expr" as="xs:string">1 eq (for $a in 1 return $a)</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>deep-equal((for $fo in trace((1, 2, 3), "msg") return $fo), (1, 2, 3))</x:label>
      <x:variable name="expr" as="xs:string">deep-equal((for $fo in trace((1, 2, 3), "msg") return $fo), (1, 2, 3))</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>1 eq (for $a in 1 return $a)</x:label>
      <x:variable name="expr" as="xs:string">1 eq (for $a in 1 return $a)</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>1 eq (for $xs:a in 1 return $xs:a)</x:label>
      <x:variable name="expr" as="xs:string">1 eq (for $xs:a in 1 return $xs:a)</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>count(for $i in (1, 2, current-time()) return ($i, $i)) eq 6</x:label>
      <x:variable name="expr" as="xs:string">count(for $i in (1, 2, current-time()) return ($i, $i)) eq 6</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>count(for $i in (1, 2, timezone-from-time(current-time())) return ($i, $i)) eq 6 or count(for $i in (1, 2, timezone-from-time(current-time())) return ($i, $i)) eq 4</x:label>
      <x:variable name="expr" as="xs:string">count(for $i in (1, 2, timezone-from-time(current-time())) return ($i, $i)) eq 6 or count(for $i in (1, 2, timezone-from-time(current-time())) return ($i, $i)) eq 4</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>for $d in person return $d</x:label>
      <x:variable name="expr" as="xs:string">for $d in person return $d</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>for $n in node return 1</x:label>
      <x:variable name="expr" as="xs:string">for $n in node return 1</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>for $n in document return 1</x:label>
      <x:variable name="expr" as="xs:string">for $n in document return 1</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>for $n in attribute return 1</x:label>
      <x:variable name="expr" as="xs:string">for $n in attribute return 1</x:variable>
      <x:like label="generic-test"/>
    </x:scenario></x:description>