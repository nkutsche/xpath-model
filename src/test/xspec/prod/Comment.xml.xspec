<?xml version="1.0" encoding="UTF-8"?><x:description xmlns:nk="http://www.nkutsche.com/xpath-model" xmlns:x="http://www.jenitennison.com/xslt/xspec" stylesheet="../../../main/resources/xsl/xpath-model.xsl"><x:scenario label="/qt3tests-master/prod/Comment.xml"><x:call function="nk:xpath-model"/><x:scenario label="(: Name: XQueryComment002 :)&#xA;(: Description: Simple use case for XQuery comments :)&#xA;&#xA;&#xA;&#xA;&#xA;(: This is a comment :)&#xA;(//fs:Folder)[1]/fs:File[1]/fs:FileName">
      <x:call>
        <x:param select="string(.)">(: Name: XQueryComment002 :)
(: Description: Simple use case for XQuery comments :)




(: This is a comment :)
(//fs:Folder)[1]/fs:File[1]/fs:FileName</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(: Name: XQueryComment009 :)&#xA;(: Description: Comments inside a conditional expression :)&#xA;&#xA;&#xA;&#xA;if (:test (: yada (: neato :) :) :) (/fs:MyComputer) &#xA;&#x9;then (: yada :) &#34;true&#34;&#xA;&#x9;else &#34;false&#34;">
      <x:call>
        <x:param select="string(.)">(: Name: XQueryComment009 :)
(: Description: Comments inside a conditional expression :)



if (:test (: yada (: neato :) :) :) (/fs:MyComputer) 
	then (: yada :) "true"
	else "false"</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(: Name: XQueryComment010 :)&#xA;(: Description: Comments inside a conditional expression :)&#xA;if (: comment :) &#xA;  ( //fs:Folder[1]/fs:FolderName/text() = &#34;Folder00000000000&#34; ) &#xA;then (: this is the then case :) ( true() )&#xA;else (: this is the else case :) ( false() )">
      <x:call>
        <x:param select="string(.)">(: Name: XQueryComment010 :)
(: Description: Comments inside a conditional expression :)
if (: comment :) 
  ( //fs:Folder[1]/fs:FolderName/text() = "Folder00000000000" ) 
then (: this is the then case :) ( true() )
else (: this is the else case :) ( false() )</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(: Name: XQueryComment011 :)&#xA;(: Description: Comments inside a conditional expression :)&#xA;&#xA;&#xA;&#xA;if (:test:)(:t2:)(:t3:) (/fs:MyComputer) &#xA;&#x9;then &#34;true&#34;&#xA;&#x9;else &#34;false&#34;">
      <x:call>
        <x:param select="string(.)">(: Name: XQueryComment011 :)
(: Description: Comments inside a conditional expression :)



if (:test:)(:t2:)(:t3:) (/fs:MyComputer) 
	then "true"
	else "false"</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(: Name: XQueryComment012 :)&#xA;(: Description: Comments that looks like a function call :)&#xA;&#xA;&#xA;/south(: test :)">
      <x:call>
        <x:param select="string(.)">(: Name: XQueryComment012 :)
(: Description: Comments that looks like a function call :)


/south(: test :)</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(: Name: XQueryComment013 :)&#xA;(: Description: Comments inside a sequence expression :)&#xA;&#xA;&#xA;(1, 2, (: comment :) 3, 4)">
      <x:call>
        <x:param select="string(.)">(: Name: XQueryComment013 :)
(: Description: Comments inside a sequence expression :)


(1, 2, (: comment :) 3, 4)</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(: Name: XQueryComment014 :)&#xA;(: Description: Comments inside a cast expression :)&#xA;&#xA;&#xA;&#34;10&#34; cast as (: type comment :) xs:integer ?">
      <x:call>
        <x:param select="string(.)">(: Name: XQueryComment014 :)
(: Description: Comments inside a cast expression :)


"10" cast as (: type comment :) xs:integer ?</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(:*******************************************************:)&#xA;(: Test: K-XQueryComment-1                               :)&#xA;(: Written by: Frans Englich                             :)&#xA;(: Date: 2007-11-22T11:31:22+01:00                       :)&#xA;(: Purpose: A test whose essence is: `(3(: comment inbetween :)- 1) eq 2`. :)&#xA;(:*******************************************************:)&#xA;(3(: comment inbetween :)- 1) eq 2">
      <x:call>
        <x:param select="string(.)">(:*******************************************************:)
(: Test: K-XQueryComment-1                               :)
(: Written by: Frans Englich                             :)
(: Date: 2007-11-22T11:31:22+01:00                       :)
(: Purpose: A test whose essence is: `(3(: comment inbetween :)- 1) eq 2`. :)
(:*******************************************************:)
(3(: comment inbetween :)- 1) eq 2</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(:*******************************************************:)&#xA;(: Test: K-XQueryComment-2                               :)&#xA;(: Written by: Frans Englich                             :)&#xA;(: Date: 2007-11-22T11:31:22+01:00                       :)&#xA;(: Purpose: A test whose essence is: `1 (: a (: nested :) comment :) eq 1`. :)&#xA;(:*******************************************************:)&#xA;1 (: a (: nested :) comment :) eq 1">
      <x:call>
        <x:param select="string(.)">(:*******************************************************:)
(: Test: K-XQueryComment-2                               :)
(: Written by: Frans Englich                             :)
(: Date: 2007-11-22T11:31:22+01:00                       :)
(: Purpose: A test whose essence is: `1 (: a (: nested :) comment :) eq 1`. :)
(:*******************************************************:)
1 (: a (: nested :) comment :) eq 1</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(:*******************************************************:)&#xA;(: Test: K-XQueryComment-3                               :)&#xA;(: Written by: Frans Englich                             :)&#xA;(: Date: 2007-11-22T11:31:22+01:00                       :)&#xA;(: Purpose: A test whose essence is: `1 (: comment (: inside :) comment :) eq 1`. :)&#xA;(:*******************************************************:)&#xA;1 (: comment (: inside :) comment :) eq 1">
      <x:call>
        <x:param select="string(.)">(:*******************************************************:)
(: Test: K-XQueryComment-3                               :)
(: Written by: Frans Englich                             :)
(: Date: 2007-11-22T11:31:22+01:00                       :)
(: Purpose: A test whose essence is: `1 (: comment (: inside :) comment :) eq 1`. :)
(:*******************************************************:)
1 (: comment (: inside :) comment :) eq 1</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(:*******************************************************:)&#xA;(: Test: K-XQueryComment-4                               :)&#xA;(: Written by: Frans Englich                             :)&#xA;(: Date: 2007-11-22T11:31:22+01:00                       :)&#xA;(: Purpose: Comparison of two string literals, whose content reminds of comments. :)&#xA;(:*******************************************************:)&#xA;&#34;reminds of a comment :)&#34; eq&#xA;&#x9;&#x9;    &#34;reminds of a comment :)&#34;">
      <x:call>
        <x:param select="string(.)">(:*******************************************************:)
(: Test: K-XQueryComment-4                               :)
(: Written by: Frans Englich                             :)
(: Date: 2007-11-22T11:31:22+01:00                       :)
(: Purpose: Comparison of two string literals, whose content reminds of comments. :)
(:*******************************************************:)
"reminds of a comment :)" eq
		    "reminds of a comment :)"</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(:*******************************************************:)&#xA;(: Test: K-XQueryComment-5                               :)&#xA;(: Written by: Frans Englich                             :)&#xA;(: Date: 2007-11-22T11:31:22+01:00                       :)&#xA;(: Purpose: A test whose essence is: `5 instance (: strange place for a comment :) of item()`. :)&#xA;(:*******************************************************:)&#xA;5 instance (: strange place for a comment :) of item()">
      <x:call>
        <x:param select="string(.)">(:*******************************************************:)
(: Test: K-XQueryComment-5                               :)
(: Written by: Frans Englich                             :)
(: Date: 2007-11-22T11:31:22+01:00                       :)
(: Purpose: A test whose essence is: `5 instance (: strange place for a comment :) of item()`. :)
(:*******************************************************:)
5 instance (: strange place for a comment :) of item()</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(:*******************************************************:)&#xA;(: Test: K-XQueryComment-6                               :)&#xA;(: Written by: Frans Englich                             :)&#xA;(: Date: 2007-11-22T11:31:22+01:00                       :)&#xA;(: Purpose: A test whose essence is: `1 (: simple comment :) eq 1`. :)&#xA;(:*******************************************************:)&#xA;1 (: simple comment :) eq 1">
      <x:call>
        <x:param select="string(.)">(:*******************************************************:)
(: Test: K-XQueryComment-6                               :)
(: Written by: Frans Englich                             :)
(: Date: 2007-11-22T11:31:22+01:00                       :)
(: Purpose: A test whose essence is: `1 (: simple comment :) eq 1`. :)
(:*******************************************************:)
1 (: simple comment :) eq 1</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(:*******************************************************:)&#xA;(: Test: K-XQueryComment-7                               :)&#xA;(: Written by: Frans Englich                             :)&#xA;(: Date: 2007-11-22T11:31:22+01:00                       :)&#xA;(: Purpose: A test whose essence is: `1 (: comment (: inside :) NEW LINE comment :) eq 1`. :)&#xA;(:*******************************************************:)&#xA;1 (: comment (: inside :)&#xA;&#x9;&#x9;&#x9;&#x9;NEW LINE comment :) eq 1">
      <x:call>
        <x:param select="string(.)">(:*******************************************************:)
(: Test: K-XQueryComment-7                               :)
(: Written by: Frans Englich                             :)
(: Date: 2007-11-22T11:31:22+01:00                       :)
(: Purpose: A test whose essence is: `1 (: comment (: inside :) NEW LINE comment :) eq 1`. :)
(:*******************************************************:)
1 (: comment (: inside :)
				NEW LINE comment :) eq 1</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(:*******************************************************:)&#xA;(: Test: K-XQueryComment-9                               :)&#xA;(: Written by: Frans Englich                             :)&#xA;(: Date: 2007-11-22T11:31:22+01:00                       :)&#xA;(: Purpose: An empty comment inbetween the 'eq' operator and a number literal. :)&#xA;(:*******************************************************:)&#xA;1 eq (::)1">
      <x:call>
        <x:param select="string(.)">(:*******************************************************:)
(: Test: K-XQueryComment-9                               :)
(: Written by: Frans Englich                             :)
(: Date: 2007-11-22T11:31:22+01:00                       :)
(: Purpose: An empty comment inbetween the 'eq' operator and a number literal. :)
(:*******************************************************:)
1 eq (::)1</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(:*******************************************************:)&#xA;(: Test: K-XQueryComment-10                              :)&#xA;(: Written by: Frans Englich                             :)&#xA;(: Date: 2007-11-22T11:31:22+01:00                       :)&#xA;(: Purpose: An empty comment at the very beginning of an expression. :)&#xA;(:*******************************************************:)&#xA;(::) 1 eq 1">
      <x:call>
        <x:param select="string(.)">(:*******************************************************:)
(: Test: K-XQueryComment-10                              :)
(: Written by: Frans Englich                             :)
(: Date: 2007-11-22T11:31:22+01:00                       :)
(: Purpose: An empty comment at the very beginning of an expression. :)
(:*******************************************************:)
(::) 1 eq 1</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(:*******************************************************:)&#xA;(: Test: K-XQueryComment-11                              :)&#xA;(: Written by: Frans Englich                             :)&#xA;(: Date: 2007-11-22T11:31:22+01:00                       :)&#xA;(: Purpose: An empty comment after a function's paranteses. :)&#xA;(:*******************************************************:)&#xA;true()(::)">
      <x:call>
        <x:param select="string(.)">(:*******************************************************:)
(: Test: K-XQueryComment-11                              :)
(: Written by: Frans Englich                             :)
(: Date: 2007-11-22T11:31:22+01:00                       :)
(: Purpose: An empty comment after a function's paranteses. :)
(:*******************************************************:)
true()(::)</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(:*******************************************************:)&#xA;(: Test: K-XQueryComment-12                              :)&#xA;(: Written by: Frans Englich                             :)&#xA;(: Date: 2007-11-22T11:31:22+01:00                       :)&#xA;(: Purpose: A for loop with a comment inbetween.         :)&#xA;(:*******************************************************:)&#xA;for (: set up loop :) $i in 3 return $i eq 3">
      <x:call>
        <x:param select="string(.)">(:*******************************************************:)
(: Test: K-XQueryComment-12                              :)
(: Written by: Frans Englich                             :)
(: Date: 2007-11-22T11:31:22+01:00                       :)
(: Purpose: A for loop with a comment inbetween.         :)
(:*******************************************************:)
for (: set up loop :) $i in 3 return $i eq 3</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(:*******************************************************:)&#xA;(: Test: K-XQueryComment-17                              :)&#xA;(: Written by: Frans Englich                             :)&#xA;(: Date: 2007-11-22T11:31:22+01:00                       :)&#xA;(: Purpose: Colons and paranteses appearing freely in comment content. :)&#xA;(:*******************************************************:)&#xA;1(: ((( : )) ))ladl:  :(): ()()(dahsi ()()( dad: ) :) eq 1">
      <x:call>
        <x:param select="string(.)">(:*******************************************************:)
(: Test: K-XQueryComment-17                              :)
(: Written by: Frans Englich                             :)
(: Date: 2007-11-22T11:31:22+01:00                       :)
(: Purpose: Colons and paranteses appearing freely in comment content. :)
(:*******************************************************:)
1(: ((( : )) ))ladl:  :(): ()()(dahsi ()()( dad: ) :) eq 1</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(:*******************************************************:)&#xA;(: Test: K-XQueryComment-18                              :)&#xA;(: Written by: Frans Englich                             :)&#xA;(: Date: 2007-11-22T11:31:22+01:00                       :)&#xA;(: Purpose: Three comments appearing serially inside a comment. :)&#xA;(:*******************************************************:)&#xA;1(: (:one comment:) content (:another comment:) content (:a third:):)&#xA;&#x9;&#x9;&#x9;   eq 1">
      <x:call>
        <x:param select="string(.)">(:*******************************************************:)
(: Test: K-XQueryComment-18                              :)
(: Written by: Frans Englich                             :)
(: Date: 2007-11-22T11:31:22+01:00                       :)
(: Purpose: Three comments appearing serially inside a comment. :)
(:*******************************************************:)
1(: (:one comment:) content (:another comment:) content (:a third:):)
			   eq 1</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(:*******************************************************:)&#xA;(: Test: K-XQueryComment-19                              :)&#xA;(: Written by: Frans Englich                             :)&#xA;(: Date: 2007-11-22T11:31:22+01:00                       :)&#xA;(: Purpose: A test stressing many nested comments.       :)&#xA;(:*******************************************************:)&#xA;1(:(:(:(:(:(:(:(::):):):):):):):) eq 1">
      <x:call>
        <x:param select="string(.)">(:*******************************************************:)
(: Test: K-XQueryComment-19                              :)
(: Written by: Frans Englich                             :)
(: Date: 2007-11-22T11:31:22+01:00                       :)
(: Purpose: A test stressing many nested comments.       :)
(:*******************************************************:)
1(:(:(:(:(:(:(:(::):):):):):):):) eq 1</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario></x:scenario></x:description>