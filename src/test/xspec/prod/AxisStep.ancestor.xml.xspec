<?xml version="1.0" encoding="UTF-8"?><x:description xmlns:nk="http://www.nkutsche.com/xpath-model" xmlns:x="http://www.jenitennison.com/xslt/xspec" stylesheet="../../../main/resources/xsl/xpath-model.xsl"><x:scenario label="generic-test" shared="yes">
    <x:call function="nk:xpath-model">
      <x:param select="$expr"/>
    </x:call>
    <x:expect label="result should be valid">
      <expr>...</expr>
    </x:expect>
  </x:scenario><x:scenario>
      <x:label>(200)/ancestor::*</x:label>
      <x:variable name="expr" as="xs:string">(200)/ancestor::*</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>fn:count(/works/employee[1]/ancestor::noSuchNode)</x:label>
      <x:variable name="expr" as="xs:string">fn:count(/works/employee[1]/ancestor::noSuchNode)</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>exactly-one(/works/employee[1]/ancestor::works) is exactly-one(/works)</x:label>
      <x:variable name="expr" as="xs:string">exactly-one(/works/employee[1]/ancestor::works) is exactly-one(/works)</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>exactly-one(/works/employee[1]/ancestor::works) is exactly-one(/works/employee[1])</x:label>
      <x:variable name="expr" as="xs:string">exactly-one(/works/employee[1]/ancestor::works) is exactly-one(/works/employee[1])</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>exactly-one(/works/employee[1]/ancestor::works) &lt;&lt; exactly-one(/works/employee[1])</x:label>
      <x:variable name="expr" as="xs:string">exactly-one(/works/employee[1]/ancestor::works) &lt;&lt; exactly-one(/works/employee[1])</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>exactly-one(/works/employee[1]/ancestor::works) &lt;&lt; exactly-one(/works/employee[1]/ancestor::works)</x:label>
      <x:variable name="expr" as="xs:string">exactly-one(/works/employee[1]/ancestor::works) &lt;&lt; exactly-one(/works/employee[1]/ancestor::works)</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>exactly-one(/works/employee[1]/ancestor::works) &lt;&lt; exactly-one(/works/employee[1])</x:label>
      <x:variable name="expr" as="xs:string">exactly-one(/works/employee[1]/ancestor::works) &lt;&lt; exactly-one(/works/employee[1])</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>exactly-one(/works/employee[1]) &gt;&gt; exactly-one(/works/employee[1]/ancestor::works)</x:label>
      <x:variable name="expr" as="xs:string">exactly-one(/works/employee[1]) &gt;&gt; exactly-one(/works/employee[1]/ancestor::works)</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>exactly-one(/works/employee[1]/ancestor::works) &gt;&gt; exactly-one(/works/employee[1]/ancestor::works)</x:label>
      <x:variable name="expr" as="xs:string">exactly-one(/works/employee[1]/ancestor::works) &gt;&gt; exactly-one(/works/employee[1]/ancestor::works)</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>exactly-one(/works/employee[1]/ancestor::works) &gt;&gt; exactly-one(/works/employee[1]/hours)</x:label>
      <x:variable name="expr" as="xs:string">exactly-one(/works/employee[1]/ancestor::works) &gt;&gt; exactly-one(/works/employee[1]/hours)</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>(/works/employee[12]/*/day/ancestor::overtime) | (/works/employee[12]/*/day/ancestor::overtime)</x:label>
      <x:variable name="expr" as="xs:string">(/works/employee[12]/*/day/ancestor::overtime) | (/works/employee[12]/*/day/ancestor::overtime)</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>(/works/employee[12]/*/day[1]/ancestor::overtime) | (/works/employee[12]/*/day[2]/ancestor::overtime)</x:label>
      <x:variable name="expr" as="xs:string">(/works/employee[12]/*/day[1]/ancestor::overtime) | (/works/employee[12]/*/day[2]/ancestor::overtime)</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>(/works/employee[12]/overtime/day/ancestor::employee) intersect (/works/employee[12]/overtime/day/ancestor::employee)</x:label>
      <x:variable name="expr" as="xs:string">(/works/employee[12]/overtime/day/ancestor::employee) intersect (/works/employee[12]/overtime/day/ancestor::employee)</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>fn:count((/works/employee[12]/overtime/day[ancestor::overtime]) except (/works/employee[12]/overtime/day[ancestor::overtime]))</x:label>
      <x:variable name="expr" as="xs:string">fn:count((/works/employee[12]/overtime/day[ancestor::overtime]) except (/works/employee[12]/overtime/day[ancestor::overtime]))</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>(/works/employee[12]/overtime/day[ancestor::overtime]) except (/works/employee[12]/overtime/day[1])</x:label>
      <x:variable name="expr" as="xs:string">(/works/employee[12]/overtime/day[ancestor::overtime]) except (/works/employee[12]/overtime/day[1])</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>(/works/employee[12]/overtime/day[ancestor::overtime]) and fn:true()</x:label>
      <x:variable name="expr" as="xs:string">(/works/employee[12]/overtime/day[ancestor::overtime]) and fn:true()</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>(/works/employee[12]/overtime/day[ancestor::overtime]) and fn:false()</x:label>
      <x:variable name="expr" as="xs:string">(/works/employee[12]/overtime/day[ancestor::overtime]) and fn:false()</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>(/works/employee[12]/overtime/day[ancestor::overtime]) or fn:true()</x:label>
      <x:variable name="expr" as="xs:string">(/works/employee[12]/overtime/day[ancestor::overtime]) or fn:true()</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>(/works/employee[12]/overtime/day[ancestor::overtime]) or fn:false()</x:label>
      <x:variable name="expr" as="xs:string">(/works/employee[12]/overtime/day[ancestor::overtime]) or fn:false()</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>fn:deep-equal(/works/employee[12]/overtime/ancestor::works,/works/employee[12]/overtime/ancestor::works)</x:label>
      <x:variable name="expr" as="xs:string">fn:deep-equal(/works/employee[12]/overtime/ancestor::works,/works/employee[12]/overtime/ancestor::works)</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>for $h in (/works/employee[1]/hours) return $h/ancestor::employee</x:label>
      <x:variable name="expr" as="xs:string">for $h in (/works/employee[1]/hours) return $h/ancestor::employee</x:variable>
      <x:like label="generic-test"/>
    </x:scenario></x:description>