<?xml version="1.0" encoding="UTF-8"?><x:description xmlns:nk="http://www.nkutsche.com/xpath-model" xmlns:x="http://www.jenitennison.com/xslt/xspec" stylesheet="../../../main/resources/xsl/xpath-model.xsl"><x:scenario label="generic-test" shared="yes">
    <x:call function="nk:xpath-model">
      <x:param select="$expr"/>
    </x:call>
    <x:expect label="result should be valid">
      <expr>...</expr>
    </x:expect>
  </x:scenario><x:scenario>
      <x:label>xs:base64Binary(xs:hexBinary(""))</x:label>
      <x:variable name="expr" as="xs:string">xs:base64Binary(xs:hexBinary(""))</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>xs:base64Binary(xs:hexBinary("00"))</x:label>
      <x:variable name="expr" as="xs:string">xs:base64Binary(xs:hexBinary("00"))</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>xs:base64Binary(xs:hexBinary("01"))</x:label>
      <x:variable name="expr" as="xs:string">xs:base64Binary(xs:hexBinary("01"))</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>xs:base64Binary(xs:hexBinary("ff"))</x:label>
      <x:variable name="expr" as="xs:string">xs:base64Binary(xs:hexBinary("ff"))</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>xs:base64Binary(xs:hexBinary("0000"))</x:label>
      <x:variable name="expr" as="xs:string">xs:base64Binary(xs:hexBinary("0000"))</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>xs:base64Binary(xs:hexBinary("00ff"))</x:label>
      <x:variable name="expr" as="xs:string">xs:base64Binary(xs:hexBinary("00ff"))</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>xs:base64Binary(xs:hexBinary("80c0"))</x:label>
      <x:variable name="expr" as="xs:string">xs:base64Binary(xs:hexBinary("80c0"))</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>xs:base64Binary(xs:hexBinary("aabbcc"))</x:label>
      <x:variable name="expr" as="xs:string">xs:base64Binary(xs:hexBinary("aabbcc"))</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>xs:base64Binary(xs:hexBinary("010203"))</x:label>
      <x:variable name="expr" as="xs:string">xs:base64Binary(xs:hexBinary("010203"))</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>xs:base64Binary(xs:hexBinary("01020304"))</x:label>
      <x:variable name="expr" as="xs:string">xs:base64Binary(xs:hexBinary("01020304"))</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>xs:base64Binary(xs:hexBinary("0102030405"))</x:label>
      <x:variable name="expr" as="xs:string">xs:base64Binary(xs:hexBinary("0102030405"))</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>xs:base64Binary(xs:hexBinary("010203040506"))</x:label>
      <x:variable name="expr" as="xs:string">xs:base64Binary(xs:hexBinary("010203040506"))</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>xs:base64Binary(xs:hexBinary("01020304050607"))</x:label>
      <x:variable name="expr" as="xs:string">xs:base64Binary(xs:hexBinary("01020304050607"))</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>xs:base64Binary(xs:hexBinary("0102030405060708090A0B0C0D0E0F10111213131415161718191A1B1C1D1F202122232425262728292A2B2C2D2E2F"))</x:label>
      <x:variable name="expr" as="xs:string">xs:base64Binary(xs:hexBinary("0102030405060708090A0B0C0D0E0F10111213131415161718191A1B1C1D1F202122232425262728292A2B2C2D2E2F"))</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>xs:base64Binary("")</x:label>
      <x:variable name="expr" as="xs:string">xs:base64Binary("")</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>xs:hexBinary(xs:base64Binary("AA=="))</x:label>
      <x:variable name="expr" as="xs:string">xs:hexBinary(xs:base64Binary("AA=="))</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>xs:hexBinary(xs:base64Binary("AQ=="))</x:label>
      <x:variable name="expr" as="xs:string">xs:hexBinary(xs:base64Binary("AQ=="))</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>xs:hexBinary(xs:base64Binary("/w=="))</x:label>
      <x:variable name="expr" as="xs:string">xs:hexBinary(xs:base64Binary("/w=="))</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>xs:hexBinary(xs:base64Binary("AAA="))</x:label>
      <x:variable name="expr" as="xs:string">xs:hexBinary(xs:base64Binary("AAA="))</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>xs:hexBinary(xs:base64Binary("AP8="))</x:label>
      <x:variable name="expr" as="xs:string">xs:hexBinary(xs:base64Binary("AP8="))</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>xs:hexBinary(xs:base64Binary("gMA="))</x:label>
      <x:variable name="expr" as="xs:string">xs:hexBinary(xs:base64Binary("gMA="))</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>xs:hexBinary(xs:base64Binary("qrvM"))</x:label>
      <x:variable name="expr" as="xs:string">xs:hexBinary(xs:base64Binary("qrvM"))</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>xs:hexBinary(xs:base64Binary("AQID"))</x:label>
      <x:variable name="expr" as="xs:string">xs:hexBinary(xs:base64Binary("AQID"))</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>xs:hexBinary(xs:base64Binary("AQIDBA=="))</x:label>
      <x:variable name="expr" as="xs:string">xs:hexBinary(xs:base64Binary("AQIDBA=="))</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>xs:hexBinary(xs:base64Binary("AQIDBAU="))</x:label>
      <x:variable name="expr" as="xs:string">xs:hexBinary(xs:base64Binary("AQIDBAU="))</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>xs:hexBinary(xs:base64Binary("AQIDBAUG"))</x:label>
      <x:variable name="expr" as="xs:string">xs:hexBinary(xs:base64Binary("AQIDBAUG"))</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>xs:hexBinary(xs:base64Binary("AQIDBAUGBw=="))</x:label>
      <x:variable name="expr" as="xs:string">xs:hexBinary(xs:base64Binary("AQIDBAUGBw=="))</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>xs:hexBinary(xs:base64Binary("AQIDBAUGBwgJCgsMDQ4PEBESExMUFRYXGBkaGxwdHyAhIiMkJSYnKCkqKywtLi8="))</x:label>
      <x:variable name="expr" as="xs:string">xs:hexBinary(xs:base64Binary("AQIDBAUGBwgJCgsMDQ4PEBESExMUFRYXGBkaGxwdHyAhIiMkJSYnKCkqKywtLi8="))</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>xs:hexBinary(xs:base64Binary(" AQIDBAUG BwgJCgsM DQ4PEBES ExMUFRYX 
 GBkaGxwdH yAhIiMkJ SYnKCkqK y w t L i 8 = "))</x:label>
      <x:variable name="expr" as="xs:string">xs:hexBinary(xs:base64Binary(" AQIDBAUG BwgJCgsM DQ4PEBES ExMUFRYX 
 GBkaGxwdH yAhIiMkJ SYnKCkqK y w t L i 8 = "))</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>xs:base64Binary("AQI")</x:label>
      <x:variable name="expr" as="xs:string">xs:base64Binary("AQI")</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>xs:base64Binary("AQ=I")</x:label>
      <x:variable name="expr" as="xs:string">xs:base64Binary("AQ=I")</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>xs:base64Binary("=AQI")</x:label>
      <x:variable name="expr" as="xs:string">xs:base64Binary("=AQI")</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>xs:base64Binary("qrvM====")</x:label>
      <x:variable name="expr" as="xs:string">xs:base64Binary("qrvM====")</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>xs:base64Binary("gMA-")</x:label>
      <x:variable name="expr" as="xs:string">xs:base64Binary("gMA-")</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>xs:base64Binary("AP9=")</x:label>
      <x:variable name="expr" as="xs:string">xs:base64Binary("AP9=")</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>xs:base64Binary("Ay==")</x:label>
      <x:variable name="expr" as="xs:string">xs:base64Binary("Ay==")</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>xs:base64Binary(codepoints-to-string((119070, 119070, 119070, 119070) (:treble clef:)))</x:label>
      <x:variable name="expr" as="xs:string">xs:base64Binary(codepoints-to-string((119070, 119070, 119070, 119070) (:treble clef:)))</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>codepoints-to-string((119070, 119070, 119070, 119070) (:treble clef:)) castable as xs:base64Binary</x:label>
      <x:variable name="expr" as="xs:string">codepoints-to-string((119070, 119070, 119070, 119070) (:treble clef:)) castable as xs:base64Binary</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>count(xs:base64Binary(()))</x:label>
      <x:variable name="expr" as="xs:string">count(xs:base64Binary(()))</x:variable>
      <x:like label="generic-test"/>
    </x:scenario></x:description>