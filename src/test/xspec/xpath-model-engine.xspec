<?xml version="1.0" encoding="UTF-8"?>

<x:description xmlns:x="http://www.jenitennison.com/xslt/xspec"
    xmlns:xpm="http://www.nkutsche.com/xpath-model"
    xmlns:xpt="http://www.nkutsche.com/xmlml/xpath-engine/types"
    xmlns:xpe="http://www.nkutsche.com/xpath-model/engine"
    xmlns:xpf="http://www.nkutsche.com/xmlml/xpath-engine/functions"
    xmlns:p="http://www.nkutsche.com/xpath-parser"
    xmlns:avt="http://www.nkutsche.com/avt-parser"
    xmlns:xs="http://www.w3.org/2001/XMLSchema"
    xmlns:err="http://www.w3.org/2005/xqt-errors"
    stylesheet="../../main/resources/xsl/xpath-model.xsl">
    
    <x:helper package-name="http://maxtoroq.github.io/rng-xsl" package-version="*"/>
    
    <x:scenario label="Testing function xpe:tree-walk" catch="yes">
        <x:call function="xpe:tree-walk"/>
        <x:scenario label="nodeTest: node()">
            <x:call>
                <x:param position="3">
                    <nodeTest kind="node"/>
                </x:param>
            </x:call>
            <x:scenario label="axis: ancestor">
                <x:call>
                    <x:param position="2" select="'ancestor'"/>
                </x:call>
                <x:scenario label="context: /foo/bar">
                    <x:variable name="doc" select="/">
                        <foo>
                            <bar>
                                <baz/>
                            </bar>
                        </foo>
                    </x:variable>
                    <x:call>
                        <x:param position="1" select="$doc/foo/bar/baz"/>
                    </x:call>
                    <x:expect label="result name" test="$x:result ! name(.)" select="'', 'foo', 'bar'"/>
                </x:scenario>
            </x:scenario>
        </x:scenario>
    </x:scenario>
    <x:scenario label="Testing function xpe:xpath-evaluate" catch="yes">
        <x:call function="xpe:xpath-evaluate"/>
            
        <x:variable name="namespaces" select="map{
            'fn' : 'http://www.w3.org/2005/xpath-functions',
            'xs' : 'http://www.w3.org/2001/XMLSchema',
            'map' : 'http://www.w3.org/2005/xpath-functions/map',
            'array' : 'http://www.w3.org/2005/xpath-functions/array'
            }"/>
        <x:variable name="test-config" select="map{
            'namespaces' : $namespaces,
            'base-uri' : static-base-uri()
            }"/>
        <x:scenario label="with test config">
            <x:call>
                <x:param position="3" select="$test-config"></x:param>
            </x:call>
            
            <x:scenario label="context: &lt;dummy/&gt;">
                <x:call>
                    <x:param position="1" select="*">
                        <dummy/>
                    </x:param>
                </x:call>
                
                <x:scenario label="function($c as node()){$c}(*)">
                    <x:call>
                        <x:param position="2" select="string()"
                            >function($c as node()){$c}(*)</x:param>
                    </x:call>
                    <x:expect label="should fail" test="$x:result instance of map(*)"/>
                </x:scenario>
                <x:scenario label="function($c as node()){$c}(*)">
                    <x:call>
                        <x:param position="2" select="string()"
                            >function($c) as node(){$c}(*)</x:param>
                    </x:call>
                    <x:expect label="should fail" test="$x:result instance of map(*)"/>
                </x:scenario>
                
            </x:scenario>
            <x:scenario label="context: empty">
                <x:call>
                    <x:param position="1" select="()"/>
                </x:call>
                
                <x:scenario label="format-number(931.45, '000.##0', 'foo:bar')">
                    <x:call>
                        <x:param position="2" select="string()"
                            >format-number(931.45, '000.##0', 'foo:bar')</x:param>
                    </x:call>
                    <x:expect label="should fail" test="$x:result instance of map(*)"/>
                </x:scenario>
            </x:scenario>
            <x:scenario label="with reverse axis">
                <x:variable name="context-doc" select="/">
                    <asterix-universe>
                        <group xml:id="galier">
                            <name>Galier</name>
                            <character xml:id="ast">
                                <name>Asterix</name>
                                <position>Warrior</position>
                            </character>
                            <character xml:id="obel">
                                <name>Obelix</name>
                                <position>Menhir supplier</position>
                            </character>
                            <character xml:id="idf">
                                <name>Idefix</name>
                                <position>Dog of Obelix</position>
                            </character>
                            <character xml:id="maj">
                                <name>Majestix</name>
                                <position>Chief</position>
                            </character>
                        </group>
                        <group xml:id="roman">
                            <character xml:id="cäs">
                                <name>Cäsar</name>
                                <position>Imperator</position>
                            </character>
                            <character xml:id="gabo">
                                <name>Gaius Bonus</name>
                                <position>Centurion</position>
                            </character>
                        </group>
                    </asterix-universe>
                </x:variable>
                <x:scenario label="context: maj">
                    <x:variable name="context" select="id('maj', $context-doc)"/>
                    <x:call>
                        <x:param position="1" select="$context"/>
                    </x:call>
                    <x:scenario label="select: .">
                        <x:call>
                            <x:param position="2" select="'.'"/>
                        </x:call>
                        <x:expect label="compare with Saxon" select="$context ! (.)"/>
                        <x:expect label="not-empty" test="exists($x:result)"/>
                    </x:scenario>
                    
                    <x:scenario label="select: preceding-sibling::character">
                        <x:call>
                            <x:param position="2" select="'preceding-sibling::character'"/>
                        </x:call>
                        <x:expect label="compare with Saxon" select="$context ! (preceding-sibling::character)"/>
                        <x:expect label="not-empty" test="exists($x:result)"/>
                    </x:scenario>
                    
                    <x:scenario label="select: preceding-sibling::character[1]">
                        <x:call>
                            <x:param position="2" select="'preceding-sibling::character[1]'"/>
                        </x:call>
                        <x:expect label="compare with Saxon" select="$context ! (preceding-sibling::character[1])"/>
                        <x:expect label="not-empty" test="exists($x:result)"/>
                    </x:scenario>
                    
                    <x:scenario label="select: preceding-sibling::character[last()]">
                        <x:call>
                            <x:param position="2" select="'preceding-sibling::character[last()]'"/>
                        </x:call>
                        <x:expect label="compare with Saxon" select="$context ! (preceding-sibling::character[last()])"/>
                        <x:expect label="not-empty" test="exists($x:result)"/>
                    </x:scenario>
                    
                    <x:scenario label="select: preceding-sibling::character[contains(position, ' ')][1]">
                        <x:call>
                            <x:param position="2"
                                >preceding-sibling::character[contains(position, ' ')][1]</x:param>
                        </x:call>
                        <x:expect label="compare with Saxon" select="$context ! (preceding-sibling::character[contains(position, ' ')][1])"/>
                        <x:expect label="not-empty" test="exists($x:result)"/>
                        <x:expect label="Result ID: idf" test="$x:result ! string(@xml:id)" select="'idf'"/>
                    </x:scenario>
                    
                    <x:scenario label="select: preceding-sibling::character[1][contains(position, ' ')]">
                        <x:call>
                            <x:param position="2"
                                >preceding-sibling::character[1][contains(position, ' ')]</x:param>
                        </x:call>
                        <x:expect label="compare with Saxon" select="$context ! (preceding-sibling::character[contains(position, ' ')][1])"/>
                        <x:expect label="not-empty" test="exists($x:result)"/>
                    </x:scenario>
                    
                    <x:scenario label="select: ancestor::*">
                        <x:call>
                            <x:param position="2" select="'ancestor::*'"/>
                        </x:call>
                        <x:expect label="compare with Saxon" select="$context ! (ancestor::*)"/>
                        <x:expect label="not-empty" test="exists($x:result)"/>
                    </x:scenario>
                </x:scenario>
            </x:scenario>
        </x:scenario>
        
        <x:scenario label="with available resources in test config">
            <x:variable name="available-resources" select="
                map{
                    'http://www.nkutsche.com/testing/available.xml' : / 
                }
                ">
                <available/>
            </x:variable>
            <x:variable name="test-config" select="map{
                'namespaces' : $namespaces,
                'base-uri' : 'http://www.nkutsche.com/testing/base.xml',
                'uri-resolver' : function($rel, $base){$available-resources(resolve-uri($rel, $base))}
                }"/>
            <x:call>
                <x:param position="3" select="$test-config"/>
            </x:call>
            
            <x:scenario label="context: &lt;dummy/&gt;">
                <x:call>
                    <x:param position="1" select="*">
                        <dummy/>
                    </x:param>
                </x:call>
                
                <x:scenario label="doc('available.xml')/available">
                    <x:call>
                        <x:param position="2" select="string()"
                            >doc('available.xml')/available</x:param>
                    </x:call>
                    <x:expect label="should return element">
                        <available/>
                    </x:expect>
                </x:scenario>
                <x:scenario label="doc('not-available.xml')">
                    <x:call>
                        <x:param position="2" select="string()"
                            >doc('not-available.xml')</x:param>
                    </x:call>
                    <x:expect label="should fail" test="$x:result instance of map(*)"/>
                </x:scenario>
                <x:scenario label="doc-available('available.xml')">
                    <x:call>
                        <x:param position="2" select="string()"
                            >doc-available('available.xml')</x:param>
                    </x:call>
                    <x:expect label="should return true()" select="true()"/>
                </x:scenario>
                <x:scenario label="doc-available('not-available.xml')">
                    <x:call>
                        <x:param position="2" select="string()"
                            >doc-available('not-available.xml')</x:param>
                    </x:call>
                    <x:expect label="should return true()" select="false()"/>
                </x:scenario>
            </x:scenario>
        </x:scenario>
        
        <x:scenario label="Testsuite test cases">
            <x:scenario label="fn-apply-06">
                <x:call>
                    <x:param position="1" select="()"/>
                    <x:param position="2" select="string()"
                        >apply(substring('flower', ?, ?), [ 3, 2 ])</x:param>
                    <x:param position="3" select="$test-config"></x:param>
                </x:call>
                <x:expect label="Should return 'ow'" select="'ow'"/>
            </x:scenario>
            <x:scenario label="ArrayTest-035">
                <x:call>
                    <x:param position="1" select="()"/>
                    <x:param position="2" select="string()"
                        >[("A", "B"), "C"] instance of array(xs:string)</x:param>
                    <x:param position="3" select="$test-config"></x:param>
                </x:call>
                <x:expect label="Should be false" select="false()"/>
            </x:scenario>
            <x:scenario label="ArrayTest-076">
                <x:call>
                    <x:param position="1" select="()"/>
                    <x:param position="2" select="string()"
                        ><![CDATA[
                        let $f := function($a as array(xs:string+)) as xs:boolean 
                        {array:size($a) eq 6},
                        $array:= ['a','b','c','d','e', ('f', 'g')]
                        return $f($array)
                        ]]></x:param>
                    <x:param position="3" select="$test-config"></x:param>
                </x:call>
                <x:expect label="Should be true" select="true()"/>
            </x:scenario>
            <x:scenario label="CastAs011">
                <x:call>
                    <x:param position="1" select="()"/>
                    <x:param position="2" select="string()"
                        ><![CDATA[
                        xs:untypedAtomic("true") cast as xs:float
                        ]]></x:param>
                    <x:param position="3" select="$test-config"/>
                </x:call>
                <x:expect label="Error code should be FORG0001" 
                    test="$x:result ! ?err ! ?code" select="xs:QName('err:FORG0001')"/>
            </x:scenario>
            <x:scenario label="Lookup-007">
                <x:call>
                    <x:param position="1" select="()"/>
                    <x:param position="2" select="string()"
                        ><![CDATA[
                        (['a', 'b', 'c'], ['b', 'c', 'd'], ['e', 'f', 'b'])[ .?(1 to 2) = 'b']
                        ]]></x:param>
                    <x:param position="3" select="$test-config"/>
                </x:call>
                <x:expect label="Result should be (['a', 'b', 'c'], ['b', 'c', 'd'])"  
                    select="['a', 'b', 'c'], ['b', 'c', 'd']"/>
            </x:scenario>
            <x:scenario label="Lookup-016">
                <x:call>
                    <x:param position="1" select="()"/>
                    <x:param position="2" select="string()"
                        ><![CDATA[
                        (['a', 'b', 'c'], ['b', 'c', 'd'], ['e', 'f', 'b'])
                        [contains(.?1, ?, 'http://www.w3.org/2005/xpath-functions/collation/codepoint')('a')]
                        ]]></x:param>
                    <x:param position="3" select="$test-config"/>
                </x:call>
                <x:expect label="Result should be ['a', 'b', 'c']"  select="['a', 'b', 'c']"/>
            </x:scenario>
            
            <x:scenario label="Lookup-101 (adjusted)">
                <x:call>
                    <x:param position="1" select="item">
                        <item>1</item>
                    </x:param>
                    <x:param position="2" select="string()"
                        ><![CDATA[
                        (['a', 'b'], ['c', 'd'])?(.)
                        ]]></x:param>
                    <x:param position="3" select="$test-config"/>
                </x:call>
                <x:expect label="Result should be ('a', 'c')"  select="'a', 'c'"/>
            </x:scenario>
            
            <x:scenario label="Lookup-101">
                <x:call>
                    <x:param position="1" select="()"/>
                    <x:param position="2" select="string()"
                        ><![CDATA[
                        (['a', 'b'], ['c', 'd'])?1
                        ]]></x:param>
                    <x:param position="3" select="$test-config"/>
                </x:call>
                <x:expect label="Result should be ('a', 'c')"  select="'a', 'c'"/>
            </x:scenario>
            <x:scenario label="Lookup-166">
                <x:call>
                    <x:param position="1" select="()"/>
                    <x:param position="2" select="string()"
                        ><![CDATA[
                        let $x := map{"else":18} return exists($x[?else = 18])
                        ]]></x:param>
                    <x:param position="3" select="$test-config"/>
                </x:call>
                <x:expect label="Result should be true()"  select="true()"/>
            </x:scenario>
            
        </x:scenario>
    </x:scenario>
    <x:scenario label="Testing function xpe:prepare-argument" catch="yes">
        <x:call function="xpe:prepare-argument"/>
        
        <x:scenario label="with dummy execution context">
            <x:call>
                <x:param position="1" select="map{}"/>
            </x:call>
            <x:scenario label="$typeDef = array(*)">
                <x:call>
                    <x:param position="3" name="typeDef">
                        <itemType>
                            <arrayType/>
                        </itemType>
                    </x:param>
                </x:call>
                <x:scenario label="$arg = ['a','b','c','d','e', 'f', 'g']">
                    <x:call>
                        <x:param position="2" select="['a','b','c','d','e', 'f', 'g']"/>
                    </x:call>
                    <x:expect label="argument should returned unchanged" 
                        select="['a','b','c','d','e', 'f', 'g']"/>
                </x:scenario>
            </x:scenario>
            <x:scenario label="$typeDef = array(xs:string)">
                <x:call>
                    <x:param position="3" name="typeDef">
                        <itemType>
                            <arrayType>
                                <itemType>
                                    <atomic name="xs:string"/>
                                </itemType>
                            </arrayType>
                        </itemType>
                    </x:param>
                </x:call>
                <x:scenario label="$arg = ['a','b','c','d','e', 'f', 'g']">
                    <x:call>
                        <x:param position="2" select="['a','b','c','d','e', 'f', 'g']"/>
                    </x:call>
                    <x:expect label="argument should returned unchanged" 
                        select="['a','b','c','d','e', 'f', 'g']"/>
                </x:scenario>
            </x:scenario>
            <x:scenario label="$typeDef = array(xs:string+)">
                <x:call>
                    <x:param position="3" name="typeDef">
                        <itemType>
                            <arrayType>
                                <itemType occurrence="one-or-more">
                                    <atomic name="xs:string"/>
                                </itemType>
                            </arrayType>
                        </itemType>
                    </x:param>
                </x:call>
                <x:scenario label="$arg = ['a','b','c','d','e', 'f', 'g']">
                    <x:call>
                        <x:param position="2" select="['a','b','c','d','e', 'f', 'g']"/>
                    </x:call>
                    <x:expect label="argument should returned unchanged" 
                        select="['a','b','c','d','e', 'f', 'g']"/>
                </x:scenario>
                <x:scenario label="$arg = ['a','b','c','d','e', ('f', 'g')]">
                    <x:call>
                        <x:param position="2" select="['a','b','c','d','e', ('f', 'g')]"/>
                    </x:call>
                    <x:expect label="argument should returned unchanged" 
                        select="['a','b','c','d','e', ('f', 'g')]"/>
                </x:scenario>
            </x:scenario>
            <x:scenario label="$typeDef = array(xs:integer)">
                <x:call>
                    <x:param position="3" name="typeDef">
                        <itemType>
                            <arrayType>
                                <itemType>
                                    <atomic name="xs:integer"/>
                                </itemType>
                            </arrayType>
                        </itemType>
                    </x:param>
                </x:call>
                <x:scenario label="$arg = [1, 2, 3, 4, 5, 6, 7]">
                    <x:call>
                        <x:param position="2" select="[1, 2, 3, 4, 5, 6, 7]"/>
                    </x:call>
                    <x:expect label="argument should returned unchanged" 
                        select="[1, 2, 3, 4, 5, 6, 7]"/>
                </x:scenario>
            </x:scenario>
        </x:scenario>
    </x:scenario>
    
    
    
</x:description>
