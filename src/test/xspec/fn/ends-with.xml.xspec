<?xml version="1.0" encoding="UTF-8"?><x:description xmlns:nk="http://www.nkutsche.com/xpath-model" xmlns:x="http://www.jenitennison.com/xslt/xspec" stylesheet="../../../main/resources/xsl/xpath-model.xsl"><x:scenario label="/qt3tests-master/fn/ends-with.xml"><x:call function="nk:xpath-model"/><x:scenario label="fn:ends-with(xs:string(&#34;This is a characte&#34;),xs:string(&#34;This is a characte&#34;))">
      <x:call>
        <x:param select="string(.)">fn:ends-with(xs:string("This is a characte"),xs:string("This is a characte"))</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="fn:ends-with(xs:string(&#34;This is a characte&#34;),xs:string(&#34;This is a characte&#34;))">
      <x:call>
        <x:param select="string(.)">fn:ends-with(xs:string("This is a characte"),xs:string("This is a characte"))</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="fn:ends-with(xs:string(&#34;This is a characte&#34;),xs:string(&#34;This is a characte&#34;))">
      <x:call>
        <x:param select="string(.)">fn:ends-with(xs:string("This is a characte"),xs:string("This is a characte"))</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="fn:ends-with(xs:string(&#34;This is a characte&#34;),xs:string(&#34;This is a characte&#34;))">
      <x:call>
        <x:param select="string(.)">fn:ends-with(xs:string("This is a characte"),xs:string("This is a characte"))</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="fn:ends-with(xs:string(&#34;This is a characte&#34;),xs:string(&#34;This is a characte&#34;))">
      <x:call>
        <x:param select="string(.)">fn:ends-with(xs:string("This is a characte"),xs:string("This is a characte"))</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="fn:ends-with(&#34;&#34;,&#34;&#34;)">
      <x:call>
        <x:param select="string(.)">fn:ends-with("","")</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="fn:ends-with(&#34;&#34;,&#34;A Character String&#34;)">
      <x:call>
        <x:param select="string(.)">fn:ends-with("","A Character String")</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="fn:ends-with(&#34;A Character String&#34;,&#34;&#34;)">
      <x:call>
        <x:param select="string(.)">fn:ends-with("A Character String","")</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="fn:ends-with((),&#34;&#34;)">
      <x:call>
        <x:param select="string(.)">fn:ends-with((),"")</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="fn:ends-with(&#34;&#34;,())">
      <x:call>
        <x:param select="string(.)">fn:ends-with("",())</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="fn:ends-with(&#34;A Character String&#34;,())">
      <x:call>
        <x:param select="string(.)">fn:ends-with("A Character String",())</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="fn:ends-with((),&#34;A Character String&#34;)">
      <x:call>
        <x:param select="string(.)">fn:ends-with((),"A Character String")</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="fn:ends-with(&#34;AAAAABBBBBCCCCC&#34;,&#34;BBBBB&#34;)">
      <x:call>
        <x:param select="string(.)">fn:ends-with("AAAAABBBBBCCCCC","BBBBB")</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="fn:ends-with(&#34;AAAAABBBBB&#34;,&#34; &#34;)">
      <x:call>
        <x:param select="string(.)">fn:ends-with("AAAAABBBBB"," ")</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="fn:ends-with(&#34; &#34;,&#34;AAAAABBBBB&#34;)">
      <x:call>
        <x:param select="string(.)">fn:ends-with(" ","AAAAABBBBB")</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="fn:not(fn:ends-with(&#34;A&#34;,&#34;A&#34;))">
      <x:call>
        <x:param select="string(.)">fn:not(fn:ends-with("A","A"))</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="fn:not(fn:ends-with(&#34;A&#34;,&#34;B&#34;))">
      <x:call>
        <x:param select="string(.)">fn:not(fn:ends-with("A","B"))</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="fn:ends-with(xs:string(&#34;A&#34;),&#34;A&#34;)">
      <x:call>
        <x:param select="string(.)">fn:ends-with(xs:string("A"),"A")</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="fn:ends-with(&#34;A&#34;,xs:string(&#34;A&#34;))">
      <x:call>
        <x:param select="string(.)">fn:ends-with("A",xs:string("A"))</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="fn:ends-with(&#34;A&#34;,&#34;a&#34;)">
      <x:call>
        <x:param select="string(.)">fn:ends-with("A","a")</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="fn:ends-with(&#34;a&#34;,&#34;A&#34;)">
      <x:call>
        <x:param select="string(.)">fn:ends-with("a","A")</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="ends-with()">
      <x:call>
        <x:param select="string(.)">ends-with()</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="ends-with(())">
      <x:call>
        <x:param select="string(.)">ends-with(())</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="ends-with((), (), &#34;http://www.w3.org/2005/xpath-functions/collation/codepoint&#34;, &#34;wrong param&#34;)">
      <x:call>
        <x:param select="string(.)">ends-with((), (), "http://www.w3.org/2005/xpath-functions/collation/codepoint", "wrong param")</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="ends-with(&#34;a string&#34;, &#34;a string&#34;, &#34;http://www.example.com/COLLATION/NOT/SUPPORTED&#34;)">
      <x:call>
        <x:param select="string(.)">ends-with("a string", "a string", "http://www.example.com/COLLATION/NOT/SUPPORTED")</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="ends-with(&#34;foo&#34;, &#34;foo&#34;, &#34;http://www.w3.org/2005/xpath-functions/collation/codepoint&#34;)">
      <x:call>
        <x:param select="string(.)">ends-with("foo", "foo", "http://www.w3.org/2005/xpath-functions/collation/codepoint")</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="ends-with(&#34;tattoo&#34;, &#34;tattoo&#34;)">
      <x:call>
        <x:param select="string(.)">ends-with("tattoo", "tattoo")</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="not(ends-with(&#34;tattoo&#34;, &#34;atto&#34;))">
      <x:call>
        <x:param select="string(.)">not(ends-with("tattoo", "atto"))</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="not(ends-with(&#34;tattoo&#34;, &#34;atto&#34;))">
      <x:call>
        <x:param select="string(.)">not(ends-with("tattoo", "atto"))</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="ends-with((), ())">
      <x:call>
        <x:param select="string(.)">ends-with((), ())</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="not(ends-with ((), &#34;a string&#34;))">
      <x:call>
        <x:param select="string(.)">not(ends-with ((), "a string"))</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="fn:boolean(fn:ends-with('input', '', 'http://www.w3.org/2005/xpath-functions/collation/codepoint'))">
      <x:call>
        <x:param select="string(.)">fn:boolean(fn:ends-with('input', '', 'http://www.w3.org/2005/xpath-functions/collation/codepoint'))</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario></x:scenario></x:description>