<?xml version="1.0" encoding="UTF-8"?><x:description xmlns:nk="http://www.nkutsche.com/xpath-model" xmlns:x="http://www.jenitennison.com/xslt/xspec" stylesheet="../../../main/resources/xsl/xpath-model.xsl"><x:scenario label="/qt3tests-master/fn/trace.xml"><x:call function="nk:xpath-model"/><x:scenario label="fn:trace()">
      <x:call>
        <x:param select="string(.)">fn:trace()</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="for $var in (1,2,3,4,5) return fn:trace($var + 1,&#34;The Value of $var + 1 is: &#34;)">
      <x:call>
        <x:param select="string(.)">for $var in (1,2,3,4,5) return fn:trace($var + 1,"The Value of $var + 1 is: ")</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="for $var in (2,3,4,5) return fn:trace($var - 1,&#34;The Value of $var - 1 is: &#34;)">
      <x:call>
        <x:param select="string(.)">for $var in (2,3,4,5) return fn:trace($var - 1,"The Value of $var - 1 is: ")</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="for $var in (2,3,4,5) return fn:trace($var * 2 ,&#34;The Value of $var * 2 is: &#34;)">
      <x:call>
        <x:param select="string(.)">for $var in (2,3,4,5) return fn:trace($var * 2 ,"The Value of $var * 2 is: ")</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="for $var in (2,4,6,8) return fn:trace($var div 2 ,&#34;The Value of $var div 2 is: &#34;)">
      <x:call>
        <x:param select="string(.)">for $var in (2,4,6,8) return fn:trace($var div 2 ,"The Value of $var div 2 is: ")</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="for $var in (2,4,6,8) return fn:trace($var idiv 2 ,&#34;The Value of $var idiv 2 is: &#34;)">
      <x:call>
        <x:param select="string(.)">for $var in (2,4,6,8) return fn:trace($var idiv 2 ,"The Value of $var idiv 2 is: ")</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="for $var in (2,4,6,8) return fn:trace($var mod 2 ,&#34;The Value of $var mod 2 is: &#34;)">
      <x:call>
        <x:param select="string(.)">for $var in (2,4,6,8) return fn:trace($var mod 2 ,"The Value of $var mod 2 is: ")</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="for $var1 in (2,4,6,8), $var2 in (3 + $var1) - (4 * $var1) &#xA;        return fn:trace($var1 + $var2 ,&#34;The Value of $var 1 + $var2 is: &#34;)">
      <x:call>
        <x:param select="string(.)">for $var1 in (2,4,6,8), $var2 in (3 + $var1) - (4 * $var1) 
        return fn:trace($var1 + $var2 ,"The Value of $var 1 + $var2 is: ")</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="for $var in (&#34;aa&#34;,&#34;bb&#34;,&#34;cc&#34;,&#34;dd&#34;,&#34;ee&#34;) return fn:trace(fn:concat($var,$var) ,&#34;The Value of concat($var,$var) is: &#34;)">
      <x:call>
        <x:param select="string(.)">for $var in ("aa","bb","cc","dd","ee") return fn:trace(fn:concat($var,$var) ,"The Value of concat($var,$var) is: ")</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="for $var in (/works//hours) return fn:trace(($var div 2) ,&#34;The Value of hours div/2 is: &#34;)">
      <x:call>
        <x:param select="string(.)">for $var in (/works//hours) return fn:trace(($var div 2) ,"The Value of hours div/2 is: ")</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="fn:trace((for $var in (/works//hours) return $var + $var) ,&#34;The Value of the given expression is: &#34;)">
      <x:call>
        <x:param select="string(.)">fn:trace((for $var in (/works//hours) return $var + $var) ,"The Value of the given expression is: ")</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="fn:trace((fn:avg((1,3,3,4,5)) * 2) ,&#34;The Value of 'fn:avg((1,3,3,4,5)) * 2' is: &#34;)">
      <x:call>
        <x:param select="string(.)">fn:trace((fn:avg((1,3,3,4,5)) * 2) ,"The Value of 'fn:avg((1,3,3,4,5)) * 2' is: ")</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="fn:trace((for $var in (1.1,2.2,3.3,4.4,5.5) return xs:integer($var)) ,&#34;The Value of 'for $var in (1.1,2.2,3.3,4.4,5.5) return xs:float($var)' is: &#34;)">
      <x:call>
        <x:param select="string(.)">fn:trace((for $var in (1.1,2.2,3.3,4.4,5.5) return xs:integer($var)) ,"The Value of 'for $var in (1.1,2.2,3.3,4.4,5.5) return xs:float($var)' is: ")</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="fn:trace((fn:trace((2+2),&#34;The value of '2 + 2' is:&#34; )) ,&#34;The Value of 'fn:trace(2+2)' is: &#34;)">
      <x:call>
        <x:param select="string(.)">fn:trace((fn:trace((2+2),"The value of '2 + 2' is:" )) ,"The Value of 'fn:trace(2+2)' is: ")</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="fn:trace((fn:count((1,2,-3,-4,5)) * 2) ,&#34;The Value of 'fn:count(1,2,-3,-4,5)) * 2' is: &#34;)">
      <x:call>
        <x:param select="string(.)">fn:trace((fn:count((1,2,-3,-4,5)) * 2) ,"The Value of 'fn:count(1,2,-3,-4,5)) * 2' is: ")</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="fn:trace((for $var in (fn:true(),fn:false(),fn:true()) return $var and fn:true()) ,&#34;The value of 'for $var in (fn:true(),fn:false(),fn:true() return $var and fn:true()' is:&#34;)">
      <x:call>
        <x:param select="string(.)">fn:trace((for $var in (fn:true(),fn:false(),fn:true()) return $var and fn:true()) ,"The value of 'for $var in (fn:true(),fn:false(),fn:true() return $var and fn:true()' is:")</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="fn:trace((for $var in (fn:true(),fn:false(),fn:true()) return $var or fn:true()) ,&#34;The value of 'for $var in (fn:true(),fn:false(),fn:true() return $var or fn:true()' is:&#34;)">
      <x:call>
        <x:param select="string(.)">fn:trace((for $var in (fn:true(),fn:false(),fn:true()) return $var or fn:true()) ,"The value of 'for $var in (fn:true(),fn:false(),fn:true() return $var or fn:true()' is:")</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="fn:count(fn:trace(() ,&#34;The value of the empty sequence is:&#34;))">
      <x:call>
        <x:param select="string(.)">fn:count(fn:trace(() ,"The value of the empty sequence is:"))</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="fn:count(fn:trace(&#34;&#34; ,&#34;The value of the zero length string is:&#34;))">
      <x:call>
        <x:param select="string(.)">fn:count(fn:trace("" ,"The value of the zero length string is:"))</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="fn:trace((for $var in (fn:upper-case(&#34;a&#34;),fn:lower-case(&#34;B&#34;)) return (fn:lower-case($var),fn:upper-case($var))) ,&#34;The value of the complex expression on the other argument is:&#34;)">
      <x:call>
        <x:param select="string(.)">fn:trace((for $var in (fn:upper-case("a"),fn:lower-case("B")) return (fn:lower-case($var),fn:upper-case($var))) ,"The value of the complex expression on the other argument is:")</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="trace()">
      <x:call>
        <x:param select="string(.)">trace()</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="trace(., &#34;message&#34;, &#34;wrong parameter&#34;)">
      <x:call>
        <x:param select="string(.)">trace(., "message", "wrong parameter")</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="trace(&#34;a string&#34;, &#34;trace message&#34;)">
      <x:call>
        <x:param select="string(.)">trace("a string", "trace message")</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="empty(trace((), &#34;trace message&#34;))">
      <x:call>
        <x:param select="string(.)">empty(trace((), "trace message"))</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="empty(trace(error(), &#34;trace message&#34;))">
      <x:call>
        <x:param select="string(.)">empty(trace(error(), "trace message"))</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario></x:scenario></x:description>