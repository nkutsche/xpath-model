<?xml version="1.0" encoding="UTF-8"?><x:description xmlns:nk="http://www.nkutsche.com/xpath-model" xmlns:x="http://www.jenitennison.com/xslt/xspec" stylesheet="../../../main/resources/xsl/xpath-model.xsl"><x:scenario label="generic-test" shared="yes">
    <x:call function="nk:xpath-model">
      <x:param select="$expr"/>
    </x:call>
    <x:expect label="result should be valid">
      <expr>...</expr>
    </x:expect>
  </x:scenario><x:scenario>
      <x:label>fn:tokenize("abba", ".?")</x:label>
      <x:variable name="expr" as="xs:string">fn:tokenize("abba", ".?")</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>fn:tokenize("The cat sat on the mat", "\s+", "t")</x:label>
      <x:variable name="expr" as="xs:string">fn:tokenize("The cat sat on the mat", "\s+", "t")</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>fn:tokenize("The cat sat on the mat", "\s+")</x:label>
      <x:variable name="expr" as="xs:string">fn:tokenize("The cat sat on the mat", "\s+")</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>fn:tokenize("1, 15, 24, 50", ",\s*")</x:label>
      <x:variable name="expr" as="xs:string">fn:tokenize("1, 15, 24, 50", ",\s*")</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>fn:tokenize("Some unparsed &lt;br&gt; HTML &lt;BR&gt; text", "\s*&lt;br&gt;\s*", "i")</x:label>
      <x:variable name="expr" as="xs:string">fn:tokenize("Some unparsed &lt;br&gt; HTML &lt;BR&gt; text", "\s*&lt;br&gt;\s*", "i")</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>fn:tokenize("Some unparsed &lt;br&gt; HTML &lt;BR&gt; text", "\s*&lt;br&gt;\s*", "")</x:label>
      <x:variable name="expr" as="xs:string">fn:tokenize("Some unparsed &lt;br&gt; HTML &lt;BR&gt; text", "\s*&lt;br&gt;\s*", "")</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>fn:count(fn:tokenize((), "\s+"))</x:label>
      <x:variable name="expr" as="xs:string">fn:count(fn:tokenize((), "\s+"))</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>fn:count(fn:tokenize("", "\s+"))</x:label>
      <x:variable name="expr" as="xs:string">fn:count(fn:tokenize("", "\s+"))</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>string-join(fn:tokenize("abracadabra", "(ab)|(a)"), '#')</x:label>
      <x:variable name="expr" as="xs:string">string-join(fn:tokenize("abracadabra", "(ab)|(a)"), '#')</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>fn:tokenize("abracadabra", "ww")</x:label>
      <x:variable name="expr" as="xs:string">fn:tokenize("abracadabra", "ww")</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>fn:tokenize("abracadabra", "^a")</x:label>
      <x:variable name="expr" as="xs:string">fn:tokenize("abracadabra", "^a")</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>fn:tokenize("abracadabra^abracadabra", "\^")</x:label>
      <x:variable name="expr" as="xs:string">fn:tokenize("abracadabra^abracadabra", "\^")</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>fn:tokenize("abracadabra?abracadabra", "\?")</x:label>
      <x:variable name="expr" as="xs:string">fn:tokenize("abracadabra?abracadabra", "\?")</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>fn:tokenize("abracadabra*abracadabra", "\*")</x:label>
      <x:variable name="expr" as="xs:string">fn:tokenize("abracadabra*abracadabra", "\*")</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>fn:tokenize("abracadabra+abracadabra", "\+")</x:label>
      <x:variable name="expr" as="xs:string">fn:tokenize("abracadabra+abracadabra", "\+")</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>fn:tokenize("abracadabra{abracadabra", "\{")</x:label>
      <x:variable name="expr" as="xs:string">fn:tokenize("abracadabra{abracadabra", "\{")</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>fn:tokenize("abracadabra}abracadabra", "\}")</x:label>
      <x:variable name="expr" as="xs:string">fn:tokenize("abracadabra}abracadabra", "\}")</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>fn:tokenize("abracadabra(abracadabra", "\(")</x:label>
      <x:variable name="expr" as="xs:string">fn:tokenize("abracadabra(abracadabra", "\(")</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>fn:tokenize("abracadabra)abracadabra", "\)")</x:label>
      <x:variable name="expr" as="xs:string">fn:tokenize("abracadabra)abracadabra", "\)")</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>fn:tokenize("abracadabra[abracadabra", "\[")</x:label>
      <x:variable name="expr" as="xs:string">fn:tokenize("abracadabra[abracadabra", "\[")</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>fn:tokenize("abracadabra]abracadabra", "\]")</x:label>
      <x:variable name="expr" as="xs:string">fn:tokenize("abracadabra]abracadabra", "\]")</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>fn:tokenize("abracadabra-abracadabra", "\-")</x:label>
      <x:variable name="expr" as="xs:string">fn:tokenize("abracadabra-abracadabra", "\-")</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>fn:tokenize("abracadabra.abracadabra", "\.")</x:label>
      <x:variable name="expr" as="xs:string">fn:tokenize("abracadabra.abracadabra", "\.")</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>fn:tokenize("abracadabra|abracadabra", "\|")</x:label>
      <x:variable name="expr" as="xs:string">fn:tokenize("abracadabra|abracadabra", "\|")</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>fn:tokenize("abracadabra\abracadabra", "\\")</x:label>
      <x:variable name="expr" as="xs:string">fn:tokenize("abracadabra\abracadabra", "\\")</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>fn:tokenize("abracadabra	abracadabra", "\t")</x:label>
      <x:variable name="expr" as="xs:string">fn:tokenize("abracadabra	abracadabra", "\t")</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>fn:tokenize("abracadabra
abracadabra", "\n")</x:label>
      <x:variable name="expr" as="xs:string">fn:tokenize("abracadabra
abracadabra", "\n")</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>fn:tokenize("abracadabraabracadabra", "aa{1}")</x:label>
      <x:variable name="expr" as="xs:string">fn:tokenize("abracadabraabracadabra", "aa{1}")</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>fn:tokenize("abracadabraabracadabraabracadabra", "aa{1,}")</x:label>
      <x:variable name="expr" as="xs:string">fn:tokenize("abracadabraabracadabraabracadabra", "aa{1,}")</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>fn:tokenize("abracadabraabracadabraabracadabra", "aa{1,2}")</x:label>
      <x:variable name="expr" as="xs:string">fn:tokenize("abracadabraabracadabraabracadabra", "aa{1,2}")</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>fn:tokenize(concat('Mary', codepoints-to-string(13), 'Jones'), 'y.J')</x:label>
      <x:variable name="expr" as="xs:string">fn:tokenize(concat('Mary', codepoints-to-string(13), 'Jones'), 'y.J')</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>fn:tokenize(concat('Mary', codepoints-to-string(13), 'Jones'), 'y.J', 's')</x:label>
      <x:variable name="expr" as="xs:string">fn:tokenize(concat('Mary', codepoints-to-string(13), 'Jones'), 'y.J', 's')</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>fn:tokenize(concat('Mary', codepoints-to-string(10), 'Jones'), '^', 'm')</x:label>
      <x:variable name="expr" as="xs:string">fn:tokenize(concat('Mary', codepoints-to-string(10), 'Jones'), '^', 'm')</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>fn:tokenize(concat('Mary', codepoints-to-string(10), 'Jones'), '$', 'm')</x:label>
      <x:variable name="expr" as="xs:string">fn:tokenize(concat('Mary', codepoints-to-string(10), 'Jones'), '$', 'm')</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>fn:tokenize(concat('Mary', codepoints-to-string(10), 'Jones'), '^[\s]*$', 'm')</x:label>
      <x:variable name="expr" as="xs:string">fn:tokenize(concat('Mary', codepoints-to-string(10), 'Jones'), '^[\s]*$', 'm')</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>tokenize("input", ())</x:label>
      <x:variable name="expr" as="xs:string">tokenize("input", ())</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>tokenize("input", "pattern", " ")</x:label>
      <x:variable name="expr" as="xs:string">tokenize("input", "pattern", " ")</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>tokenize("input", "pattern", "X")</x:label>
      <x:variable name="expr" as="xs:string">tokenize("input", "pattern", "X")</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>tokenize("input", "pattern", "", ())</x:label>
      <x:variable name="expr" as="xs:string">tokenize("input", "pattern", "", ())</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>fn:tokenize(("abracadabra", current-time())[1] treat as xs:string, "(ab)|(a)")[last()] eq ""</x:label>
      <x:variable name="expr" as="xs:string">fn:tokenize(("abracadabra", current-time())[1] treat as xs:string, "(ab)|(a)")[last()] eq ""</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>empty(fn:tokenize(("abracadabra", current-time())[1] treat as xs:string, "(ab)|(a)")[last() + 1])</x:label>
      <x:variable name="expr" as="xs:string">empty(fn:tokenize(("abracadabra", current-time())[1] treat as xs:string, "(ab)|(a)")[last() + 1])</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>fn:tokenize(("abracadabra", current-time())[1] treat as xs:string, "(ab)|(a)")[last() - 1]</x:label>
      <x:variable name="expr" as="xs:string">fn:tokenize(("abracadabra", current-time())[1] treat as xs:string, "(ab)|(a)")[last() - 1]</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>fn:tokenize(("abracadabra", current-time())[1] treat as xs:string, "(ab)|(a)")[last() - 3]</x:label>
      <x:variable name="expr" as="xs:string">fn:tokenize(("abracadabra", current-time())[1] treat as xs:string, "(ab)|(a)")[last() - 3]</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>deep-equal(fn:tokenize("The cat sat on the mat", "\s+"), ("The", "cat", "sat", "on", "the", "mat")), count(fn:tokenize("The cat sat on the mat", "\s+")), count(fn:tokenize(" The cat sat on the mat ", "\s+")), fn:tokenize("The cat sat on the mat", "\s+")</x:label>
      <x:variable name="expr" as="xs:string">deep-equal(fn:tokenize("The cat sat on the mat", "\s+"), ("The", "cat", "sat", "on", "the", "mat")), count(fn:tokenize("The cat sat on the mat", "\s+")), count(fn:tokenize(" The cat sat on the mat ", "\s+")), fn:tokenize("The cat sat on the mat", "\s+")</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>replace('APXterms6', '\w{3}\d*([^TKR0-9]+).*$', '$1')</x:label>
      <x:variable name="expr" as="xs:string">replace('APXterms6', '\w{3}\d*([^TKR0-9]+).*$', '$1')</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>count(tokenize("a b", " ")), count(tokenize("a b", "\s")), string-join(tokenize("a b", " "), '|'), string-join(tokenize("a b", "\s"), '|'), tokenize("a b", " "), tokenize("a b", "\s")</x:label>
      <x:variable name="expr" as="xs:string">count(tokenize("a b", " ")), count(tokenize("a b", "\s")), string-join(tokenize("a b", " "), '|'), string-join(tokenize("a b", "\s"), '|'), tokenize("a b", " "), tokenize("a b", "\s")</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>for $x in xs:string(zero-or-one((1 to 10)[. mod 2 = -1])) return tokenize($x,',')</x:label>
      <x:variable name="expr" as="xs:string">for $x in xs:string(zero-or-one((1 to 10)[. mod 2 = -1])) return tokenize($x,',')</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>tokenize(string-join(for $x in (1 to 10)[. mod 2 = 0] return string($x),','),'[')</x:label>
      <x:variable name="expr" as="xs:string">tokenize(string-join(for $x in (1 to 10)[. mod 2 = 0] return string($x),','),'[')</x:variable>
      <x:like label="generic-test"/>
    </x:scenario></x:description>