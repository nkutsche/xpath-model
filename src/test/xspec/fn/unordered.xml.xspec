<?xml version="1.0" encoding="UTF-8"?><x:description xmlns:nk="http://www.nkutsche.com/xpath-model" xmlns:x="http://www.jenitennison.com/xslt/xspec" stylesheet="../../../main/resources/xsl/xpath-model.xsl"><x:scenario label="generic-test" shared="yes">
    <x:call function="nk:xpath-model">
      <x:param select="$expr"/>
    </x:call>
    <x:expect label="result should be valid">
      <expr>...</expr>
    </x:expect>
  </x:scenario><x:scenario>
      <x:label>fn:unordered( ("c",1, "xzy"))</x:label>
      <x:variable name="expr" as="xs:string">fn:unordered( ("c",1, "xzy"))</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>fn:unordered( ("c", "b", "a") )</x:label>
      <x:variable name="expr" as="xs:string">fn:unordered( ("c", "b", "a") )</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>fn:unordered ( ("a", "b", "c"))</x:label>
      <x:variable name="expr" as="xs:string">fn:unordered ( ("a", "b", "c"))</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>fn:unordered ( ("a", xs:string(""), "b", "c"))</x:label>
      <x:variable name="expr" as="xs:string">fn:unordered ( ("a", xs:string(""), "b", "c"))</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>fn:unordered ( ("a", xs:anyURI("www.example.com"), "b", "c"))</x:label>
      <x:variable name="expr" as="xs:string">fn:unordered ( ("a", xs:anyURI("www.example.com"), "b", "c"))</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>fn:unordered ( ("a", (), (), "b", "c"))</x:label>
      <x:variable name="expr" as="xs:string">fn:unordered ( ("a", (), (), "b", "c"))</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>fn:unordered ( ("a", xs:integer("100"), xs:integer("-100"), "b", "c"))</x:label>
      <x:variable name="expr" as="xs:string">fn:unordered ( ("a", xs:integer("100"), xs:integer("-100"), "b", "c"))</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>fn:unordered ( ("a", xs:decimal("-1.000000000001"), xs:integer("-100"), "b", "c"))</x:label>
      <x:variable name="expr" as="xs:string">fn:unordered ( ("a", xs:decimal("-1.000000000001"), xs:integer("-100"), "b", "c"))</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>fn:unordered ( ("a", xs:float("INF"), "b", "c"))</x:label>
      <x:variable name="expr" as="xs:string">fn:unordered ( ("a", xs:float("INF"), "b", "c"))</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>fn:unordered ( ("a", xs:float("-INF"), "b", "c"))</x:label>
      <x:variable name="expr" as="xs:string">fn:unordered ( ("a", xs:float("-INF"), "b", "c"))</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>fn:unordered ( ("a", xs:float("NaN"), "b", "c"))</x:label>
      <x:variable name="expr" as="xs:string">fn:unordered ( ("a", xs:float("NaN"), "b", "c"))</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>fn:unordered ( ("a", xs:float("1.01"), "b", "c"))</x:label>
      <x:variable name="expr" as="xs:string">fn:unordered ( ("a", xs:float("1.01"), "b", "c"))</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>fn:unordered ( ("a", xs:double("NaN"), "b", "c"))</x:label>
      <x:variable name="expr" as="xs:string">fn:unordered ( ("a", xs:double("NaN"), "b", "c"))</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>fn:unordered ( ("a", xs:double("1.01"), "b", "c"))</x:label>
      <x:variable name="expr" as="xs:string">fn:unordered ( ("a", xs:double("1.01"), "b", "c"))</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>fn:unordered ( ("a", xs:double("-INF"), "b", "c"))</x:label>
      <x:variable name="expr" as="xs:string">fn:unordered ( ("a", xs:double("-INF"), "b", "c"))</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>fn:unordered ( ("a", xs:double("INF"), "b", "c"))</x:label>
      <x:variable name="expr" as="xs:string">fn:unordered ( ("a", xs:double("INF"), "b", "c"))</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>fn:unordered ( ("a", xs:boolean("1"), "b", "c"))</x:label>
      <x:variable name="expr" as="xs:string">fn:unordered ( ("a", xs:boolean("1"), "b", "c"))</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>fn:unordered ( ("a", xs:boolean("0"), "b", "c"))</x:label>
      <x:variable name="expr" as="xs:string">fn:unordered ( ("a", xs:boolean("0"), "b", "c"))</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>fn:unordered ( ("a", xs:boolean("true"), "b", "c"))</x:label>
      <x:variable name="expr" as="xs:string">fn:unordered ( ("a", xs:boolean("true"), "b", "c"))</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>fn:unordered ( ("a", xs:boolean("false"), "b", "c"))</x:label>
      <x:variable name="expr" as="xs:string">fn:unordered ( ("a", xs:boolean("false"), "b", "c"))</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>fn:unordered ( ("a", xs:date("1993-03-31"), "b", "c"))</x:label>
      <x:variable name="expr" as="xs:string">fn:unordered ( ("a", xs:date("1993-03-31"), "b", "c"))</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>fn:unordered ( ("a", xs:dateTime("1972-12-31T00:00:00"), "b", "c"))</x:label>
      <x:variable name="expr" as="xs:string">fn:unordered ( ("a", xs:dateTime("1972-12-31T00:00:00"), "b", "c"))</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>fn:unordered ( ("a", xs:time("12:30:00"), "b", "c"))</x:label>
      <x:variable name="expr" as="xs:string">fn:unordered ( ("a", xs:time("12:30:00"), "b", "c"))</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>unordered()</x:label>
      <x:variable name="expr" as="xs:string">unordered()</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>unordered(1, 2)</x:label>
      <x:variable name="expr" as="xs:string">unordered(1, 2)</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>unordered(1) eq 1</x:label>
      <x:variable name="expr" as="xs:string">unordered(1) eq 1</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>count(unordered((1, 2, 3))) eq 3</x:label>
      <x:variable name="expr" as="xs:string">count(unordered((1, 2, 3))) eq 3</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>count(unordered((1, 2, current-time()))) eq 3</x:label>
      <x:variable name="expr" as="xs:string">count(unordered((1, 2, current-time()))) eq 3</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>empty(unordered(()))</x:label>
      <x:variable name="expr" as="xs:string">empty(unordered(()))</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>deep-equal((1, 2, 3), unordered((1, 2, 3)))</x:label>
      <x:variable name="expr" as="xs:string">deep-equal((1, 2, 3), unordered((1, 2, 3)))</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>unordered(error())</x:label>
      <x:variable name="expr" as="xs:string">unordered(error())</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>boolean(unordered(reverse((1 to 10)[. div 2 = 2])))</x:label>
      <x:variable name="expr" as="xs:string">boolean(unordered(reverse((1 to 10)[. div 2 = 2])))</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>floor(unordered((1 to 10)[. div 2 = 0]))</x:label>
      <x:variable name="expr" as="xs:string">floor(unordered((1 to 10)[. div 2 = 0]))</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>count(/works/employee[last()]/unordered(preceding-sibling::*))</x:label>
      <x:variable name="expr" as="xs:string">count(/works/employee[last()]/unordered(preceding-sibling::*))</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>count(/works/employee[last()]/unordered(preceding::*))</x:label>
      <x:variable name="expr" as="xs:string">count(/works/employee[last()]/unordered(preceding::*))</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>count((/works//day)[last()]/unordered(ancestor-or-self::*))</x:label>
      <x:variable name="expr" as="xs:string">count((/works//day)[last()]/unordered(ancestor-or-self::*))</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>count(unordered(reverse(for $i in (1,2,1) return /works/employee)))</x:label>
      <x:variable name="expr" as="xs:string">count(unordered(reverse(for $i in (1,2,1) return /works/employee)))</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>count(unordered(reverse(/works/employee[@name] | /works/employee[@gender])))</x:label>
      <x:variable name="expr" as="xs:string">count(unordered(reverse(/works/employee[@name] | /works/employee[@gender])))</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>count(unordered(for $e in reverse(/works/employee) return $e/@gender))</x:label>
      <x:variable name="expr" as="xs:string">count(unordered(for $e in reverse(/works/employee) return $e/@gender))</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>count(for $e in unordered(reverse(/works/employee)) return $e/@gender)</x:label>
      <x:variable name="expr" as="xs:string">count(for $e in unordered(reverse(/works/employee)) return $e/@gender)</x:variable>
      <x:like label="generic-test"/>
    </x:scenario></x:description>