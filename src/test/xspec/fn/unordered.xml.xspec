<?xml version="1.0" encoding="UTF-8"?><x:description xmlns:nk="http://www.nkutsche.com/xpath-model" xmlns:x="http://www.jenitennison.com/xslt/xspec" stylesheet="../../../main/resources/xsl/xpath-model.xsl"><x:scenario label="/qt3tests-master/fn/unordered.xml"><x:call function="nk:xpath-model"/><x:scenario label="fn:unordered( (&#34;c&#34;,1, &#34;xzy&#34;))">
      <x:call>
        <x:param select="string(.)">fn:unordered( ("c",1, "xzy"))</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="fn:unordered( (&#34;c&#34;, &#34;b&#34;, &#34;a&#34;) )">
      <x:call>
        <x:param select="string(.)">fn:unordered( ("c", "b", "a") )</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="fn:unordered ( (&#34;a&#34;, &#34;b&#34;, &#34;c&#34;))">
      <x:call>
        <x:param select="string(.)">fn:unordered ( ("a", "b", "c"))</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="fn:unordered ( (&#34;a&#34;, xs:string(&#34;&#34;), &#34;b&#34;, &#34;c&#34;))">
      <x:call>
        <x:param select="string(.)">fn:unordered ( ("a", xs:string(""), "b", "c"))</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="fn:unordered ( (&#34;a&#34;, xs:anyURI(&#34;www.example.com&#34;), &#34;b&#34;, &#34;c&#34;))">
      <x:call>
        <x:param select="string(.)">fn:unordered ( ("a", xs:anyURI("www.example.com"), "b", "c"))</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="fn:unordered ( (&#34;a&#34;, (), (), &#34;b&#34;, &#34;c&#34;))">
      <x:call>
        <x:param select="string(.)">fn:unordered ( ("a", (), (), "b", "c"))</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="fn:unordered ( (&#34;a&#34;, xs:integer(&#34;100&#34;), xs:integer(&#34;-100&#34;), &#34;b&#34;, &#34;c&#34;))">
      <x:call>
        <x:param select="string(.)">fn:unordered ( ("a", xs:integer("100"), xs:integer("-100"), "b", "c"))</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="fn:unordered ( (&#34;a&#34;, xs:decimal(&#34;-1.000000000001&#34;), xs:integer(&#34;-100&#34;), &#34;b&#34;, &#34;c&#34;))">
      <x:call>
        <x:param select="string(.)">fn:unordered ( ("a", xs:decimal("-1.000000000001"), xs:integer("-100"), "b", "c"))</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="fn:unordered ( (&#34;a&#34;, xs:float(&#34;INF&#34;), &#34;b&#34;, &#34;c&#34;))">
      <x:call>
        <x:param select="string(.)">fn:unordered ( ("a", xs:float("INF"), "b", "c"))</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="fn:unordered ( (&#34;a&#34;, xs:float(&#34;-INF&#34;), &#34;b&#34;, &#34;c&#34;))">
      <x:call>
        <x:param select="string(.)">fn:unordered ( ("a", xs:float("-INF"), "b", "c"))</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="fn:unordered ( (&#34;a&#34;, xs:float(&#34;NaN&#34;), &#34;b&#34;, &#34;c&#34;))">
      <x:call>
        <x:param select="string(.)">fn:unordered ( ("a", xs:float("NaN"), "b", "c"))</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="fn:unordered ( (&#34;a&#34;, xs:float(&#34;1.01&#34;), &#34;b&#34;, &#34;c&#34;))">
      <x:call>
        <x:param select="string(.)">fn:unordered ( ("a", xs:float("1.01"), "b", "c"))</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="fn:unordered ( (&#34;a&#34;, xs:double(&#34;NaN&#34;), &#34;b&#34;, &#34;c&#34;))">
      <x:call>
        <x:param select="string(.)">fn:unordered ( ("a", xs:double("NaN"), "b", "c"))</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="fn:unordered ( (&#34;a&#34;, xs:double(&#34;1.01&#34;), &#34;b&#34;, &#34;c&#34;))">
      <x:call>
        <x:param select="string(.)">fn:unordered ( ("a", xs:double("1.01"), "b", "c"))</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="fn:unordered ( (&#34;a&#34;, xs:double(&#34;-INF&#34;), &#34;b&#34;, &#34;c&#34;))">
      <x:call>
        <x:param select="string(.)">fn:unordered ( ("a", xs:double("-INF"), "b", "c"))</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="fn:unordered ( (&#34;a&#34;, xs:double(&#34;INF&#34;), &#34;b&#34;, &#34;c&#34;))">
      <x:call>
        <x:param select="string(.)">fn:unordered ( ("a", xs:double("INF"), "b", "c"))</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="fn:unordered ( (&#34;a&#34;, xs:boolean(&#34;1&#34;), &#34;b&#34;, &#34;c&#34;))">
      <x:call>
        <x:param select="string(.)">fn:unordered ( ("a", xs:boolean("1"), "b", "c"))</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="fn:unordered ( (&#34;a&#34;, xs:boolean(&#34;0&#34;), &#34;b&#34;, &#34;c&#34;))">
      <x:call>
        <x:param select="string(.)">fn:unordered ( ("a", xs:boolean("0"), "b", "c"))</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="fn:unordered ( (&#34;a&#34;, xs:boolean(&#34;true&#34;), &#34;b&#34;, &#34;c&#34;))">
      <x:call>
        <x:param select="string(.)">fn:unordered ( ("a", xs:boolean("true"), "b", "c"))</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="fn:unordered ( (&#34;a&#34;, xs:boolean(&#34;false&#34;), &#34;b&#34;, &#34;c&#34;))">
      <x:call>
        <x:param select="string(.)">fn:unordered ( ("a", xs:boolean("false"), "b", "c"))</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="fn:unordered ( (&#34;a&#34;, xs:date(&#34;1993-03-31&#34;), &#34;b&#34;, &#34;c&#34;))">
      <x:call>
        <x:param select="string(.)">fn:unordered ( ("a", xs:date("1993-03-31"), "b", "c"))</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="fn:unordered ( (&#34;a&#34;, xs:dateTime(&#34;1972-12-31T00:00:00&#34;), &#34;b&#34;, &#34;c&#34;))">
      <x:call>
        <x:param select="string(.)">fn:unordered ( ("a", xs:dateTime("1972-12-31T00:00:00"), "b", "c"))</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="fn:unordered ( (&#34;a&#34;, xs:time(&#34;12:30:00&#34;), &#34;b&#34;, &#34;c&#34;))">
      <x:call>
        <x:param select="string(.)">fn:unordered ( ("a", xs:time("12:30:00"), "b", "c"))</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="unordered()">
      <x:call>
        <x:param select="string(.)">unordered()</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="unordered(1, 2)">
      <x:call>
        <x:param select="string(.)">unordered(1, 2)</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="unordered(1) eq 1">
      <x:call>
        <x:param select="string(.)">unordered(1) eq 1</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="count(unordered((1, 2, 3))) eq 3">
      <x:call>
        <x:param select="string(.)">count(unordered((1, 2, 3))) eq 3</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="count(unordered((1, 2, current-time()))) eq 3">
      <x:call>
        <x:param select="string(.)">count(unordered((1, 2, current-time()))) eq 3</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="empty(unordered(()))">
      <x:call>
        <x:param select="string(.)">empty(unordered(()))</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="deep-equal((1, 2, 3), unordered((1, 2, 3)))">
      <x:call>
        <x:param select="string(.)">deep-equal((1, 2, 3), unordered((1, 2, 3)))</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="unordered(error())">
      <x:call>
        <x:param select="string(.)">unordered(error())</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="boolean(unordered(reverse((1 to 10)[. div 2 = 2])))">
      <x:call>
        <x:param select="string(.)">boolean(unordered(reverse((1 to 10)[. div 2 = 2])))</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="floor(unordered((1 to 10)[. div 2 = 0]))">
      <x:call>
        <x:param select="string(.)">floor(unordered((1 to 10)[. div 2 = 0]))</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="count(/works/employee[last()]/unordered(preceding-sibling::*))">
      <x:call>
        <x:param select="string(.)">count(/works/employee[last()]/unordered(preceding-sibling::*))</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="count(/works/employee[last()]/unordered(preceding::*))">
      <x:call>
        <x:param select="string(.)">count(/works/employee[last()]/unordered(preceding::*))</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="count((/works//day)[last()]/unordered(ancestor-or-self::*))">
      <x:call>
        <x:param select="string(.)">count((/works//day)[last()]/unordered(ancestor-or-self::*))</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="count(unordered(reverse(for $i in (1,2,1) return /works/employee)))">
      <x:call>
        <x:param select="string(.)">count(unordered(reverse(for $i in (1,2,1) return /works/employee)))</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="count(unordered(reverse(/works/employee[@name] | /works/employee[@gender])))">
      <x:call>
        <x:param select="string(.)">count(unordered(reverse(/works/employee[@name] | /works/employee[@gender])))</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="count(unordered(for $e in reverse(/works/employee) return $e/@gender))">
      <x:call>
        <x:param select="string(.)">count(unordered(for $e in reverse(/works/employee) return $e/@gender))</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="count(for $e in unordered(reverse(/works/employee)) return $e/@gender)">
      <x:call>
        <x:param select="string(.)">count(for $e in unordered(reverse(/works/employee)) return $e/@gender)</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario></x:scenario></x:description>