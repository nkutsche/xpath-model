<?xml version="1.0" encoding="UTF-8"?><x:description xmlns:nk="http://www.nkutsche.com/xpath-model" xmlns:x="http://www.jenitennison.com/xslt/xspec" stylesheet="../../../main/resources/xsl/xpath-model.xsl"><x:scenario label="/qt3tests-master/fn/substring-after.xml"><x:call function="nk:xpath-model"/><x:scenario label="fn:substring-after(&#34;&#34;,&#34;&#34;)">
      <x:call>
        <x:param select="string(.)">fn:substring-after("","")</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="fn:substring-after(&#34;&#34;,&#34;A Character String&#34;)">
      <x:call>
        <x:param select="string(.)">fn:substring-after("","A Character String")</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="fn:substring-after(&#34;A Character String&#34;,&#34;&#34;)">
      <x:call>
        <x:param select="string(.)">fn:substring-after("A Character String","")</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="fn:substring-after((),&#34;&#34;)">
      <x:call>
        <x:param select="string(.)">fn:substring-after((),"")</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="fn:substring-after(&#34;&#34;,())">
      <x:call>
        <x:param select="string(.)">fn:substring-after("",())</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="fn:substring-after(&#34;A Character String&#34;,())">
      <x:call>
        <x:param select="string(.)">fn:substring-after("A Character String",())</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="fn:substring-after((),&#34;A Character String&#34;)">
      <x:call>
        <x:param select="string(.)">fn:substring-after((),"A Character String")</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="fn:substring-after(&#34;AAAAABBBBBCCCCC&#34;,&#34;BBBBB&#34;)">
      <x:call>
        <x:param select="string(.)">fn:substring-after("AAAAABBBBBCCCCC","BBBBB")</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="fn:substring-after(&#34;AAAAABBBBB&#34;,&#34; &#34;)">
      <x:call>
        <x:param select="string(.)">fn:substring-after("AAAAABBBBB"," ")</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="fn:substring-after(&#34; &#34;,&#34;AAAAABBBBB&#34;)">
      <x:call>
        <x:param select="string(.)">fn:substring-after(" ","AAAAABBBBB")</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="fn:not(fn:substring-after(&#34;A&#34;,&#34;A&#34;))">
      <x:call>
        <x:param select="string(.)">fn:not(fn:substring-after("A","A"))</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="fn:not(fn:substring-after(&#34;A&#34;,&#34;B&#34;))">
      <x:call>
        <x:param select="string(.)">fn:not(fn:substring-after("A","B"))</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="fn:substring-after(xs:string(&#34;A&#34;),&#34;A&#34;)">
      <x:call>
        <x:param select="string(.)">fn:substring-after(xs:string("A"),"A")</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="fn:substring-after(&#34;A&#34;,xs:string(&#34;A&#34;))">
      <x:call>
        <x:param select="string(.)">fn:substring-after("A",xs:string("A"))</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="fn:substring-after(&#34;A&#34;,&#34;a&#34;)">
      <x:call>
        <x:param select="string(.)">fn:substring-after("A","a")</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="fn:substring-after(&#34;a&#34;,&#34;A&#34;)">
      <x:call>
        <x:param select="string(.)">fn:substring-after("a","A")</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="fn:substring-after(&#34;substring-after&#34;,&#34;substring-after&#34;)">
      <x:call>
        <x:param select="string(.)">fn:substring-after("substring-after","substring-after")</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="fn:substring-after(&#34;substring-aftersubstring-after&#34;,&#34;substring-after&#34;)">
      <x:call>
        <x:param select="string(.)">fn:substring-after("substring-aftersubstring-after","substring-after")</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="fn:substring-after(&#34;****&#34;,&#34;***&#34;)">
      <x:call>
        <x:param select="string(.)">fn:substring-after("****","***")</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="fn:substring-after(&#34;12345&#34;,&#34;1234&#34;)">
      <x:call>
        <x:param select="string(.)">fn:substring-after("12345","1234")</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="fn:substring-after(&#34;substring-after&#34;,&#34;refta-gnirtsbus&#34;)">
      <x:call>
        <x:param select="string(.)">fn:substring-after("substring-after","refta-gnirtsbus")</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="substring-after(&#34;banana&#34;, &#34;a&#34;, &#34;http://www.w3.org/2005/xpath-functions/collation/codepoint&#34;)">
      <x:call>
        <x:param select="string(.)">substring-after("banana", "a", "http://www.w3.org/2005/xpath-functions/collation/codepoint")</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="substring-after(&#34;banana&#34;, &#34;a&#34;, &#34;collation/codepoint&#34;)">
      <x:call>
        <x:param select="string(.)">substring-after("banana", "a", "collation/codepoint")</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="substring-after(&#34;banana&#34;, &#34;A&#34;, &#34;http://www.w3.org/2010/09/qt-fots-catalog/collation/caseblind&#34;)">
      <x:call>
        <x:param select="string(.)">substring-after("banana", "A", "http://www.w3.org/2010/09/qt-fots-catalog/collation/caseblind")</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="substring-after(&#34;𐀁𐀂𐀃&#34;, &#34;𐀂&#34;)">
      <x:call>
        <x:param select="string(.)">substring-after("𐀁𐀂𐀃", "𐀂")</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="substring-after()">
      <x:call>
        <x:param select="string(.)">substring-after()</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="substring-after(())">
      <x:call>
        <x:param select="string(.)">substring-after(())</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="substring-after((), (), &#34;http://www.w3.org/2005/xpath-functions/collation/codepoint&#34;, &#34;wrong param&#34;)">
      <x:call>
        <x:param select="string(.)">substring-after((), (), "http://www.w3.org/2005/xpath-functions/collation/codepoint", "wrong param")</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="substring-after(&#34;a string&#34;, &#34;a string&#34;, &#34;http://www.example.com/COLLATION/NOT/SUPPORTED&#34;)">
      <x:call>
        <x:param select="string(.)">substring-after("a string", "a string", "http://www.example.com/COLLATION/NOT/SUPPORTED")</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="substring-after(&#34;foo&#34;, &#34;fo&#34;, &#34;http://www.w3.org/2005/xpath-functions/collation/codepoint&#34;) eq &#34;o&#34;">
      <x:call>
        <x:param select="string(.)">substring-after("foo", "fo", "http://www.w3.org/2005/xpath-functions/collation/codepoint") eq "o"</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="substring-after(&#34;tattoo&#34;, &#34;tat&#34;) eq &#34;too&#34;">
      <x:call>
        <x:param select="string(.)">substring-after("tattoo", "tat") eq "too"</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="substring-after(&#34;tattoo&#34;, &#34;tattoo&#34;) eq &#34;&#34;">
      <x:call>
        <x:param select="string(.)">substring-after("tattoo", "tattoo") eq ""</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="substring-after(&#34;abcdefgedij&#34;, &#34;def&#34;) eq &#34;gedij&#34;">
      <x:call>
        <x:param select="string(.)">substring-after("abcdefgedij", "def") eq "gedij"</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="substring-after((), ()) eq &#34;&#34;">
      <x:call>
        <x:param select="string(.)">substring-after((), ()) eq ""</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="substring-after(&#34;a string&#34;, ()) eq &#34;a string&#34;">
      <x:call>
        <x:param select="string(.)">substring-after("a string", ()) eq "a string"</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="substring-after(&#34;a string&#34;, &#34;not in other&#34;) eq &#34;&#34;">
      <x:call>
        <x:param select="string(.)">substring-after("a string", "not in other") eq ""</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="fn:boolean(fn:substring-after('input', '', 'http://www.w3.org/2005/xpath-functions/collation/codepoint'))">
      <x:call>
        <x:param select="string(.)">fn:boolean(fn:substring-after('input', '', 'http://www.w3.org/2005/xpath-functions/collation/codepoint'))</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario></x:scenario></x:description>