<?xml version="1.0" encoding="UTF-8"?><x:description xmlns:nk="http://www.nkutsche.com/xpath-model" xmlns:x="http://www.jenitennison.com/xslt/xspec" stylesheet="../../../main/resources/xsl/xpath-model.xsl"><x:scenario label="generic-test" shared="yes">
    <x:call function="nk:xpath-model">
      <x:param select="$expr"/>
    </x:call>
    <x:expect label="result should be valid">
      <expr>...</expr>
    </x:expect>
  </x:scenario><x:scenario>
      <x:label>for $h in (/works) return $h//employee[last()]/string(@name)</x:label>
      <x:variable name="expr" as="xs:string">for $h in (/works) return $h//employee[last()]/string(@name)</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>last()</x:label>
      <x:variable name="expr" as="xs:string">last()</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>for $h in (/works/employee[12]) return $h/overtime[last() = 1]/*/string()</x:label>
      <x:variable name="expr" as="xs:string">for $h in (/works/employee[12]) return $h/overtime[last() = 1]/*/string()</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>for $h in (/works) return $h/employee[position() = last()]/string(@name)</x:label>
      <x:variable name="expr" as="xs:string">for $h in (/works) return $h/employee[position() = last()]/string(@name)</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>for $h in (/works) return $h/employee[last() = position()]/string(@name)</x:label>
      <x:variable name="expr" as="xs:string">for $h in (/works) return $h/employee[last() = position()]/string(@name)</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>for $h in (/works) return $h/employee[last()] &lt;&lt; $h/employee[last()]</x:label>
      <x:variable name="expr" as="xs:string">for $h in (/works) return $h/employee[last()] &lt;&lt; $h/employee[last()]</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>for $h in (/works) return $h/employee[last()] is $h/employee[last()]</x:label>
      <x:variable name="expr" as="xs:string">for $h in (/works) return $h/employee[last()] is $h/employee[last()]</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>for $h in (/works/employee[12]) return $h/overtime[last() = last()]/*/string()</x:label>
      <x:variable name="expr" as="xs:string">for $h in (/works/employee[12]) return $h/overtime[last() = last()]/*/string()</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>for $h in (/works) return $h//employee[@name="Jane Doe 13"][last() = 1]/string(@name)</x:label>
      <x:variable name="expr" as="xs:string">for $h in (/works) return $h//employee[@name="Jane Doe 13"][last() = 1]/string(@name)</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>for $h in (/works) return $h//employee[last() = 13][@name = "Jane Doe 13"]/string(@name)</x:label>
      <x:variable name="expr" as="xs:string">for $h in (/works) return $h//employee[last() = 13][@name = "Jane Doe 13"]/string(@name)</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>for $h in (/works/employee[12]/overtime) return $h/day[not(position() = 1)]</x:label>
      <x:variable name="expr" as="xs:string">for $h in (/works/employee[12]/overtime) return $h/day[not(position() = 1)]</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>for $h in (/works/employee[12]/overtime) return $h/*[position() = position()]/string()</x:label>
      <x:variable name="expr" as="xs:string">for $h in (/works/employee[12]/overtime) return $h/*[position() = position()]/string()</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>for $h in (/works) return $h/employee[position() = (2 + 2)]/string(@name)</x:label>
      <x:variable name="expr" as="xs:string">for $h in (/works) return $h/employee[position() = (2 + 2)]/string(@name)</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>for $h in (/works) return $h/employee[position() = (5 - 2)]/string(@name)</x:label>
      <x:variable name="expr" as="xs:string">for $h in (/works) return $h/employee[position() = (5 - 2)]/string(@name)</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>for $h in (/works) return $h/employee[position() = (3 * 2)]/string(@name)</x:label>
      <x:variable name="expr" as="xs:string">for $h in (/works) return $h/employee[position() = (3 * 2)]/string(@name)</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>for $h in (/works) return $h/employee[position() = (6 div 2)]/string(@name)</x:label>
      <x:variable name="expr" as="xs:string">for $h in (/works) return $h/employee[position() = (6 div 2)]/string(@name)</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>for $h in (/works) return $h/employee[position() = (6 idiv 2)]/string(@name)</x:label>
      <x:variable name="expr" as="xs:string">for $h in (/works) return $h/employee[position() = (6 idiv 2)]/string(@name)</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>for $h in (/works/employee[12]) return ($h/overtime[position() and fn:true()]/*/string())</x:label>
      <x:variable name="expr" as="xs:string">for $h in (/works/employee[12]) return ($h/overtime[position() and fn:true()]/*/string())</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>for $h in (/works/employee[12]) return $h/overtime[position() and fn:false()]</x:label>
      <x:variable name="expr" as="xs:string">for $h in (/works/employee[12]) return $h/overtime[position() and fn:false()]</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>for $h in (/works/employee[12]) return $h/overtime[position() or fn:true()]/*/string()</x:label>
      <x:variable name="expr" as="xs:string">for $h in (/works/employee[12]) return $h/overtime[position() or fn:true()]/*/string()</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>for $h in (/works/employee[12]) return $h/overtime[position() or fn:false()]/*/string()</x:label>
      <x:variable name="expr" as="xs:string">for $h in (/works/employee[12]) return $h/overtime[position() or fn:false()]/*/string()</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>for $h in (/works) return $h/employee[position() = 12]/overtime/*/string()</x:label>
      <x:variable name="expr" as="xs:string">for $h in (/works) return $h/employee[position() = 12]/overtime/*/string()</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>for $h in (/works) return $h/employee[position() = 5 to last()]/@name/string()</x:label>
      <x:variable name="expr" as="xs:string">for $h in (/works) return $h/employee[position() = 5 to last()]/@name/string()</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>last()</x:label>
      <x:variable name="expr" as="xs:string">last()</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>/works/employee/*/last()</x:label>
      <x:variable name="expr" as="xs:string">/works/employee/*/last()</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>last(1)</x:label>
      <x:variable name="expr" as="xs:string">last(1)</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>(1, 2, 3)[if(1) then 1 else last()]</x:label>
      <x:variable name="expr" as="xs:string">(1, 2, 3)[if(1) then 1 else last()]</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>deep-equal((1, 2, 3)[count((last(), last())) eq 2], (1, 2, 3))</x:label>
      <x:variable name="expr" as="xs:string">deep-equal((1, 2, 3)[count((last(), last())) eq 2], (1, 2, 3))</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>deep-equal((1, 2, 3)[last() eq last()], (1, 2, 3))</x:label>
      <x:variable name="expr" as="xs:string">deep-equal((1, 2, 3)[last() eq last()], (1, 2, 3))</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>(1, 2, 3, current-time())[last() - 1] treat as xs:integer eq 3</x:label>
      <x:variable name="expr" as="xs:string">(1, 2, 3, current-time())[last() - 1] treat as xs:integer eq 3</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>empty((1, 2, 3, current-time())[last() + 1])</x:label>
      <x:variable name="expr" as="xs:string">empty((1, 2, 3, current-time())[last() + 1])</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>empty((1, 2, 3, current-time(), current-date(), 6, 7, 8) [last() = 0])</x:label>
      <x:variable name="expr" as="xs:string">empty((1, 2, 3, current-time(), current-date(), 6, 7, 8) [last() = 0])</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>empty((1, 2, 3, current-time(), current-date(), 6, 7, 8) [0 = last()])</x:label>
      <x:variable name="expr" as="xs:string">empty((1, 2, 3, current-time(), current-date(), 6, 7, 8) [0 = last()])</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>empty((1, 2, 3, current-time(), current-date(), 6, 7, 8) [last() eq 0])</x:label>
      <x:variable name="expr" as="xs:string">empty((1, 2, 3, current-time(), current-date(), 6, 7, 8) [last() eq 0])</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>empty((1, 2, 3, current-time(), current-date(), 6, 7, 8) [0 eq last()])</x:label>
      <x:variable name="expr" as="xs:string">empty((1, 2, 3, current-time(), current-date(), 6, 7, 8) [0 eq last()])</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>deep-equal( (1, 2, 3, remove((current-time(), 4), 1)) [last() != 0], (1, 2, 3, 4))</x:label>
      <x:variable name="expr" as="xs:string">deep-equal( (1, 2, 3, remove((current-time(), 4), 1)) [last() != 0], (1, 2, 3, 4))</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>deep-equal( (1, 2, 3, remove((current-time(), 4), 1)) [last() ne 0], (1, 2, 3, 4))</x:label>
      <x:variable name="expr" as="xs:string">deep-equal( (1, 2, 3, remove((current-time(), 4), 1)) [last() ne 0], (1, 2, 3, 4))</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>deep-equal( (1, 2, 3, remove((current-time(), 4), 1)) [0 != last()], (1, 2, 3, 4))</x:label>
      <x:variable name="expr" as="xs:string">deep-equal( (1, 2, 3, remove((current-time(), 4), 1)) [0 != last()], (1, 2, 3, 4))</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>deep-equal( (1, 2, 3, remove((current-time(), 4), 1)) [0 ne last()], (1, 2, 3, 4))</x:label>
      <x:variable name="expr" as="xs:string">deep-equal( (1, 2, 3, remove((current-time(), 4), 1)) [0 ne last()], (1, 2, 3, 4))</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>empty((1, 2, 3, current-time(), current-date(), 6, 7, 8) [last() lt 1])</x:label>
      <x:variable name="expr" as="xs:string">empty((1, 2, 3, current-time(), current-date(), 6, 7, 8) [last() lt 1])</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>empty((1, 2, 3, current-time(), current-date(), 6, 7, 8) [last() &lt; 1])</x:label>
      <x:variable name="expr" as="xs:string">empty((1, 2, 3, current-time(), current-date(), 6, 7, 8) [last() &lt; 1])</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>empty((1, 2, 3, current-time(), current-date(), 6, 7, 8) [last() le 0])</x:label>
      <x:variable name="expr" as="xs:string">empty((1, 2, 3, current-time(), current-date(), 6, 7, 8) [last() le 0])</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>empty((1, 2, 3, current-time(), current-date(), 6, 7, 8) [last() &lt;= 0])</x:label>
      <x:variable name="expr" as="xs:string">empty((1, 2, 3, current-time(), current-date(), 6, 7, 8) [last() &lt;= 0])</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>deep-equal( (1, 2, 3, remove((current-time(), 4), 1)) [last() &gt; 0], (1, 2, 3, 4))</x:label>
      <x:variable name="expr" as="xs:string">deep-equal( (1, 2, 3, remove((current-time(), 4), 1)) [last() &gt; 0], (1, 2, 3, 4))</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>deep-equal( (1, 2, 3, remove((current-time(), 4), 1)) [last() &gt; 0], (1, 2, 3, 4))</x:label>
      <x:variable name="expr" as="xs:string">deep-equal( (1, 2, 3, remove((current-time(), 4), 1)) [last() &gt; 0], (1, 2, 3, 4))</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>deep-equal( (1, 2, 3, remove((current-time(), 4), 1)) [last() gt 0], (1, 2, 3, 4))</x:label>
      <x:variable name="expr" as="xs:string">deep-equal( (1, 2, 3, remove((current-time(), 4), 1)) [last() gt 0], (1, 2, 3, 4))</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>deep-equal( (1, 2, 3, remove((current-time(), 4), 1)) [last() &gt;= 1], (1, 2, 3, 4))</x:label>
      <x:variable name="expr" as="xs:string">deep-equal( (1, 2, 3, remove((current-time(), 4), 1)) [last() &gt;= 1], (1, 2, 3, 4))</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>deep-equal( (1, 2, 3, remove((current-time(), 4), 1)) [last() ge 1], (1, 2, 3, 4))</x:label>
      <x:variable name="expr" as="xs:string">deep-equal( (1, 2, 3, remove((current-time(), 4), 1)) [last() ge 1], (1, 2, 3, 4))</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>(1, 2, 3, 4, current-time(), 4, 5, 6)[last() - 2] treat as xs:integer eq 4</x:label>
      <x:variable name="expr" as="xs:string">(1, 2, 3, 4, current-time(), 4, 5, 6)[last() - 2] treat as xs:integer eq 4</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>(1, 2, 3, 4, current-time(), 4, 5, 6)[last() - 1] treat as xs:integer eq 5</x:label>
      <x:variable name="expr" as="xs:string">(1, 2, 3, 4, current-time(), 4, 5, 6)[last() - 1] treat as xs:integer eq 5</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>(1, 2, 3, 4, current-time(), 4, 5, 6)[last()] treat as xs:integer eq 6</x:label>
      <x:variable name="expr" as="xs:string">(1, 2, 3, 4, current-time(), 4, 5, 6)[last()] treat as xs:integer eq 6</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>(1, 2, 3, 4, current-time(), 4, 5, 6)[last() - 0] treat as xs:integer eq 6</x:label>
      <x:variable name="expr" as="xs:string">(1, 2, 3, 4, current-time(), 4, 5, 6)[last() - 0] treat as xs:integer eq 6</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>(1 to 6)[last()] eq 6</x:label>
      <x:variable name="expr" as="xs:string">(1 to 6)[last()] eq 6</x:variable>
      <x:like label="generic-test"/>
    </x:scenario><x:scenario>
      <x:label>(-20 to -5)[last() - 3]</x:label>
      <x:variable name="expr" as="xs:string">(-20 to -5)[last() - 3]</x:variable>
      <x:like label="generic-test"/>
    </x:scenario></x:description>