<?xml version="1.0" encoding="UTF-8"?><x:description xmlns:nk="http://www.nkutsche.com/xpath-model" xmlns:x="http://www.jenitennison.com/xslt/xspec" stylesheet="../../../main/resources/xsl/xpath-model.xsl"><x:scenario label="/qt3tests-master/fn/last.xml"><x:call function="nk:xpath-model"/><x:scenario label="for $h in (/works) return $h//employee[last()]/string(@name)">
      <x:call>
        <x:param select="string(.)">for $h in (/works) return $h//employee[last()]/string(@name)</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="last()">
      <x:call>
        <x:param select="string(.)">last()</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="for $h in (/works/employee[12]) return $h/overtime[last() = 1]/*/string()">
      <x:call>
        <x:param select="string(.)">for $h in (/works/employee[12]) return $h/overtime[last() = 1]/*/string()</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="for $h in (/works) return $h/employee[position() = last()]/string(@name)">
      <x:call>
        <x:param select="string(.)">for $h in (/works) return $h/employee[position() = last()]/string(@name)</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="for $h in (/works) return $h/employee[last() = position()]/string(@name)">
      <x:call>
        <x:param select="string(.)">for $h in (/works) return $h/employee[last() = position()]/string(@name)</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="for $h in (/works) return $h/employee[last()] &lt;&lt; $h/employee[last()]">
      <x:call>
        <x:param select="string(.)">for $h in (/works) return $h/employee[last()] &lt;&lt; $h/employee[last()]</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="for $h in (/works) return $h/employee[last()] is $h/employee[last()]">
      <x:call>
        <x:param select="string(.)">for $h in (/works) return $h/employee[last()] is $h/employee[last()]</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="for $h in (/works/employee[12]) return $h/overtime[last() = last()]/*/string()">
      <x:call>
        <x:param select="string(.)">for $h in (/works/employee[12]) return $h/overtime[last() = last()]/*/string()</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="for $h in (/works) return $h//employee[@name=&#34;Jane Doe 13&#34;][last() = 1]/string(@name)">
      <x:call>
        <x:param select="string(.)">for $h in (/works) return $h//employee[@name="Jane Doe 13"][last() = 1]/string(@name)</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="for $h in (/works) return $h//employee[last() = 13][@name = &#34;Jane Doe 13&#34;]/string(@name)">
      <x:call>
        <x:param select="string(.)">for $h in (/works) return $h//employee[last() = 13][@name = "Jane Doe 13"]/string(@name)</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="for $h in (/works/employee[12]/overtime) return $h/day[not(position() = 1)]">
      <x:call>
        <x:param select="string(.)">for $h in (/works/employee[12]/overtime) return $h/day[not(position() = 1)]</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="for $h in (/works/employee[12]/overtime) return $h/*[position() = position()]/string()">
      <x:call>
        <x:param select="string(.)">for $h in (/works/employee[12]/overtime) return $h/*[position() = position()]/string()</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="for $h in (/works) return $h/employee[position() = (2 + 2)]/string(@name)">
      <x:call>
        <x:param select="string(.)">for $h in (/works) return $h/employee[position() = (2 + 2)]/string(@name)</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="for $h in (/works) return $h/employee[position() = (5 - 2)]/string(@name)">
      <x:call>
        <x:param select="string(.)">for $h in (/works) return $h/employee[position() = (5 - 2)]/string(@name)</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="for $h in (/works) return $h/employee[position() = (3 * 2)]/string(@name)">
      <x:call>
        <x:param select="string(.)">for $h in (/works) return $h/employee[position() = (3 * 2)]/string(@name)</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="for $h in (/works) return $h/employee[position() = (6 div 2)]/string(@name)">
      <x:call>
        <x:param select="string(.)">for $h in (/works) return $h/employee[position() = (6 div 2)]/string(@name)</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="for $h in (/works) return $h/employee[position() = (6 idiv 2)]/string(@name)">
      <x:call>
        <x:param select="string(.)">for $h in (/works) return $h/employee[position() = (6 idiv 2)]/string(@name)</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="for $h in (/works/employee[12]) return ($h/overtime[position() and fn:true()]/*/string())">
      <x:call>
        <x:param select="string(.)">for $h in (/works/employee[12]) return ($h/overtime[position() and fn:true()]/*/string())</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="for $h in (/works/employee[12]) return $h/overtime[position() and fn:false()]">
      <x:call>
        <x:param select="string(.)">for $h in (/works/employee[12]) return $h/overtime[position() and fn:false()]</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="for $h in (/works/employee[12]) return $h/overtime[position() or fn:true()]/*/string()">
      <x:call>
        <x:param select="string(.)">for $h in (/works/employee[12]) return $h/overtime[position() or fn:true()]/*/string()</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="for $h in (/works/employee[12]) return $h/overtime[position() or fn:false()]/*/string()">
      <x:call>
        <x:param select="string(.)">for $h in (/works/employee[12]) return $h/overtime[position() or fn:false()]/*/string()</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="for $h in (/works) return $h/employee[position() = 12]/overtime/*/string()">
      <x:call>
        <x:param select="string(.)">for $h in (/works) return $h/employee[position() = 12]/overtime/*/string()</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="for $h in (/works) return $h/employee[position() = 5 to last()]/@name/string()">
      <x:call>
        <x:param select="string(.)">for $h in (/works) return $h/employee[position() = 5 to last()]/@name/string()</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="last()">
      <x:call>
        <x:param select="string(.)">last()</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="/works/employee/*/last()">
      <x:call>
        <x:param select="string(.)">/works/employee/*/last()</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="last(1)">
      <x:call>
        <x:param select="string(.)">last(1)</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(1, 2, 3)[if(1) then 1 else last()]">
      <x:call>
        <x:param select="string(.)">(1, 2, 3)[if(1) then 1 else last()]</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="deep-equal((1, 2, 3)[count((last(), last())) eq 2], (1, 2, 3))">
      <x:call>
        <x:param select="string(.)">deep-equal((1, 2, 3)[count((last(), last())) eq 2], (1, 2, 3))</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="deep-equal((1, 2, 3)[last() eq last()], (1, 2, 3))">
      <x:call>
        <x:param select="string(.)">deep-equal((1, 2, 3)[last() eq last()], (1, 2, 3))</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(1, 2, 3, current-time())[last() - 1] treat as xs:integer eq 3">
      <x:call>
        <x:param select="string(.)">(1, 2, 3, current-time())[last() - 1] treat as xs:integer eq 3</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="empty((1, 2, 3, current-time())[last() + 1])">
      <x:call>
        <x:param select="string(.)">empty((1, 2, 3, current-time())[last() + 1])</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="empty((1, 2, 3, current-time(), current-date(), 6, 7, 8) [last() = 0])">
      <x:call>
        <x:param select="string(.)">empty((1, 2, 3, current-time(), current-date(), 6, 7, 8) [last() = 0])</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="empty((1, 2, 3, current-time(), current-date(), 6, 7, 8) [0 = last()])">
      <x:call>
        <x:param select="string(.)">empty((1, 2, 3, current-time(), current-date(), 6, 7, 8) [0 = last()])</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="empty((1, 2, 3, current-time(), current-date(), 6, 7, 8) [last() eq 0])">
      <x:call>
        <x:param select="string(.)">empty((1, 2, 3, current-time(), current-date(), 6, 7, 8) [last() eq 0])</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="empty((1, 2, 3, current-time(), current-date(), 6, 7, 8) [0 eq last()])">
      <x:call>
        <x:param select="string(.)">empty((1, 2, 3, current-time(), current-date(), 6, 7, 8) [0 eq last()])</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="deep-equal( (1, 2, 3, remove((current-time(), 4), 1)) [last() != 0], (1, 2, 3, 4))">
      <x:call>
        <x:param select="string(.)">deep-equal( (1, 2, 3, remove((current-time(), 4), 1)) [last() != 0], (1, 2, 3, 4))</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="deep-equal( (1, 2, 3, remove((current-time(), 4), 1)) [last() ne 0], (1, 2, 3, 4))">
      <x:call>
        <x:param select="string(.)">deep-equal( (1, 2, 3, remove((current-time(), 4), 1)) [last() ne 0], (1, 2, 3, 4))</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="deep-equal( (1, 2, 3, remove((current-time(), 4), 1)) [0 != last()], (1, 2, 3, 4))">
      <x:call>
        <x:param select="string(.)">deep-equal( (1, 2, 3, remove((current-time(), 4), 1)) [0 != last()], (1, 2, 3, 4))</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="deep-equal( (1, 2, 3, remove((current-time(), 4), 1)) [0 ne last()], (1, 2, 3, 4))">
      <x:call>
        <x:param select="string(.)">deep-equal( (1, 2, 3, remove((current-time(), 4), 1)) [0 ne last()], (1, 2, 3, 4))</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="empty((1, 2, 3, current-time(), current-date(), 6, 7, 8) [last() lt 1])">
      <x:call>
        <x:param select="string(.)">empty((1, 2, 3, current-time(), current-date(), 6, 7, 8) [last() lt 1])</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="empty((1, 2, 3, current-time(), current-date(), 6, 7, 8) [last() &lt; 1])">
      <x:call>
        <x:param select="string(.)">empty((1, 2, 3, current-time(), current-date(), 6, 7, 8) [last() &lt; 1])</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="empty((1, 2, 3, current-time(), current-date(), 6, 7, 8) [last() le 0])">
      <x:call>
        <x:param select="string(.)">empty((1, 2, 3, current-time(), current-date(), 6, 7, 8) [last() le 0])</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="empty((1, 2, 3, current-time(), current-date(), 6, 7, 8) [last() &lt;= 0])">
      <x:call>
        <x:param select="string(.)">empty((1, 2, 3, current-time(), current-date(), 6, 7, 8) [last() &lt;= 0])</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="deep-equal( (1, 2, 3, remove((current-time(), 4), 1)) [last() &gt; 0], (1, 2, 3, 4))">
      <x:call>
        <x:param select="string(.)">deep-equal( (1, 2, 3, remove((current-time(), 4), 1)) [last() &gt; 0], (1, 2, 3, 4))</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="deep-equal( (1, 2, 3, remove((current-time(), 4), 1)) [last() &gt; 0], (1, 2, 3, 4))">
      <x:call>
        <x:param select="string(.)">deep-equal( (1, 2, 3, remove((current-time(), 4), 1)) [last() &gt; 0], (1, 2, 3, 4))</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="deep-equal( (1, 2, 3, remove((current-time(), 4), 1)) [last() gt 0], (1, 2, 3, 4))">
      <x:call>
        <x:param select="string(.)">deep-equal( (1, 2, 3, remove((current-time(), 4), 1)) [last() gt 0], (1, 2, 3, 4))</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="deep-equal( (1, 2, 3, remove((current-time(), 4), 1)) [last() &gt;= 1], (1, 2, 3, 4))">
      <x:call>
        <x:param select="string(.)">deep-equal( (1, 2, 3, remove((current-time(), 4), 1)) [last() &gt;= 1], (1, 2, 3, 4))</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="deep-equal( (1, 2, 3, remove((current-time(), 4), 1)) [last() ge 1], (1, 2, 3, 4))">
      <x:call>
        <x:param select="string(.)">deep-equal( (1, 2, 3, remove((current-time(), 4), 1)) [last() ge 1], (1, 2, 3, 4))</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(1, 2, 3, 4, current-time(), 4, 5, 6)[last() - 2] treat as xs:integer eq 4">
      <x:call>
        <x:param select="string(.)">(1, 2, 3, 4, current-time(), 4, 5, 6)[last() - 2] treat as xs:integer eq 4</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(1, 2, 3, 4, current-time(), 4, 5, 6)[last() - 1] treat as xs:integer eq 5">
      <x:call>
        <x:param select="string(.)">(1, 2, 3, 4, current-time(), 4, 5, 6)[last() - 1] treat as xs:integer eq 5</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(1, 2, 3, 4, current-time(), 4, 5, 6)[last()] treat as xs:integer eq 6">
      <x:call>
        <x:param select="string(.)">(1, 2, 3, 4, current-time(), 4, 5, 6)[last()] treat as xs:integer eq 6</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(1, 2, 3, 4, current-time(), 4, 5, 6)[last() - 0] treat as xs:integer eq 6">
      <x:call>
        <x:param select="string(.)">(1, 2, 3, 4, current-time(), 4, 5, 6)[last() - 0] treat as xs:integer eq 6</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(1 to 6)[last()] eq 6">
      <x:call>
        <x:param select="string(.)">(1 to 6)[last()] eq 6</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario><x:scenario label="(-20 to -5)[last() - 3]">
      <x:call>
        <x:param select="string(.)">(-20 to -5)[last() - 3]</x:param>
      </x:call>
      <x:expect label="result should be valid">
        <expr>...</expr>
      </x:expect>
    </x:scenario></x:scenario></x:description>