<?xml version="1.0" encoding="UTF-8"?>
<!--
            This stylesheet is generated by type-system-generator.xsl
            with type-system-hierarchy.xml as input!
        -->
<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                xmlns:xs="http://www.w3.org/2001/XMLSchema"
                xmlns:math="http://www.w3.org/2005/xpath-functions/math"
                xmlns:xpt="http://www.nkutsche.com/xmlml/xpath-engine/types"
                xmlns:xpts="http://www.nkutsche.com/xmlml/xpath-engine/types-schema"
                xmlns:xpe="http://www.nkutsche.com/xpath-model/engine"
                xmlns:map="http://www.w3.org/2005/xpath-functions/map"
                version="3.0">
   <xsl:variable name="xpt:type-system">
      <xpt:type name="item" test="$n()">
         <xpt:type name="node">
            <xpt:type name="attribute"/>
            <xpt:type name="element"/>
            <xpt:type name="document" test="$n-node()">
            <!--<xpt:type name="document-with-content-check" test="document-node()" parameters="1"/>-->
        </xpt:type>
            <xpt:type name="comment"/>
            <xpt:type name="namespace" test="$n-node()"/>
            <xpt:type name="processing-instruction"/>
            <xpt:type name="text"/>
         </xpt:type>
         <xpt:type name="function" test="$n(*)">
            <xpt:type name="map">
            <!--<xpt:type name="map-typed" test="map(*)" paremters="2"/>-->
        </xpt:type>
            <xpt:type name="array">
            <!--                    <xpt:type name="array-typed" test="array(*)" paremters="2"/>-->
        </xpt:type>
            <!--                <xpt:type name="function-with-signature" test="function(*)" parameters="n"/>-->
         </xpt:type>
         <xpt:type name="xs:anyAtomicType"
                   test="$n"
                   simple="true"
                   castable="false">
            <xpt:type name="xs:untypedAtomic"/>
            <xpt:type name="xs:duration">
               <xpt:type name="xs:yearMonthDuration"/>
               <xpt:type name="xs:dayTimeDuration"/>
            </xpt:type>
            <xpt:type name="xs:time"/>
            <xpt:type name="xs:decimal">
               <xpt:type name="xs:integer">
                  <xpt:type name="xs:nonPositiveInteger"/>
                  <xpt:type name="xs:negativeInteger"/>
                  <xpt:type name="xs:long">
                    <xpt:type name="xs:int">
                        <xpt:type name="xs:short">
                            <xpt:type name="xs:byte"/>
                        </xpt:type>
                    </xpt:type>
                  </xpt:type>
                  <xpt:type name="xs:nonNegativeInteger">
                    <xpt:type name="xs:unsignedLong">
                        <xpt:type name="xs:unsignedInt">
                            <xpt:type name="xs:unsignedShort">
                                <xpt:type name="xs:unsignedByte"/>
                            </xpt:type>
                        </xpt:type>
                    </xpt:type>
                    <xpt:type name="xs:positiveInteger"/>
                  </xpt:type>
               </xpt:type>
            </xpt:type>
            <xpt:type name="xs:float"/>
            <xpt:type name="xs:double"/>
            <xpt:type name="xs:numeric">
            <!-- 
                NOTE: this is just a union type of xs:double, xs:float and xs:decimal
                See https://www.w3.org/TR/xpath-functions-31/#func-overloading
            -->
        </xpt:type>
            <xpt:type name="xs:gYearMonth"/>
            <xpt:type name="xs:gYear"/>
            <xpt:type name="xs:gMonthDay"/>
            <xpt:type name="xs:gMonth"/>
            <xpt:type name="xs:gDay"/>
            <xpt:type name="xs:boolean"/>
            <xpt:type name="xs:base64Binary"/>
            <xpt:type name="xs:hexBinary"/>
            <xpt:type name="xs:anyURI"/>
            <xpt:type name="xs:QName"/>
            <xpt:type name="xs:NOTATION" castable="false"/>
            <xpt:type name="xs:dateTime">
               <xpt:type name="xs:dateTimeStamp"/>
            </xpt:type>
            <xpt:type name="xs:date"/>
            <xpt:type name="xs:string">
               <xpt:type name="xs:normalizedString">
                  <xpt:type name="xs:token">
                    <xpt:type name="xs:language"/>
                    <xpt:type name="xs:NMTOKEN"/>
                    <xpt:type name="xs:Name">
                        <xpt:type name="xs:NCName">
                            <xpt:type name="xs:ID"/>
                            <xpt:type name="xs:IDREF"/>
                            <xpt:type name="xs:ENTITY"/>
                        </xpt:type>
                    </xpt:type>
                  </xpt:type>
               </xpt:type>
            </xpt:type>
         </xpt:type>
      </xpt:type>
   </xsl:variable>
   <xsl:function name="xpt:item" as="map(*)">
      <xsl:sequence select="                 map{                     'is-simple' : false(),'is-castable' : true(),'parent-type' : (),'instance-of' : function($item){$item instance of item()},'treat-as' : function($item){$item treat as item()}                 }                 "/>
   </xsl:function>
    <xsl:function name="xpt:node" as="map(*)">
      <xsl:sequence select="                 map{                     'is-simple' : false(),'is-castable' : true(),'parent-type' : Q{http://www.nkutsche.com/xmlml/xpath-engine/types}item(),'instance-of' : function($item){$item instance of node()},'treat-as' : function($item){$item treat as node()}                 }                 "/>
   </xsl:function>
        <xsl:function name="xpt:attribute" as="map(*)">
      <xsl:sequence select="                 map{                     'is-simple' : false(),'is-castable' : true(),'parent-type' : Q{http://www.nkutsche.com/xmlml/xpath-engine/types}node(),'instance-of' : function($item){$item instance of attribute()},'treat-as' : function($item){$item treat as attribute()}                 }                 "/>
   </xsl:function>
        <xsl:function name="xpt:element" as="map(*)">
      <xsl:sequence select="                 map{                     'is-simple' : false(),'is-castable' : true(),'parent-type' : Q{http://www.nkutsche.com/xmlml/xpath-engine/types}node(),'instance-of' : function($item){$item instance of element()},'treat-as' : function($item){$item treat as element()}                 }                 "/>
   </xsl:function>
        <xsl:function name="xpt:document" as="map(*)">
      <xsl:sequence select="                 map{                     'is-simple' : false(),'is-castable' : true(),'parent-type' : Q{http://www.nkutsche.com/xmlml/xpath-engine/types}node(),'instance-of' : function($item){$item instance of document-node()},'treat-as' : function($item){$item treat as document-node()}                 }                 "/>
   </xsl:function>
            
        
        <xsl:function name="xpt:comment" as="map(*)">
      <xsl:sequence select="                 map{                     'is-simple' : false(),'is-castable' : true(),'parent-type' : Q{http://www.nkutsche.com/xmlml/xpath-engine/types}node(),'instance-of' : function($item){$item instance of comment()},'treat-as' : function($item){$item treat as comment()}                 }                 "/>
   </xsl:function>
        <xsl:function name="xpt:namespace" as="map(*)">
      <xsl:sequence select="                 map{                     'is-simple' : false(),'is-castable' : true(),'parent-type' : Q{http://www.nkutsche.com/xmlml/xpath-engine/types}node(),'instance-of' : function($item){$item instance of namespace-node()},'treat-as' : function($item){$item treat as namespace-node()}                 }                 "/>
   </xsl:function>
        <xsl:function name="xpt:processing-instruction" as="map(*)">
      <xsl:sequence select="                 map{                     'is-simple' : false(),'is-castable' : true(),'parent-type' : Q{http://www.nkutsche.com/xmlml/xpath-engine/types}node(),'instance-of' : function($item){$item instance of processing-instruction()},'treat-as' : function($item){$item treat as processing-instruction()}                 }                 "/>
   </xsl:function>
        <xsl:function name="xpt:text" as="map(*)">
      <xsl:sequence select="                 map{                     'is-simple' : false(),'is-castable' : true(),'parent-type' : Q{http://www.nkutsche.com/xmlml/xpath-engine/types}node(),'instance-of' : function($item){$item instance of text()},'treat-as' : function($item){$item treat as text()}                 }                 "/>
   </xsl:function>
    
    <xsl:function name="xpt:function" as="map(*)">
      <xsl:sequence select="                 map{                     'is-simple' : false(),'is-castable' : true(),'parent-type' : Q{http://www.nkutsche.com/xmlml/xpath-engine/types}item(),'instance-of' : function($item){$item instance of function(*)},'treat-as' : function($item){$item treat as function(*)}                 }                 "/>
   </xsl:function>
        <xsl:function name="xpt:map" as="map(*)">
      <xsl:sequence select="                 map{                     'is-simple' : false(),'is-castable' : true(),'parent-type' : Q{http://www.nkutsche.com/xmlml/xpath-engine/types}function(),'instance-of' : function($item){$item instance of map(*)},'treat-as' : function($item){$item treat as map(*)}                 }                 "/>
   </xsl:function>
            
        
        <xsl:function name="xpt:array" as="map(*)">
      <xsl:sequence select="                 map{                     'is-simple' : false(),'is-castable' : true(),'parent-type' : Q{http://www.nkutsche.com/xmlml/xpath-engine/types}function(),'instance-of' : function($item){$item instance of array(*)},'treat-as' : function($item){$item treat as array(*)}                 }                 "/>
   </xsl:function>
            
        
        
    
    <xsl:function name="xpts:anyAtomicType" as="map(*)">
      <xsl:sequence select="                 map{                     'is-simple' : true(),'is-castable' : false(),'parent-type' : Q{http://www.nkutsche.com/xmlml/xpath-engine/types}item(),'instance-of' : function($item){$item instance of Q{http://www.w3.org/2001/XMLSchema}anyAtomicType},'treat-as' : function($item){$item treat as Q{http://www.w3.org/2001/XMLSchema}anyAtomicType},'cast-as' : function($item){error(xpe:error-code('XPST0080'), 'No value is castable to xs:anyAtomicType')},'castable-as' : function($item){error(xpe:error-code('XPST0080'), 'No value is castable to xs:anyAtomicType')}                 }                 "/>
   </xsl:function>
        <xsl:function name="xpts:untypedAtomic" as="map(*)">
      <xsl:sequence select="                 map{                     'is-simple' : true(),'is-castable' : true(),'parent-type' : Q{http://www.nkutsche.com/xmlml/xpath-engine/types-schema}anyAtomicType(),'instance-of' : function($item){$item instance of Q{http://www.w3.org/2001/XMLSchema}untypedAtomic},'treat-as' : function($item){$item treat as Q{http://www.w3.org/2001/XMLSchema}untypedAtomic},'cast-as' : function($item){$item cast as Q{http://www.w3.org/2001/XMLSchema}untypedAtomic},'castable-as' : function($item){$item castable as Q{http://www.w3.org/2001/XMLSchema}untypedAtomic}                 }                 "/>
   </xsl:function>
        <xsl:function name="xpts:duration" as="map(*)">
      <xsl:sequence select="                 map{                     'is-simple' : true(),'is-castable' : true(),'parent-type' : Q{http://www.nkutsche.com/xmlml/xpath-engine/types-schema}anyAtomicType(),'instance-of' : function($item){$item instance of Q{http://www.w3.org/2001/XMLSchema}duration},'treat-as' : function($item){$item treat as Q{http://www.w3.org/2001/XMLSchema}duration},'cast-as' : function($item){$item cast as Q{http://www.w3.org/2001/XMLSchema}duration},'castable-as' : function($item){$item castable as Q{http://www.w3.org/2001/XMLSchema}duration}                 }                 "/>
   </xsl:function>
            <xsl:function name="xpts:yearMonthDuration" as="map(*)">
      <xsl:sequence select="                 map{                     'is-simple' : true(),'is-castable' : true(),'parent-type' : Q{http://www.nkutsche.com/xmlml/xpath-engine/types-schema}duration(),'instance-of' : function($item){$item instance of Q{http://www.w3.org/2001/XMLSchema}yearMonthDuration},'treat-as' : function($item){$item treat as Q{http://www.w3.org/2001/XMLSchema}yearMonthDuration},'cast-as' : function($item){$item cast as Q{http://www.w3.org/2001/XMLSchema}yearMonthDuration},'castable-as' : function($item){$item castable as Q{http://www.w3.org/2001/XMLSchema}yearMonthDuration}                 }                 "/>
   </xsl:function>
            <xsl:function name="xpts:dayTimeDuration" as="map(*)">
      <xsl:sequence select="                 map{                     'is-simple' : true(),'is-castable' : true(),'parent-type' : Q{http://www.nkutsche.com/xmlml/xpath-engine/types-schema}duration(),'instance-of' : function($item){$item instance of Q{http://www.w3.org/2001/XMLSchema}dayTimeDuration},'treat-as' : function($item){$item treat as Q{http://www.w3.org/2001/XMLSchema}dayTimeDuration},'cast-as' : function($item){$item cast as Q{http://www.w3.org/2001/XMLSchema}dayTimeDuration},'castable-as' : function($item){$item castable as Q{http://www.w3.org/2001/XMLSchema}dayTimeDuration}                 }                 "/>
   </xsl:function>
        
        <xsl:function name="xpts:time" as="map(*)">
      <xsl:sequence select="                 map{                     'is-simple' : true(),'is-castable' : true(),'parent-type' : Q{http://www.nkutsche.com/xmlml/xpath-engine/types-schema}anyAtomicType(),'instance-of' : function($item){$item instance of Q{http://www.w3.org/2001/XMLSchema}time},'treat-as' : function($item){$item treat as Q{http://www.w3.org/2001/XMLSchema}time},'cast-as' : function($item){$item cast as Q{http://www.w3.org/2001/XMLSchema}time},'castable-as' : function($item){$item castable as Q{http://www.w3.org/2001/XMLSchema}time}                 }                 "/>
   </xsl:function>
        <xsl:function name="xpts:decimal" as="map(*)">
      <xsl:sequence select="                 map{                     'is-simple' : true(),'is-castable' : true(),'parent-type' : Q{http://www.nkutsche.com/xmlml/xpath-engine/types-schema}anyAtomicType(),'instance-of' : function($item){$item instance of Q{http://www.w3.org/2001/XMLSchema}decimal},'treat-as' : function($item){$item treat as Q{http://www.w3.org/2001/XMLSchema}decimal},'cast-as' : function($item){$item cast as Q{http://www.w3.org/2001/XMLSchema}decimal},'castable-as' : function($item){$item castable as Q{http://www.w3.org/2001/XMLSchema}decimal}                 }                 "/>
   </xsl:function>
            <xsl:function name="xpts:integer" as="map(*)">
      <xsl:sequence select="                 map{                     'is-simple' : true(),'is-castable' : true(),'parent-type' : Q{http://www.nkutsche.com/xmlml/xpath-engine/types-schema}decimal(),'instance-of' : function($item){$item instance of Q{http://www.w3.org/2001/XMLSchema}integer},'treat-as' : function($item){$item treat as Q{http://www.w3.org/2001/XMLSchema}integer},'cast-as' : function($item){$item cast as Q{http://www.w3.org/2001/XMLSchema}integer},'castable-as' : function($item){$item castable as Q{http://www.w3.org/2001/XMLSchema}integer}                 }                 "/>
   </xsl:function>
                <xsl:function name="xpts:nonPositiveInteger" as="map(*)">
      <xsl:sequence select="                 map{                     'is-simple' : true(),'is-castable' : true(),'parent-type' : Q{http://www.nkutsche.com/xmlml/xpath-engine/types-schema}integer(),'instance-of' : function($item){$item instance of Q{http://www.w3.org/2001/XMLSchema}nonPositiveInteger},'treat-as' : function($item){$item treat as Q{http://www.w3.org/2001/XMLSchema}nonPositiveInteger},'cast-as' : function($item){$item cast as Q{http://www.w3.org/2001/XMLSchema}nonPositiveInteger},'castable-as' : function($item){$item castable as Q{http://www.w3.org/2001/XMLSchema}nonPositiveInteger}                 }                 "/>
   </xsl:function>
                <xsl:function name="xpts:negativeInteger" as="map(*)">
      <xsl:sequence select="                 map{                     'is-simple' : true(),'is-castable' : true(),'parent-type' : Q{http://www.nkutsche.com/xmlml/xpath-engine/types-schema}integer(),'instance-of' : function($item){$item instance of Q{http://www.w3.org/2001/XMLSchema}negativeInteger},'treat-as' : function($item){$item treat as Q{http://www.w3.org/2001/XMLSchema}negativeInteger},'cast-as' : function($item){$item cast as Q{http://www.w3.org/2001/XMLSchema}negativeInteger},'castable-as' : function($item){$item castable as Q{http://www.w3.org/2001/XMLSchema}negativeInteger}                 }                 "/>
   </xsl:function>
                <xsl:function name="xpts:long" as="map(*)">
      <xsl:sequence select="                 map{                     'is-simple' : true(),'is-castable' : true(),'parent-type' : Q{http://www.nkutsche.com/xmlml/xpath-engine/types-schema}integer(),'instance-of' : function($item){$item instance of Q{http://www.w3.org/2001/XMLSchema}long},'treat-as' : function($item){$item treat as Q{http://www.w3.org/2001/XMLSchema}long},'cast-as' : function($item){$item cast as Q{http://www.w3.org/2001/XMLSchema}long},'castable-as' : function($item){$item castable as Q{http://www.w3.org/2001/XMLSchema}long}                 }                 "/>
   </xsl:function>
                    <xsl:function name="xpts:int" as="map(*)">
      <xsl:sequence select="                 map{                     'is-simple' : true(),'is-castable' : true(),'parent-type' : Q{http://www.nkutsche.com/xmlml/xpath-engine/types-schema}long(),'instance-of' : function($item){$item instance of Q{http://www.w3.org/2001/XMLSchema}int},'treat-as' : function($item){$item treat as Q{http://www.w3.org/2001/XMLSchema}int},'cast-as' : function($item){$item cast as Q{http://www.w3.org/2001/XMLSchema}int},'castable-as' : function($item){$item castable as Q{http://www.w3.org/2001/XMLSchema}int}                 }                 "/>
   </xsl:function>
                        <xsl:function name="xpts:short" as="map(*)">
      <xsl:sequence select="                 map{                     'is-simple' : true(),'is-castable' : true(),'parent-type' : Q{http://www.nkutsche.com/xmlml/xpath-engine/types-schema}int(),'instance-of' : function($item){$item instance of Q{http://www.w3.org/2001/XMLSchema}short},'treat-as' : function($item){$item treat as Q{http://www.w3.org/2001/XMLSchema}short},'cast-as' : function($item){$item cast as Q{http://www.w3.org/2001/XMLSchema}short},'castable-as' : function($item){$item castable as Q{http://www.w3.org/2001/XMLSchema}short}                 }                 "/>
   </xsl:function>
                            <xsl:function name="xpts:byte" as="map(*)">
      <xsl:sequence select="                 map{                     'is-simple' : true(),'is-castable' : true(),'parent-type' : Q{http://www.nkutsche.com/xmlml/xpath-engine/types-schema}short(),'instance-of' : function($item){$item instance of Q{http://www.w3.org/2001/XMLSchema}byte},'treat-as' : function($item){$item treat as Q{http://www.w3.org/2001/XMLSchema}byte},'cast-as' : function($item){$item cast as Q{http://www.w3.org/2001/XMLSchema}byte},'castable-as' : function($item){$item castable as Q{http://www.w3.org/2001/XMLSchema}byte}                 }                 "/>
   </xsl:function>
                        
                    
                
                <xsl:function name="xpts:nonNegativeInteger" as="map(*)">
      <xsl:sequence select="                 map{                     'is-simple' : true(),'is-castable' : true(),'parent-type' : Q{http://www.nkutsche.com/xmlml/xpath-engine/types-schema}integer(),'instance-of' : function($item){$item instance of Q{http://www.w3.org/2001/XMLSchema}nonNegativeInteger},'treat-as' : function($item){$item treat as Q{http://www.w3.org/2001/XMLSchema}nonNegativeInteger},'cast-as' : function($item){$item cast as Q{http://www.w3.org/2001/XMLSchema}nonNegativeInteger},'castable-as' : function($item){$item castable as Q{http://www.w3.org/2001/XMLSchema}nonNegativeInteger}                 }                 "/>
   </xsl:function>
                    <xsl:function name="xpts:unsignedLong" as="map(*)">
      <xsl:sequence select="                 map{                     'is-simple' : true(),'is-castable' : true(),'parent-type' : Q{http://www.nkutsche.com/xmlml/xpath-engine/types-schema}nonNegativeInteger(),'instance-of' : function($item){$item instance of Q{http://www.w3.org/2001/XMLSchema}unsignedLong},'treat-as' : function($item){$item treat as Q{http://www.w3.org/2001/XMLSchema}unsignedLong},'cast-as' : function($item){$item cast as Q{http://www.w3.org/2001/XMLSchema}unsignedLong},'castable-as' : function($item){$item castable as Q{http://www.w3.org/2001/XMLSchema}unsignedLong}                 }                 "/>
   </xsl:function>
                        <xsl:function name="xpts:unsignedInt" as="map(*)">
      <xsl:sequence select="                 map{                     'is-simple' : true(),'is-castable' : true(),'parent-type' : Q{http://www.nkutsche.com/xmlml/xpath-engine/types-schema}unsignedLong(),'instance-of' : function($item){$item instance of Q{http://www.w3.org/2001/XMLSchema}unsignedInt},'treat-as' : function($item){$item treat as Q{http://www.w3.org/2001/XMLSchema}unsignedInt},'cast-as' : function($item){$item cast as Q{http://www.w3.org/2001/XMLSchema}unsignedInt},'castable-as' : function($item){$item castable as Q{http://www.w3.org/2001/XMLSchema}unsignedInt}                 }                 "/>
   </xsl:function>
                            <xsl:function name="xpts:unsignedShort" as="map(*)">
      <xsl:sequence select="                 map{                     'is-simple' : true(),'is-castable' : true(),'parent-type' : Q{http://www.nkutsche.com/xmlml/xpath-engine/types-schema}unsignedInt(),'instance-of' : function($item){$item instance of Q{http://www.w3.org/2001/XMLSchema}unsignedShort},'treat-as' : function($item){$item treat as Q{http://www.w3.org/2001/XMLSchema}unsignedShort},'cast-as' : function($item){$item cast as Q{http://www.w3.org/2001/XMLSchema}unsignedShort},'castable-as' : function($item){$item castable as Q{http://www.w3.org/2001/XMLSchema}unsignedShort}                 }                 "/>
   </xsl:function>
                                <xsl:function name="xpts:unsignedByte" as="map(*)">
      <xsl:sequence select="                 map{                     'is-simple' : true(),'is-castable' : true(),'parent-type' : Q{http://www.nkutsche.com/xmlml/xpath-engine/types-schema}unsignedShort(),'instance-of' : function($item){$item instance of Q{http://www.w3.org/2001/XMLSchema}unsignedByte},'treat-as' : function($item){$item treat as Q{http://www.w3.org/2001/XMLSchema}unsignedByte},'cast-as' : function($item){$item cast as Q{http://www.w3.org/2001/XMLSchema}unsignedByte},'castable-as' : function($item){$item castable as Q{http://www.w3.org/2001/XMLSchema}unsignedByte}                 }                 "/>
   </xsl:function>
                            
                        
                    
                    <xsl:function name="xpts:positiveInteger" as="map(*)">
      <xsl:sequence select="                 map{                     'is-simple' : true(),'is-castable' : true(),'parent-type' : Q{http://www.nkutsche.com/xmlml/xpath-engine/types-schema}nonNegativeInteger(),'instance-of' : function($item){$item instance of Q{http://www.w3.org/2001/XMLSchema}positiveInteger},'treat-as' : function($item){$item treat as Q{http://www.w3.org/2001/XMLSchema}positiveInteger},'cast-as' : function($item){$item cast as Q{http://www.w3.org/2001/XMLSchema}positiveInteger},'castable-as' : function($item){$item castable as Q{http://www.w3.org/2001/XMLSchema}positiveInteger}                 }                 "/>
   </xsl:function>
                
            
        
        <xsl:function name="xpts:float" as="map(*)">
      <xsl:sequence select="                 map{                     'is-simple' : true(),'is-castable' : true(),'parent-type' : Q{http://www.nkutsche.com/xmlml/xpath-engine/types-schema}anyAtomicType(),'instance-of' : function($item){$item instance of Q{http://www.w3.org/2001/XMLSchema}float},'treat-as' : function($item){$item treat as Q{http://www.w3.org/2001/XMLSchema}float},'cast-as' : function($item){$item cast as Q{http://www.w3.org/2001/XMLSchema}float},'castable-as' : function($item){$item castable as Q{http://www.w3.org/2001/XMLSchema}float}                 }                 "/>
   </xsl:function>
        <xsl:function name="xpts:double" as="map(*)">
      <xsl:sequence select="                 map{                     'is-simple' : true(),'is-castable' : true(),'parent-type' : Q{http://www.nkutsche.com/xmlml/xpath-engine/types-schema}anyAtomicType(),'instance-of' : function($item){$item instance of Q{http://www.w3.org/2001/XMLSchema}double},'treat-as' : function($item){$item treat as Q{http://www.w3.org/2001/XMLSchema}double},'cast-as' : function($item){$item cast as Q{http://www.w3.org/2001/XMLSchema}double},'castable-as' : function($item){$item castable as Q{http://www.w3.org/2001/XMLSchema}double}                 }                 "/>
   </xsl:function>
        <xsl:function name="xpts:numeric" as="map(*)">
      <xsl:sequence select="                 map{                     'is-simple' : true(),'is-castable' : true(),'parent-type' : Q{http://www.nkutsche.com/xmlml/xpath-engine/types-schema}anyAtomicType(),'instance-of' : function($item){$item instance of Q{http://www.w3.org/2001/XMLSchema}numeric},'treat-as' : function($item){$item treat as Q{http://www.w3.org/2001/XMLSchema}numeric},'cast-as' : function($item){$item cast as Q{http://www.w3.org/2001/XMLSchema}numeric},'castable-as' : function($item){$item castable as Q{http://www.w3.org/2001/XMLSchema}numeric}                 }                 "/>
   </xsl:function>
            
        
        <xsl:function name="xpts:gYearMonth" as="map(*)">
      <xsl:sequence select="                 map{                     'is-simple' : true(),'is-castable' : true(),'parent-type' : Q{http://www.nkutsche.com/xmlml/xpath-engine/types-schema}anyAtomicType(),'instance-of' : function($item){$item instance of Q{http://www.w3.org/2001/XMLSchema}gYearMonth},'treat-as' : function($item){$item treat as Q{http://www.w3.org/2001/XMLSchema}gYearMonth},'cast-as' : function($item){$item cast as Q{http://www.w3.org/2001/XMLSchema}gYearMonth},'castable-as' : function($item){$item castable as Q{http://www.w3.org/2001/XMLSchema}gYearMonth}                 }                 "/>
   </xsl:function>
        <xsl:function name="xpts:gYear" as="map(*)">
      <xsl:sequence select="                 map{                     'is-simple' : true(),'is-castable' : true(),'parent-type' : Q{http://www.nkutsche.com/xmlml/xpath-engine/types-schema}anyAtomicType(),'instance-of' : function($item){$item instance of Q{http://www.w3.org/2001/XMLSchema}gYear},'treat-as' : function($item){$item treat as Q{http://www.w3.org/2001/XMLSchema}gYear},'cast-as' : function($item){$item cast as Q{http://www.w3.org/2001/XMLSchema}gYear},'castable-as' : function($item){$item castable as Q{http://www.w3.org/2001/XMLSchema}gYear}                 }                 "/>
   </xsl:function>
        <xsl:function name="xpts:gMonthDay" as="map(*)">
      <xsl:sequence select="                 map{                     'is-simple' : true(),'is-castable' : true(),'parent-type' : Q{http://www.nkutsche.com/xmlml/xpath-engine/types-schema}anyAtomicType(),'instance-of' : function($item){$item instance of Q{http://www.w3.org/2001/XMLSchema}gMonthDay},'treat-as' : function($item){$item treat as Q{http://www.w3.org/2001/XMLSchema}gMonthDay},'cast-as' : function($item){$item cast as Q{http://www.w3.org/2001/XMLSchema}gMonthDay},'castable-as' : function($item){$item castable as Q{http://www.w3.org/2001/XMLSchema}gMonthDay}                 }                 "/>
   </xsl:function>
        <xsl:function name="xpts:gMonth" as="map(*)">
      <xsl:sequence select="                 map{                     'is-simple' : true(),'is-castable' : true(),'parent-type' : Q{http://www.nkutsche.com/xmlml/xpath-engine/types-schema}anyAtomicType(),'instance-of' : function($item){$item instance of Q{http://www.w3.org/2001/XMLSchema}gMonth},'treat-as' : function($item){$item treat as Q{http://www.w3.org/2001/XMLSchema}gMonth},'cast-as' : function($item){$item cast as Q{http://www.w3.org/2001/XMLSchema}gMonth},'castable-as' : function($item){$item castable as Q{http://www.w3.org/2001/XMLSchema}gMonth}                 }                 "/>
   </xsl:function>
        <xsl:function name="xpts:gDay" as="map(*)">
      <xsl:sequence select="                 map{                     'is-simple' : true(),'is-castable' : true(),'parent-type' : Q{http://www.nkutsche.com/xmlml/xpath-engine/types-schema}anyAtomicType(),'instance-of' : function($item){$item instance of Q{http://www.w3.org/2001/XMLSchema}gDay},'treat-as' : function($item){$item treat as Q{http://www.w3.org/2001/XMLSchema}gDay},'cast-as' : function($item){$item cast as Q{http://www.w3.org/2001/XMLSchema}gDay},'castable-as' : function($item){$item castable as Q{http://www.w3.org/2001/XMLSchema}gDay}                 }                 "/>
   </xsl:function>
        <xsl:function name="xpts:boolean" as="map(*)">
      <xsl:sequence select="                 map{                     'is-simple' : true(),'is-castable' : true(),'parent-type' : Q{http://www.nkutsche.com/xmlml/xpath-engine/types-schema}anyAtomicType(),'instance-of' : function($item){$item instance of Q{http://www.w3.org/2001/XMLSchema}boolean},'treat-as' : function($item){$item treat as Q{http://www.w3.org/2001/XMLSchema}boolean},'cast-as' : function($item){$item cast as Q{http://www.w3.org/2001/XMLSchema}boolean},'castable-as' : function($item){$item castable as Q{http://www.w3.org/2001/XMLSchema}boolean}                 }                 "/>
   </xsl:function>
        <xsl:function name="xpts:base64Binary" as="map(*)">
      <xsl:sequence select="                 map{                     'is-simple' : true(),'is-castable' : true(),'parent-type' : Q{http://www.nkutsche.com/xmlml/xpath-engine/types-schema}anyAtomicType(),'instance-of' : function($item){$item instance of Q{http://www.w3.org/2001/XMLSchema}base64Binary},'treat-as' : function($item){$item treat as Q{http://www.w3.org/2001/XMLSchema}base64Binary},'cast-as' : function($item){$item cast as Q{http://www.w3.org/2001/XMLSchema}base64Binary},'castable-as' : function($item){$item castable as Q{http://www.w3.org/2001/XMLSchema}base64Binary}                 }                 "/>
   </xsl:function>
        <xsl:function name="xpts:hexBinary" as="map(*)">
      <xsl:sequence select="                 map{                     'is-simple' : true(),'is-castable' : true(),'parent-type' : Q{http://www.nkutsche.com/xmlml/xpath-engine/types-schema}anyAtomicType(),'instance-of' : function($item){$item instance of Q{http://www.w3.org/2001/XMLSchema}hexBinary},'treat-as' : function($item){$item treat as Q{http://www.w3.org/2001/XMLSchema}hexBinary},'cast-as' : function($item){$item cast as Q{http://www.w3.org/2001/XMLSchema}hexBinary},'castable-as' : function($item){$item castable as Q{http://www.w3.org/2001/XMLSchema}hexBinary}                 }                 "/>
   </xsl:function>
        <xsl:function name="xpts:anyURI" as="map(*)">
      <xsl:sequence select="                 map{                     'is-simple' : true(),'is-castable' : true(),'parent-type' : Q{http://www.nkutsche.com/xmlml/xpath-engine/types-schema}anyAtomicType(),'instance-of' : function($item){$item instance of Q{http://www.w3.org/2001/XMLSchema}anyURI},'treat-as' : function($item){$item treat as Q{http://www.w3.org/2001/XMLSchema}anyURI},'cast-as' : function($item){$item cast as Q{http://www.w3.org/2001/XMLSchema}anyURI},'castable-as' : function($item){$item castable as Q{http://www.w3.org/2001/XMLSchema}anyURI}                 }                 "/>
   </xsl:function>
        <xsl:function name="xpts:QName" as="map(*)">
      <xsl:sequence select="                 map{                     'is-simple' : true(),'is-castable' : true(),'parent-type' : Q{http://www.nkutsche.com/xmlml/xpath-engine/types-schema}anyAtomicType(),'instance-of' : function($item){$item instance of Q{http://www.w3.org/2001/XMLSchema}QName},'treat-as' : function($item){$item treat as Q{http://www.w3.org/2001/XMLSchema}QName},'cast-as' : function($item){$item cast as Q{http://www.w3.org/2001/XMLSchema}QName},'castable-as' : function($item){$item castable as Q{http://www.w3.org/2001/XMLSchema}QName}                 }                 "/>
   </xsl:function>
        <xsl:function name="xpts:NOTATION" as="map(*)">
      <xsl:sequence select="                 map{                     'is-simple' : true(),'is-castable' : false(),'parent-type' : Q{http://www.nkutsche.com/xmlml/xpath-engine/types-schema}anyAtomicType(),'instance-of' : function($item){$item instance of Q{http://www.w3.org/2001/XMLSchema}NOTATION},'treat-as' : function($item){$item treat as Q{http://www.w3.org/2001/XMLSchema}NOTATION},'cast-as' : function($item){error(xpe:error-code('XPST0080'), 'No value is castable to xs:NOTATION')},'castable-as' : function($item){error(xpe:error-code('XPST0080'), 'No value is castable to xs:NOTATION')}                 }                 "/>
   </xsl:function>
        <xsl:function name="xpts:dateTime" as="map(*)">
      <xsl:sequence select="                 map{                     'is-simple' : true(),'is-castable' : true(),'parent-type' : Q{http://www.nkutsche.com/xmlml/xpath-engine/types-schema}anyAtomicType(),'instance-of' : function($item){$item instance of Q{http://www.w3.org/2001/XMLSchema}dateTime},'treat-as' : function($item){$item treat as Q{http://www.w3.org/2001/XMLSchema}dateTime},'cast-as' : function($item){$item cast as Q{http://www.w3.org/2001/XMLSchema}dateTime},'castable-as' : function($item){$item castable as Q{http://www.w3.org/2001/XMLSchema}dateTime}                 }                 "/>
   </xsl:function>
            <xsl:function name="xpts:dateTimeStamp" as="map(*)">
      <xsl:sequence select="                 map{                     'is-simple' : true(),'is-castable' : true(),'parent-type' : Q{http://www.nkutsche.com/xmlml/xpath-engine/types-schema}dateTime(),'instance-of' : function($item){$item instance of Q{http://www.w3.org/2001/XMLSchema}dateTimeStamp},'treat-as' : function($item){$item treat as Q{http://www.w3.org/2001/XMLSchema}dateTimeStamp},'cast-as' : function($item){$item cast as Q{http://www.w3.org/2001/XMLSchema}dateTimeStamp},'castable-as' : function($item){$item castable as Q{http://www.w3.org/2001/XMLSchema}dateTimeStamp}                 }                 "/>
   </xsl:function>
        
        <xsl:function name="xpts:date" as="map(*)">
      <xsl:sequence select="                 map{                     'is-simple' : true(),'is-castable' : true(),'parent-type' : Q{http://www.nkutsche.com/xmlml/xpath-engine/types-schema}anyAtomicType(),'instance-of' : function($item){$item instance of Q{http://www.w3.org/2001/XMLSchema}date},'treat-as' : function($item){$item treat as Q{http://www.w3.org/2001/XMLSchema}date},'cast-as' : function($item){$item cast as Q{http://www.w3.org/2001/XMLSchema}date},'castable-as' : function($item){$item castable as Q{http://www.w3.org/2001/XMLSchema}date}                 }                 "/>
   </xsl:function>
        <xsl:function name="xpts:string" as="map(*)">
      <xsl:sequence select="                 map{                     'is-simple' : true(),'is-castable' : true(),'parent-type' : Q{http://www.nkutsche.com/xmlml/xpath-engine/types-schema}anyAtomicType(),'instance-of' : function($item){$item instance of Q{http://www.w3.org/2001/XMLSchema}string},'treat-as' : function($item){$item treat as Q{http://www.w3.org/2001/XMLSchema}string},'cast-as' : function($item){$item cast as Q{http://www.w3.org/2001/XMLSchema}string},'castable-as' : function($item){$item castable as Q{http://www.w3.org/2001/XMLSchema}string}                 }                 "/>
   </xsl:function>
            <xsl:function name="xpts:normalizedString" as="map(*)">
      <xsl:sequence select="                 map{                     'is-simple' : true(),'is-castable' : true(),'parent-type' : Q{http://www.nkutsche.com/xmlml/xpath-engine/types-schema}string(),'instance-of' : function($item){$item instance of Q{http://www.w3.org/2001/XMLSchema}normalizedString},'treat-as' : function($item){$item treat as Q{http://www.w3.org/2001/XMLSchema}normalizedString},'cast-as' : function($item){$item cast as Q{http://www.w3.org/2001/XMLSchema}normalizedString},'castable-as' : function($item){$item castable as Q{http://www.w3.org/2001/XMLSchema}normalizedString}                 }                 "/>
   </xsl:function>
                <xsl:function name="xpts:token" as="map(*)">
      <xsl:sequence select="                 map{                     'is-simple' : true(),'is-castable' : true(),'parent-type' : Q{http://www.nkutsche.com/xmlml/xpath-engine/types-schema}normalizedString(),'instance-of' : function($item){$item instance of Q{http://www.w3.org/2001/XMLSchema}token},'treat-as' : function($item){$item treat as Q{http://www.w3.org/2001/XMLSchema}token},'cast-as' : function($item){$item cast as Q{http://www.w3.org/2001/XMLSchema}token},'castable-as' : function($item){$item castable as Q{http://www.w3.org/2001/XMLSchema}token}                 }                 "/>
   </xsl:function>
                    <xsl:function name="xpts:language" as="map(*)">
      <xsl:sequence select="                 map{                     'is-simple' : true(),'is-castable' : true(),'parent-type' : Q{http://www.nkutsche.com/xmlml/xpath-engine/types-schema}token(),'instance-of' : function($item){$item instance of Q{http://www.w3.org/2001/XMLSchema}language},'treat-as' : function($item){$item treat as Q{http://www.w3.org/2001/XMLSchema}language},'cast-as' : function($item){$item cast as Q{http://www.w3.org/2001/XMLSchema}language},'castable-as' : function($item){$item castable as Q{http://www.w3.org/2001/XMLSchema}language}                 }                 "/>
   </xsl:function>
                    <xsl:function name="xpts:NMTOKEN" as="map(*)">
      <xsl:sequence select="                 map{                     'is-simple' : true(),'is-castable' : true(),'parent-type' : Q{http://www.nkutsche.com/xmlml/xpath-engine/types-schema}token(),'instance-of' : function($item){$item instance of Q{http://www.w3.org/2001/XMLSchema}NMTOKEN},'treat-as' : function($item){$item treat as Q{http://www.w3.org/2001/XMLSchema}NMTOKEN},'cast-as' : function($item){$item cast as Q{http://www.w3.org/2001/XMLSchema}NMTOKEN},'castable-as' : function($item){$item castable as Q{http://www.w3.org/2001/XMLSchema}NMTOKEN}                 }                 "/>
   </xsl:function>
                    <xsl:function name="xpts:Name" as="map(*)">
      <xsl:sequence select="                 map{                     'is-simple' : true(),'is-castable' : true(),'parent-type' : Q{http://www.nkutsche.com/xmlml/xpath-engine/types-schema}token(),'instance-of' : function($item){$item instance of Q{http://www.w3.org/2001/XMLSchema}Name},'treat-as' : function($item){$item treat as Q{http://www.w3.org/2001/XMLSchema}Name},'cast-as' : function($item){$item cast as Q{http://www.w3.org/2001/XMLSchema}Name},'castable-as' : function($item){$item castable as Q{http://www.w3.org/2001/XMLSchema}Name}                 }                 "/>
   </xsl:function>
                        <xsl:function name="xpts:NCName" as="map(*)">
      <xsl:sequence select="                 map{                     'is-simple' : true(),'is-castable' : true(),'parent-type' : Q{http://www.nkutsche.com/xmlml/xpath-engine/types-schema}Name(),'instance-of' : function($item){$item instance of Q{http://www.w3.org/2001/XMLSchema}NCName},'treat-as' : function($item){$item treat as Q{http://www.w3.org/2001/XMLSchema}NCName},'cast-as' : function($item){$item cast as Q{http://www.w3.org/2001/XMLSchema}NCName},'castable-as' : function($item){$item castable as Q{http://www.w3.org/2001/XMLSchema}NCName}                 }                 "/>
   </xsl:function>
                            <xsl:function name="xpts:ID" as="map(*)">
      <xsl:sequence select="                 map{                     'is-simple' : true(),'is-castable' : true(),'parent-type' : Q{http://www.nkutsche.com/xmlml/xpath-engine/types-schema}NCName(),'instance-of' : function($item){$item instance of Q{http://www.w3.org/2001/XMLSchema}ID},'treat-as' : function($item){$item treat as Q{http://www.w3.org/2001/XMLSchema}ID},'cast-as' : function($item){$item cast as Q{http://www.w3.org/2001/XMLSchema}ID},'castable-as' : function($item){$item castable as Q{http://www.w3.org/2001/XMLSchema}ID}                 }                 "/>
   </xsl:function>
                            <xsl:function name="xpts:IDREF" as="map(*)">
      <xsl:sequence select="                 map{                     'is-simple' : true(),'is-castable' : true(),'parent-type' : Q{http://www.nkutsche.com/xmlml/xpath-engine/types-schema}NCName(),'instance-of' : function($item){$item instance of Q{http://www.w3.org/2001/XMLSchema}IDREF},'treat-as' : function($item){$item treat as Q{http://www.w3.org/2001/XMLSchema}IDREF},'cast-as' : function($item){$item cast as Q{http://www.w3.org/2001/XMLSchema}IDREF},'castable-as' : function($item){$item castable as Q{http://www.w3.org/2001/XMLSchema}IDREF}                 }                 "/>
   </xsl:function>
                            <xsl:function name="xpts:ENTITY" as="map(*)">
      <xsl:sequence select="                 map{                     'is-simple' : true(),'is-castable' : true(),'parent-type' : Q{http://www.nkutsche.com/xmlml/xpath-engine/types-schema}NCName(),'instance-of' : function($item){$item instance of Q{http://www.w3.org/2001/XMLSchema}ENTITY},'treat-as' : function($item){$item treat as Q{http://www.w3.org/2001/XMLSchema}ENTITY},'cast-as' : function($item){$item cast as Q{http://www.w3.org/2001/XMLSchema}ENTITY},'castable-as' : function($item){$item castable as Q{http://www.w3.org/2001/XMLSchema}ENTITY}                 }                 "/>
   </xsl:function>
                        
                    
                
            
        
    
   <xsl:variable xmlns:axsl="http://www.w3.org/1999/XSL/TransformAlias"
                 name="this.stylesheet"
                 select="document('')"/>
   <xsl:variable xmlns:axsl="http://www.w3.org/1999/XSL/TransformAlias"
                 name="namespace-uris"
                 select="$this.stylesheet/*/namespace::*/map{name() : .} =&gt; map:merge()"/>
   <xsl:function xmlns:axsl="http://www.w3.org/1999/XSL/TransformAlias"
                 name="xpe:eqname"
                 as="xs:string">
        <xsl:param name="qname" as="xs:QName"/>
        <xsl:sequence select="'Q{' || namespace-uri-from-QName($qname) || '}' || local-name-from-QName($qname)"/>
    </xsl:function>
   <xsl:function xmlns:axsl="http://www.w3.org/1999/XSL/TransformAlias"
                 name="xpe:get-function-name-by-type"
                 as="xs:QName">
        <xsl:param name="type" as="element(xpt:type)"/>
        <xsl:sequence select="xpe:get-function-name-by-type-name(resolve-QName($type/@name, $type))"/>
    </xsl:function>
   <xsl:function xmlns:axsl="http://www.w3.org/1999/XSL/TransformAlias"
                 name="xpe:get-function-name-by-type-name"
                 as="xs:QName">
        <xsl:param name="qname" as="xs:QName"/>
        <xsl:variable name="ns"
                    select="             namespace-uri-from-QName($qname)             "/>
        <xsl:variable name="localname"
                    select="             local-name-from-QName($qname)             "/>
        <xsl:variable name="prefix"
                    select="if ($ns = $namespace-uris('xs'))              then 'xpts'              else 'xpt'"/>
        <xsl:sequence select="             QName($namespace-uris($prefix), $prefix || ':' || $localname)             "/>
    </xsl:function>
</xsl:stylesheet>
